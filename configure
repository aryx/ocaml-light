#!/bin/sh

#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

#pad: to debug errors in config/auto-aux/*.c you can
# export verbose=yes and rerun ./configure

##############################################################################
# Command line variables and their default values
##############################################################################

bindir=/usr/local/bin
libdir=/usr/local/lib/ocaml
mandir=/usr/local/man/man1
manext=1

host_type=unknown

cc=''
cclibs=''
x11_include_dir=''
x11_lib_dir=''
posix_threads=no

# TODO? -Wno-unused?
# need gnu89 otherwise gcc15 complains a lot about function with
# wrong number of arguments (e.g. in interprete.c)
# alt: we could add the --std only when we detect gcc > 15 
gcc_warnings="-Wall --std=gnu89"

##############################################################################
# Parse command-line arguments
##############################################################################

#TODO: support -as, -aspp, -partialld so can run for example from INSTALL.adoc:
#    * On a Linux x86-64 host, to build a 32-bit version of OCaml:
#          ./configure -cc "gcc -m32" -as "as --32" -aspp "gcc -m32 -c" \
#                -host i386-linux -partialld "ld -r -melf_i386"

while : ; do
  case "$1" in
    "") break;;
    -bindir|--bindir)
        bindir=$2; shift;;
    -libdir|--libdir)
        libdir=$2; shift;;
    -mandir|--mandir)
        mandir=$2
        manext=`echo $mandir | sed -e 's/^.*\(.\)$/\1/'`
        shift;;
    -host*|--host*)
        host_type=$2; shift;;
    -cc*)
        cc="$2"; shift;;
    -lib*)
        cclibs="$2 "; shift;;
    -x11include*|--x11include*)
        x11_include_dir=$2; shift;;
    -x11lib*|--x11lib*)
        x11_lib_dir=$2; shift;;
    -with-pthread*|--with-pthread*)
        posix_threads=yes;;
    *) echo "Unknown option \"$1\"." 1>&2; exit 2;;
  esac
  shift
done

# Sanity checks

case "$bindir" in
  /*) ;;
   *) echo "The -bindir directory must be absolute." 1>&2; exit 2;;
esac
case "$libdir" in
  /*) ;;
   *) echo "The -libdir directory must be absolute." 1>&2; exit 2;;
esac
case "$mandir" in
  /*) ;;
   *) echo "The -mandir directory must be absolute." 1>&2; exit 2;;
esac

##############################################################################
# Generate the files
##############################################################################

# !!!Changing directory!!!
cd config/auto-aux

rm -f s.h m.h Makefile
touch s.h m.h Makefile

# Where to install

echo "BINDIR=$bindir" >> Makefile
echo "LIBDIR=$libdir" >> Makefile
echo "MANDIR=$mandir" >> Makefile
echo "MANEXT=$manext" >> Makefile

##############################################################################
# Determine the system type (from config/auto-aux/)
##############################################################################

if test "$host_type" = "unknown"; then
  if host_type=`./config.guess`; then :; else
    echo "Cannot guess host type"
    echo "You must specify one with the -host option"
    exit 2
  fi
fi
if host=`./config.sub $host_type`; then :; else
  echo "Please specify the correct host type with the -host option"
  exit 2
fi
echo "Configuring for a $host ..."

# Do we have gcc?

if test -z "$cc"; then
  if sh ./searchpath gcc; then
    echo "gcc found"
    cc=gcc
  else
    cc=cc
  fi
fi

##############################################################################
# Configure the bytecode compiler
##############################################################################

bytecc="$cc"
bytecccompopts=""
bytecclinkopts=""

case "$bytecc,$host" in
  gcc,*-*-darwin*)
    bytecccompopts="-Wno-format $gcc_warnings";;
  gcc*)
    bytecccompopts="-fno-defer-pop $gcc_warnings";;
esac

echo "BYTECC=$bytecc" >> Makefile
echo "BYTECCCOMPOPTS=$bytecccompopts" >> Makefile
echo "BYTECCLINKOPTS=$bytecclinkopts" >> Makefile

# Configure compiler to use in further tests

#pad: recent compilers (gcc, clang) use new defaults that prevent to compile
# the test code in config/auto-aux/*.c hence those -Wno-xxx below
#alt: fix config/auto-aux/*.c to be compliant with the new C23 standard
# by either including appropriate .h or just add prototypes of used functions
cc="$bytecc $bytecclinkopts -Wno-implicit-function-declaration -Wno-implicit-int"
export cc cclibs

# Check C compiler

sh ./runtest ansi.c
case $? in
  0) echo "The C compiler is ANSI-compliant.";;
  1) echo "The C compiler $cc is not ANSI-compliant."
     echo "You need an ANSI C compiler to build OCaml light."
     exit 2;;
  *) echo "Unable to compiler the test program."
     echo "Make sure the C compiler $cc is properly installed."
     exit 2;;
esac

# Check the sizes of data types

echo "Checking the sizes of integers and pointers..."
set `sh ./runtest sizes.c`
case "$1,$2,$3" in
  4,4,4) echo "OK, this is a regular 32 bit architecture."
         echo "#undef ARCH_SIXTYFOUR" >> m.h;;
  4,8,8) echo "Wow! A 64 bit architecture!"
         
         case "$bytecc,$host" in
             gcc,alpha-*-osf*)
		 echo "#define ARCH_SIXTYFOUR" >> m.h
		 echo "#define ARCH_CODE32" >> m.h;;
	     gcc,x86_64-*-linux*)
		 #pad: this allows to compile ocamlrun in 64bit and asmrun
		 # in 32bit.
		 #alt: use -m32 for bytegcc too and undef ARCH_SIXTYFOUR
		 # (but got weird problems with ocamlrun compiled with -m32) 
		 echo "#if defined(__x86_64__) || defined(_M_X64) || \\" >> m.h
		 echo "     defined(__aarch64__) || \\" >> m.h
		 echo "     (defined(__riscv) && __riscv_xlen == 64)" >> m.h
		 echo "#define ARCH_SIXTYFOUR" >> m.h
		 echo "#endif" >> m.h;;
             *)
		 echo "#define ARCH_SIXTYFOUR" >> m.h
		 echo "#undef ARCH_CODE32" >> m.h;;
         esac;;
  8,*,*) echo "Wow! A 64 bit architecture!"
         echo "Unfortunately, OCaml light does not handle the case"
         echo "sizeof(int) = 8."
         echo "OCaml light won't run on this architecture."
         exit 2;;
  *,*,8) echo "Wow! A 64 bit architecture!"
         echo "Unfortunately, OCaml light cannot work in the case"
         echo "sizeof(long) != sizeof(long *)."
         echo "OCaml light won't run on this architecture."
         exit 2;;
  *,*,*) echo "This architecture seems to be neither 32 bits nor 64 bits."
         echo "OCaml light won't run on this architecture."
         exit 2;;
      *) echo "Unable to compile the test program."
         echo "Make sure the C compiler $cc is properly installed."
         exit 2;;
esac

# Determine endianness

sh ./runtest endian.c
case $? in
  0) echo "This is a big-endian architecture."
     echo "#define ARCH_BIG_ENDIAN" >> m.h;;
  1) echo "This is a little-endian architecture."
     echo "#undef ARCH_BIG_ENDIAN" >> m.h;;
  2) echo "This architecture seems to be neither big endian nor little endian."
     echo "OCaml light won't run on this architecture."
     exit 2;;
  *) echo "Something went wrong during endianness determination."
     echo "You'll have to figure out endianness yourself"
     echo "(option ARCH_BIG_ENDIAN in m.h).";;
esac

# Determine alignment constraints

sh ./runtest dblalign.c
case $? in
  0) echo "Doubles can be word-aligned."
     echo "#undef ARCH_ALIGN_DOUBLE" >> m.h;;
  1) echo "Doubles must be doubleword-aligned."
     echo "#define ARCH_ALIGN_DOUBLE" >> m.h;;
  *) echo "Something went wrong during alignment determination for doubles."
     echo "I'm going to assume this architecture has alignment constraints over doubles."
     echo "That's a safe bet: OCaml light will work even if"
     echo "this architecture has actually no alignment constraints."
     echo "#define ARCH_ALIGN_DOUBLE" >> m.h;;
esac

##############################################################################
# Configure the native-code compiler
##############################################################################

arch=none
model=default
system=unknown

case "$host" in
  #TODO: support system=plan9 at some point?
  i[3456]86-*-linuxaout)        arch=i386; system=linux_aout;;
  i[3456]86-*-linux)            arch=i386; system=linux_elf;;
  i[3456]86-*-*bsd*)            arch=i386; system=bsd;;
  #TODO: port amd64 so can compile with arch=amd64; system=linux_elf
  # in the mean time we gonna "cross-compile" to i386 via gcc -m32
  x86_64-*-linux*)            arch=i386; system=linux_elf;;
esac

case "$arch,$system,$cc" in
  alpha,digital,gcc*) nativecc=cc;;
  mips,*,gcc*) nativecc=cc;;
  *) nativecc="$bytecc";;
esac

nativecccompopts=''
nativecclinkopts=''

#TODO: could also case on $host here for crosscompiling settings
case "$arch,$nativecc,$system" in
    alpha,cc*,digital)
	nativecccompopts='-std1';;
    #TODO: support amd64
    i386,gcc*,*)
	nativecccompopts='-m32 -Wall --std=gnu89'
	nativecclinkopts='-m32';;
esac

#TODO: define as='' at some point too
asflags=''
aspp='$(AS)'
asppflags=''

case "$arch,$model,$system" in
    alpha,*,linux)
	aspp='gcc'
	asppflags='-c -DSYS_$(SYSTEM)';;
    #TODO: support amd64
    i386,*,*)
        aspp='gcc'
	asflags='--32'
	asppflags='-m32 -c -DSYS_$(SYSTEM)';;
esac

echo "ARCH=$arch" >> Makefile
echo "MODEL=$model" >> Makefile
echo "SYSTEM=$system" >> Makefile
echo "NATIVECC=$nativecc" >> Makefile
echo "NATIVECCCOMPOPTS=$nativecccompopts" >> Makefile
echo "NATIVECCLINKOPTS=$nativecclinkopts" >> Makefile
echo "ASFLAGS=$asflags" >> Makefile
echo "ASPP=$aspp" >> Makefile
echo "ASPPFLAGS=$asppflags" >> Makefile

# Where is ranlib?

if sh ./searchpath ranlib; then
  echo "ranlib found"
  echo "RANLIB=ranlib" >> Makefile
  echo "RANLIBCMD=ranlib" >> Makefile
else
  echo "ranlib not used"
  echo "RANLIB=ar rs" >> Makefile
  echo "RANLIBCMD=" >> Makefile
fi

# Do #! scripts work?

if (SHELL=/bin/sh; export SHELL; ./sharpbang > /dev/null); then
  echo "#! appears to work in shell scripts"
  case "$host" in
    *-*-sunos*)
      if test `echo $bindir/ocamlrun | wc -c` -gt 32; then
        echo "We won't use it, though, because the path"
        echo "      $bindir/ocamlrun"
        echo "is too long (more than 32 characters -- some kernels don't support this)"
        echo "SHARPBANGSCRIPTS=false" >> Makefile
      else
        echo "SHARPBANGSCRIPTS=true" >> Makefile
      fi;;
    *)  echo "SHARPBANGSCRIPTS=true" >> Makefile;;
  esac
else
  echo "No support for #! in shell scripts"
  echo "SHARPBANGSCRIPTS=false" >> Makefile
fi

# This is obviously a Unix system

echo '#define OCAML_OS_TYPE "Unix"' >> s.h

# Find a good byte move function

if sh ./runtest -Dcopy=memmove -Dreverse bytecopy.c; then
  echo "Function \"memmove\" is provided and handles overlapping moves correctly."
  echo "#define HAS_MEMMOVE" >> s.h
fi
if sh ./runtest -Dcopy=bcopy bytecopy.c; then
  echo "Function \"bcopy\" is provided and handles overlapping moves correctly."
  echo "#define HAS_BCOPY" >> s.h
fi

# Check the semantics of signal handlers

if sh ./hasgot sigaction sigprocmask; then
  echo "POSIX signal handling found."
  echo "#define POSIX_SIGNALS" >> s.h
else
  if sh ./runtest signals.c; then
    echo "Signals have the BSD semantics."
    echo "#define BSD_SIGNALS" >> s.h
  else
    echo "Signals have the System V semantics."
  fi
  if sh ./hasgot sigsetmask; then
    echo "sigsetmask() found"
    echo "#define HAS_SIGSETMASK" >> s.h
  fi
fi

# For the sys module

if sh ./hasgot times; then
  echo "times() found."
  echo "#define HAS_TIMES" >> s.h
fi

# For the terminfo module

#pad: ugly: disable ncurses for now because there is no /usr/lib32/libncurses.a
# and that can cause issue with ocamlopt if we want to statically link
# binaries. Anyway it is just used in parsing/location.ml to highlight
# errors and is a optional.

#for libs in "" "-lcurses" "-ltermcap" "-lcurses -ltermcap"; do
#  if sh ./hasgot $libs tgetent tgetstr tgetnum tputs; then
#    echo "termcap functions found (with libraries '$libs')"
#    echo "#define HAS_TERMCAP" >> s.h
#    cclibs="${cclibs}${libs}"
#    break
#  fi
#done

##############################################################################
# Configuration for the libraries
##############################################################################

otherlibraries="unix str num dynlink"

# For the Unix library

has_sockets=no
if sh ./hasgot socket socketpair bind listen accept connect; then
  echo "You have BSD sockets."
  echo "#define HAS_SOCKETS" >> s.h
  has_sockets=yes
elif sh ./hasgot -lnsl -lsocket socket socketpair bind listen accept connect; then
  echo "You have BSD sockets (with libraries '-lnsl -lsocket')"
  cclibs="$cclibs -lnsl -lsocket"
  echo "#define HAS_SOCKETS" >> s.h
  has_sockets=yes
fi

#pad: I've removed some HAS_STRERROR test, to simplify code
# so it's not tested/detected here anymore
#TODO: should hasgot -i stdlib.h, seems more standard now

if sh ./hasgot -i unistd.h; then
  echo "unistd.h found."
  echo "#define HAS_UNISTD" >> s.h
fi

if sh ./hasgot -i dirent.h; then
  echo "dirent.h found."
  echo "#define HAS_DIRENT" >> s.h
fi

if sh ./hasgot rewinddir; then
  echo "rewinddir() found."
  echo "#define HAS_REWINDDIR" >> s.h
fi

if sh ./hasgot lockf; then
  echo "lockf() found."
  echo "#define HAS_LOCKF" >> s.h
fi

if sh ./hasgot mkfifo; then
  echo "mkfifo() found."
  echo "#define HAS_MKFIFO" >> s.h
fi

if sh ./hasgot getcwd; then
  echo "getcwd() found."
  echo "#define HAS_GETCWD" >> s.h
fi

if sh ./hasgot getwd; then
  echo "getwd() found."
  echo "#define HAS_GETWD" >> s.h
fi

if sh ./hasgot getpriority setpriority; then
  echo "getpriority() found."
  echo "#define HAS_GETPRIORITY" >> s.h
fi

if sh ./hasgot -i utime.h && sh ./hasgot utime; then
  echo "utime() found."
  echo "#define HAS_UTIME" >> s.h
fi

if sh ./hasgot utimes; then
  echo "utimes() found."
  echo "#define HAS_UTIMES" >> s.h
fi

if sh ./hasgot dup2; then
  echo "dup2() found."
  echo "#define HAS_DUP2" >> s.h
fi

if sh ./hasgot fchmod fchown; then
  echo "fchmod() found."
  echo "#define HAS_FCHMOD" >> s.h
fi

if sh ./hasgot truncate ftruncate; then
  echo "truncate() found."
  echo "#define HAS_TRUNCATE" >> s.h
fi

has_select=no
if sh ./hasgot select; then
  echo "select() found."
  echo "#define HAS_SELECT" >> s.h
  has_select=yes
fi

if sh ./hasgot -i sys/select.h; then
  echo "sys/select.h found."
  echo "#define HAS_SYS_SELECT_H" >> s.h
fi

if sh ./hasgot symlink readlink lstat;  then
  echo "symlink() found."
  echo "#define HAS_SYMLINK" >> s.h
fi

has_wait=no
if sh ./hasgot waitpid;  then
  echo "waitpid() found."
  echo "#define HAS_WAITPID" >> s.h
  has_wait=yes
fi

if sh ./hasgot wait4;  then
  echo "wait4() found."
  echo "#define HAS_WAIT4" >> s.h
  has_wait=yes
fi

if sh ./hasgot -i sys/param.h && sh ./runtest getgroups.c; then
  echo "getgroups() found."
  echo "#define HAS_GETGROUPS" >> s.h
fi

if sh ./hasgot -i termios.h && 
   sh ./hasgot tcgetattr tcsetattr tcsendbreak tcflush tcflow; then
  echo "POSIX termios found."
  echo "#define HAS_TERMIOS" >> s.h
fi

# Async I/O under OSF1 3.x are so buggy that the test program hangs...
testasyncio=true
if test -f /usr/bin/uname; then
  case "`/usr/bin/uname -s -r`" in
    "OSF1 V3."*) testasyncio=false;;
  esac
fi
if $testasyncio && sh ./runtest async_io.c; then
  echo "Asynchronous I/O are supported."
  echo "#define HAS_ASYNC_IO" >> s.h
fi

has_setitimer=no
if sh ./hasgot setitimer; then
  echo "setitimer() found."
  echo "#define HAS_SETITIMER" >> s.h
  has_setitimer="yes"
fi

if sh ./hasgot gethostname; then
  echo "gethostname() found."
  echo "#define HAS_GETHOSTNAME" >> s.h
fi

if sh ./hasgot -i sys/utsname.h && sh ./hasgot uname; then
  echo "uname() found."
  echo "#define HAS_UNAME" >> s.h
fi

has_gettimeofday=no
if sh ./hasgot gettimeofday; then
  echo "gettimeofday() found."
  echo "#define HAS_GETTIMEOFDAY" >> s.h
  has_gettimeofday="yes"
fi

if sh ./hasgot mktime; then
  echo "mktime() found."
  echo "#define HAS_MKTIME" >> s.h
fi

if sh ./hasgot setsid; then
  echo "setsid() found."
  echo "#define HAS_SETSID" >> s.h
fi

# Determine if the debugger is supported

if test "$has_sockets" = "yes"; then
  echo "Replay debugger supported."
  debugger="ocamldebugger"
else
  echo "No replay debugger (missing system calls)"
  debugger=""
fi

# Determine the target architecture for the "num" library

#TODO? detect x86_64 and compile lib with -m32?
case "$host" in
  i[3456]86-*-linux) bignum_arch=x86;;
  *) bignum_arch=C
esac

echo "BIGNUM_ARCH=$bignum_arch" >> Makefile

# Determine if the threads library is supported

if test "$posix_threads" = "yes"; then
  echo "Threads library supported (using POSIX system threads)."
  otherlibraries="$otherlibraries systhreads"
elif test "$has_select" = "yes" \
&& test "$has_setitimer" = "yes" \
&& test "$has_gettimeofday" = "yes" \
&& test "$has_wait" = "yes"; then
  echo "Threads library supported."
  otherlibraries="$otherlibraries threads"
else
  echo "No threads library (missing system calls)"
fi

# Determine the location of X include files and libraries

#alt: we could remove all of that as otherlibs/graphics/ got later
# moved out of the ocaml repo, but graphics is useful for efuns
# so let's keep it

x11_include="not found"
x11_link="not found"

for dir in $x11_include_dir \
  /usr/include /usr/local/include \
  /usr/X11R6/include /usr/X11R5/include /usr/X11R4/include \
  /usr/include/X11R6 /usr/include/X11R5 /usr/include/X11R4 \
  /usr/local/X11R6/include /usr/local/X11R5/include /usr/local/X11R4/include \
  /usr/local/include/X11R6 /usr/local/include/X11R5 /usr/local/include/X11R4 \
  /usr/X11/include /usr/include/X11 /usr/local/X11/include \
  /usr/local/include/X11 /usr/X386/include /usr/x386/include \
  /usr/XFree86/include/X11 \
  /usr/unsupported/include /usr/athena/include /usr/local/x11r5/include \
  /usr/lpp/Xamples/include /usr/openwin/include /usr/openwin/share/include \
  /opt/X11R6/include /opt/X11R5/include
do
  if test -f $dir/X11/X.h; then
    echo "Found $dir/X11/X.h"
    x11_include=$dir
    break
  fi
done

for dir in $x11_lib_dir \
  /usr/lib /usr/local/lib \
  /usr/lib/x86_64-linux-gnu/ /usr/lib/aarch64-linux-gnu \
  /usr/X11R6/lib /usr/X11R5/lib /usr/X11R4/lib \
  /usr/lib/X11R6 /usr/lib/X11R5 /usr/lib/X11R4 \
  /usr/local/X11R6/lib /usr/local/X11R5/lib /usr/local/X11R4/lib \
  /usr/local/lib/X11R6 /usr/local/lib/X11R5 /usr/local/lib/X11R4 \
  /usr/X11/lib /usr/lib/X11 /usr/local/X11/lib \
  /usr/local/lib/X11 /usr/X386/lib /usr/x386/lib \
  /usr/XFree86/lib/X11 \
  /usr/unsupported/lib /usr/athena/lib /usr/local/x11r5/lib \
  /usr/lpp/Xamples/lib /usr/openwin/lib /usr/openwin/share/lib \
  /opt/X11R6/lib /opt/X11R5/lib
do
  if test -f $dir/libX11.a || \
     test -f $dir/libX11.so || \
     test -f $dir/libX11.sa; then
    echo "Found $dir/libX11.a or $dir/libX11.so"
    x11_link="-cclib -L$dir -cclib -lX11"
    break
  fi
done


if test "$x11_include" = "not found" || test "$x11_link" = "not found"
then
  echo "X11 not found, the \"graph\" library will not be supported."
else
  echo "Location of X11 include files: $x11_include/X11"
  echo "Options for linking with X11: $x11_link"
  otherlibraries="$otherlibraries graph"
  if test "$x11_include" = "/usr/include"; then
    x11_include=""
  else
    x11_include="-I$x11_include"
  fi
  echo "X11_INCLUDES=$x11_include" >> Makefile
  echo "X11_LINK=$x11_link" >> Makefile
fi

# See if we can compile the dbm library

if sh ./hasgot -i ndbm.h
then
  echo "NDBM library found."
  otherlibraries="$otherlibraries dbm"
else
  echo "NDBM not found, the \"dbm\" library will not be supported."
fi

##############################################################################
# Finish generated files
##############################################################################

cclibs="$cclibs -lm"
echo "CCLIBS=$cclibs" >> Makefile
echo "OTHERLIBRARIES=$otherlibraries" >> Makefile
echo "DEBUGGER=$debugger" >> Makefile

rm -f tst hasgot.c
rm -f ../m.h ../s.h ../Makefile
mv m.h s.h Makefile ..

##############################################################################
# Print a summary
##############################################################################

echo
echo "** Configuration summary **"
echo
echo "Directories where OCaml light will be installed:"
echo "	binaries.................. $bindir"
echo "	standard library.......... $libdir"
echo "	manual pages.............. $mandir (with extension .$manext)"

echo "Configuration for the bytecode compiler:"
echo "	C compiler used........... $bytecc"
echo "	options for compiling..... $bytecccompopts"
echo "	options for linking....... $bytecclinkopts $cclibs"

echo "Configuration for the native-code compiler:"
if test "$arch" = "none"; then
  echo "	(not supported on this platform)"
else
  if test "$model" = "default"; then
    echo "	hardware architecture..... $arch"
  else
    echo "	hardware architecture..... $arch ($model)"
  fi
  if test "$system" = "unknown"; then : ; else
  echo "	OS variant................ $system"
  fi
  echo "	C compiler used........... $nativecc"
  echo "	options for compiling..... $nativecccompopts"
  echo "	options for linking....... $nativecclinkopts $cclibs"
  # pad: \$(AS) because there is no configure -as ... yet nor a
  # config/Makefile entry for AS=... We use gcc as a frontend for the
  # assembler via ASPP in most of our Makefiles (we use 'as' directly though
  # in the asmcomp/<arch>/proc.ml).
  # The only direct use of the AS is in testsasmcomp/Makefile
  echo "        assembler ................ \$(AS) $asflags"
  echo "        preprocessed assembler ... $aspp $asppflags"
fi

if test "$debugger" = "ocamldebugger"; then
  echo "Source-level replay debugger: supported"
else
  echo "Source-level replay debugger: not supported"
fi

echo "Configuration for the external libraries:"
echo "	libraries supported....... $otherlibraries"

echo "The \"num\" library:"
echo "	target architecture ...... $bignum_arch"

if test "$x11_include" != "not found" && test "$x11_lib" != "not found"; then
echo "The \"graph\" library:"
echo "	options for compiling .... $x11_include"
echo "	options for linking ...... $x11_link"
fi
