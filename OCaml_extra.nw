\section{[[./utils/]]}

\subsection*{[[./utils/config.mli]]}

<<signature Config.version>>=
(* System configuration *)

val version: string
        (* The current version number of the system *)
@

<<signature Config.standard_library>>=
val standard_library: string
        (* The directory containing the standard libraries *)
@

<<signature Config.bytecomp_c_compiler>>=
val bytecomp_c_compiler: string
        (* The C compiler to use for the custom runtime mode of the
           bytecode compiler *)
@

<<signature Config.native_c_compiler>>=
val native_c_compiler: string
        (* The C compiler to use for the native code compiler *)
@

<<signature Config.native_partial_linker>>=
val native_partial_linker: string
        (* The linker to use for partial links (-output-obj option) *)
@

<<signature Config.c_libraries>>=
val c_libraries: string
        (* The C libraries to link with custom runtimes *)
@

<<signature Config.ranlib>>=
val ranlib: string
        (* Command to randomize a library, or "" if not needed *)
@

<<signature Config.load_path>>=
val load_path: string list ref
        (* Directories in the search path for .cmi and .cmo files *)
@

<<signature Config.exec_magic_number>>=
val exec_magic_number: string
        (* Magic number for bytecode executable files *)
@

<<signature Config.cmi_magic_number>>=
val cmi_magic_number: string
        (* Magic number for compiled interface files *)
@

<<signature Config.cmo_magic_number>>=
val cmo_magic_number: string
        (* Magic number for object bytecode files *)
@

<<signature Config.cma_magic_number>>=
val cma_magic_number: string
        (* Magic number for archive files *)
@

<<signature Config.cmx_magic_number>>=
val cmx_magic_number: string
        (* Magic number for compilation unit descriptions *)
@

<<signature Config.cmxa_magic_number>>=
val cmxa_magic_number: string
        (* Magic number for libraries of compilation unit descriptions *)
@

<<signature Config.ast_intf_magic_number>>=
val ast_intf_magic_number: string
        (* Magic number for file holding an interface syntax tree *)
@

<<signature Config.ast_impl_magic_number>>=
val ast_impl_magic_number: string
        (* Magic number for file holding an implementation syntax tree *)
@

<<signature Config.max_tag>>=
val max_tag: int
        (* Biggest tag that can be stored in the header of a block. *)
@

<<signature Config.max_young_wosize>>=
val max_young_wosize: int
        (* Maximal size of arrays that are directly allocated in the
           minor heap *)
@

<<signature Config.architecture>>=
val architecture: string
        (* Name of processor type for the native-code compiler *)
@

<<signature Config.model>>=
val model: string
        (* Name of processor submodel for the native-code compiler *)
@

<<signature Config.system>>=
val system: string
        (* Name of operating system for the native-code compiler *)
@

<<signature Config.ext_obj>>=
val ext_obj: string
        (* Extension for object files, e.g. [.o] under Unix. *)
@

<<signature Config.ext_asm>>=
val ext_asm: string
        (* Extension for assembler files, e.g. [.s] under Unix. *)
@

<<signature Config.ext_lib>>=
val ext_lib: string
        (* Extension for library files, e.g. [.a] under Unix. *)
@


%-------------------------------------------------------------

<<./utils/config.mli>>=

<<copyright header>>

<<signature Config.version>>

<<signature Config.standard_library>>
<<signature Config.bytecomp_c_compiler>>
<<signature Config.native_c_compiler>>
<<signature Config.native_partial_linker>>
<<signature Config.c_libraries>>
<<signature Config.ranlib>>

<<signature Config.load_path>>

<<signature Config.exec_magic_number>>
<<signature Config.cmi_magic_number>>
<<signature Config.cmo_magic_number>>
<<signature Config.cma_magic_number>>
<<signature Config.cmx_magic_number>>
<<signature Config.cmxa_magic_number>>
<<signature Config.ast_intf_magic_number>>
<<signature Config.ast_impl_magic_number>>

<<signature Config.max_tag>>
<<signature Config.max_young_wosize>>
<<signature Config.architecture>>
<<signature Config.model>>
<<signature Config.system>>

<<signature Config.ext_obj>>
<<signature Config.ext_asm>>
<<signature Config.ext_lib>>
@


\subsection*{[[./utils/misc.mli]]}


%-------------------------------------------------------------

<<./utils/misc.mli>>=
<<copyright header>>

(* Miscellaneous useful types and functions *)

<<signature Misc.fatal_error>>
<<exception Misc.Fatal_error>>

<<signature Misc.map_end>>
<<signature Misc.for_all2>>
<<signature Misc.filter>>
<<signature Misc.mem_assq>>
<<signature Misc.replicate_list>>

<<signature Misc.find_in_path>>
<<signature Misc.remove_file>>

<<signature Misc.create_hashtable>>

<<signature Misc.copy_file>>
<<signature Misc.copy_file_chunk>>

<<signature Misc.log2>>
<<signature Misc.align>>
<<signature Misc.no_overflow_add>>
<<signature Misc.no_overflow_sub>>
@


\subsection*{[[./utils/misc.ml]]}



%-------------------------------------------------------------

<<./utils/misc.ml>>=
<<copyright header>>

(* Errors *)

<<exception Misc.Fatal_error>>

<<function Misc.fatal_error>>

(* List functions *)

<<function Misc.map_end>>

<<function Misc.for_all2>>

<<function Misc.filter>>

<<function Misc.mem_assq>>

<<function Misc.replicate_list>>

(* File functions *)

<<function Misc.find_in_path>>

<<function Misc.remove_file>>

(* Hashtable functions *)

<<function Misc.create_hashtable>>

<<function Misc.copy_file>>

<<function Misc.copy_file_chunk>>

(* Integer operations *)

<<function Misc.log2>>

<<function Misc.align>>

<<function Misc.no_overflow_add>>

<<function Misc.no_overflow_sub>>

@


\subsection*{[[./utils/tbl.mli]]}

<<signature Tbl.empty>>=
val empty: ('a, 'b) t
@

<<signature Tbl.add>>=
val add: 'a -> 'b -> ('a, 'b) t -> ('a, 'b) t
@

<<signature Tbl.find>>=
val find: 'a -> ('a, 'b) t -> 'b
@

<<signature Tbl.remove>>=
val remove: 'a -> ('a,  'b) t -> ('a, 'b) t
@

<<signature Tbl.iter>>=
val iter: ('a -> 'b -> 'c) -> ('a, 'b) t -> unit
@

<<signature Tbl.print>>=
val print: ('a -> unit) -> ('b -> unit) -> ('a, 'b) t -> unit
@


%-------------------------------------------------------------

<<./utils/tbl.mli>>=
<<copyright header>>

(* Association tables from any ordered type to any type.
   We use the generic ordering to compare keys. *)

type ('a, 'b) t

<<signature Tbl.empty>>
<<signature Tbl.add>>
<<signature Tbl.find>>
<<signature Tbl.remove>>
<<signature Tbl.iter>>

<<signature Tbl.print>>
@


\subsection*{[[./utils/tbl.ml]]}

% lol, can now use Map :)

<<type Tbl.t>>=

type ('a, 'b) t =
    Empty
  | Node of ('a, 'b) t * 'a * 'b * ('a, 'b) t * int
@

<<constant Tbl.empty>>=
let empty = Empty
@

<<constant Tbl.height>>=
let height = function
    Empty -> 0
  | Node(_,_,_,_,h) -> h
@

<<function Tbl.create>>=
let create l x d r =
  let hl = height l and hr = height r in
  Node(l, x, d, r, (if hl >= hr then hl + 1 else hr + 1))
@

<<function Tbl.bal>>=
let bal l x d r =
  let hl = height l and hr = height r in
  if hl > hr + 1 then
    match l with
    | Node (ll, lv, ld, lr, _) when height ll >= height lr ->
        create ll lv ld (create lr x d r)
    | Node (ll, lv, ld, Node (lrl, lrv, lrd, lrr, _), _) ->
        create (create ll lv ld lrl) lrv lrd (create lrr x d r)
    | _ -> assert false
  else if hr > hl + 1 then
    match r with
    | Node (rl, rv, rd, rr, _) when height rr >= height rl ->
        create (create l x d rl) rv rd rr
    | Node (Node (rll, rlv, rld, rlr, _), rv, rd, rr, _) ->
        create (create l x d rll) rlv rld (create rlr rv rd rr)
    | _ -> assert false
  else
    create l x d r
@

<<function Tbl.add>>=
let rec add x data = function
    Empty ->
      Node(Empty, x, data, Empty, 1)
  | Node(l, v, d, r, h) as t ->
      let c = compare x v in
      if c = 0 then
        Node(l, x, data, r, h)
      else if c < 0 then
        bal (add x data l) v d r
      else
        bal l v d (add x data r)
@

<<function Tbl.find>>=
let rec find x = function
    Empty ->
      raise Not_found
  | Node(l, v, d, r, _) ->
      let c = compare x v in
      if c = 0 then d
      else find x (if c < 0 then l else r)
@

<<function Tbl.merge>>=
let rec merge t1 t2 =
  match (t1, t2) with
    (Empty, t) -> t
  | (t, Empty) -> t
  | (Node(l1, v1, d1, r1, h1), Node(l2, v2, d2, r2, h2)) ->
      bal l1 v1 d1 (bal (merge r1 l2) v2 d2 r2)
@

<<function Tbl.remove>>=
let rec remove x = function
    Empty ->
      Empty
  | Node(l, v, d, r, h) as t ->
      let c = compare x v in
      if c = 0 then
        merge l r
      else if c < 0 then
        bal (remove x l) v d r
      else
        bal l v d (remove x r)
@

<<function Tbl.iter>>=
let rec iter f = function
    Empty -> ()
  | Node(l, v, d, r, _) ->
      iter f l; f v d; iter f r
@

<<function Tbl.print>>=
(* @Scheck: dumper *)
let print print_key print_data tbl =
  open_hvbox 2;
  print_string "[[";
  iter (fun k d ->
          open_box 2;
          print_key k; print_string " ->"; print_space();
          print_data d; print_string ";";
          close_box(); print_space())
        tbl;
  print_string "]]";
  close_box()
@


%-------------------------------------------------------------

<<./utils/tbl.ml>>=
<<copyright header>>
<<type Tbl.t>>

<<constant Tbl.empty>>

<<constant Tbl.height>>

<<function Tbl.create>>

<<function Tbl.bal>>

<<function Tbl.add>>

<<function Tbl.find>>

<<function Tbl.merge>>

<<function Tbl.remove>>

<<function Tbl.iter>>

open Format

<<function Tbl.print>>
@


\subsection*{[[./utils/terminfo.mli]]}


%-------------------------------------------------------------

<<./utils/terminfo.mli>>=
<<copyright header>>

(* Basic interface to the terminfo database *)

external setupterm: unit -> unit = "terminfo_setup"
external getstr: string -> string = "terminfo_getstr"
external getnum: string -> int = "terminfo_getnum"
external puts: out_channel -> string -> int -> unit = "terminfo_puts"

@


\subsection*{[[./utils/terminfo.ml]]}


%-------------------------------------------------------------

<<./utils/terminfo.ml>>=
<<copyright header>>

(* Basic interface to the terminfo database *)

external setupterm: unit -> unit = "terminfo_setup"
external getstr: string -> string = "terminfo_getstr"
external getnum: string -> int = "terminfo_getnum"
external puts: out_channel -> string -> int -> unit = "terminfo_puts"

@


\subsection*{[[./utils/clflags.ml]]}



%-------------------------------------------------------------

<<./utils/clflags.ml>>=
<<copyright header>>

(* Command-line parameters *)

<<constant Clflags.objfiles>>
<<constant Clflags.ccobjs>>
<<constant Clflags.compile_only>>
<<constant Clflags.exec_name>>
<<constant Clflags.archive_name>>
<<constant Clflags.object_name>>
<<constant Clflags.include_dirs>>
<<constant Clflags.print_types>>
<<constant Clflags.make_archive>>
<<constant Clflags.debug>>
<<constant Clflags.fast>>
<<constant Clflags.link_everything>>
<<constant Clflags.custom_runtime>>
<<constant Clflags.output_c_object>>
<<constant Clflags.ccopts>>
<<constant Clflags.nopervasives>>
<<constant Clflags.preprocessor>>
<<constant Clflags.thread_safe>>
<<constant Clflags.noassert>>
<<constant Clflags.verbose>>

<<constant Clflags.dump_rawlambda>>
<<constant Clflags.dump_lambda>>
<<constant Clflags.dump_instr>>

<<constant Clflags.keep_asm_file>>
<<constant Clflags.optimize_for_speed>>

<<constant Clflags.dump_cmm>>
<<constant Clflags.dump_selection>>
<<constant Clflags.dump_live>>
<<constant Clflags.dump_spill>>
<<constant Clflags.dump_split>>
<<constant Clflags.dump_scheduling>>
<<constant Clflags.dump_interf>>
<<constant Clflags.dump_prefer>>
<<constant Clflags.dump_regalloc>>
<<constant Clflags.dump_reload>>
<<constant Clflags.dump_linear>>
<<constant Clflags.keep_startup_file>>

<<constant Clflags.native_code>>

<<constant Clflags.inline_threshold>>
@


\subsection*{[[./utils/ccomp.mli]]}



%-------------------------------------------------------------

<<./utils/ccomp.mli>>=
<<copyright header>>

(* Compiling C files and building C libraries *)

<<signature Ccomp.command>>
<<signature Ccomp.compile_file_bytecode>>
<<signature Ccomp.compile_file_native>>
<<signature Ccomp.create_archive>>
@


\subsection*{[[./utils/ccomp.ml]]}

%-------------------------------------------------------------

<<./utils/ccomp.ml>>=
<<copyright header>>

(* Compiling C files and building C libraries *)

<<function Ccomp.command>>

<<function Ccomp.compile_file_bytecode>>

<<function Ccomp.compile_file_native>>

<<function Ccomp.create_archive>>
@


\section{[[./parsing/]]}

\subsection*{[[./parsing/asttypes.mli]]}




%-------------------------------------------------------------

<<./parsing/asttypes.mli>>=
<<copyright header>>

(* Auxiliary a.s.t. types used by parsetree and typedtree. *)

<<type Asttypes.constant>>

<<type Asttypes.rec_flag>>

<<type Asttypes.direction_flag>>

<<type Asttypes.mutable_flag>>
@


\subsection*{[[./parsing/linenum.mli]]}

<<signature Linenum.for_position>>=
(* An auxiliary lexer for determining the line number corresponding to
   a file position, honoring the directives # linenum "filename" *)

val for_position: string -> int -> string * int * int
        (* [Linenum.for_position file loc] returns a triple describing
           the location [loc] in the file named [file].
           First result is name of actual source file.
           Second result is line number in that source file.
           Third result is position of beginning of that line in [file]. *)
@


%-------------------------------------------------------------

<<./parsing/linenum.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1997 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)


<<signature Linenum.for_position>>
@


\subsection*{[[./parsing/longident.mli]]}


%-------------------------------------------------------------

<<./parsing/longident.mli>>=
<<copyright header>>

<<type Longident.t>>
@


\subsection*{[[./parsing/longident.ml]]}


%-------------------------------------------------------------

<<./parsing/longident.ml>>=
<<copyright header>>

<<type Longident.t>>
@


\subsection*{[[./parsing/location.mli]]}

<<signature Location.rhs_loc>>=
val rhs_loc: int -> t
@
<<function Location.rhs_loc>>=
let rhs_loc n =
  { loc_start = Parsing.rhs_start n; loc_end = Parsing.rhs_end n }
@

<<signature Location.input_lexbuf>>=
val input_lexbuf: Lexing.lexbuf option ref
@


<<signature Location.echo_eof>>=
val echo_eof: unit -> unit
@

<<signature Location.reset>>=
val reset: unit -> unit
@

<<signature Location.highlight_locations>>=
val highlight_locations: t -> t -> bool
@


%-------------------------------------------------------------

<<./parsing/location.mli>>=
<<copyright header>>

<<type Location.t>>

<<signature Location.none>>
<<signature Location.symbol_loc>>
<<signature Location.rhs_loc>>

<<signature Location.input_name>>
<<signature Location.input_lexbuf>>

<<signature Location.print>>
<<signature Location.print_warning>>
<<signature Location.echo_eof>>
<<signature Location.reset>>

<<signature Location.highlight_locations>>
@


\subsection*{[[./parsing/location.ml]]}





<<constant Location.input_lexbuf>>=
let input_lexbuf = ref (None : lexbuf option)
@

<<type Location.terminal_info_status>>=
(* Terminal info *)

type terminal_info_status = Unknown | Bad_term | Good_term
@

<<function Location.setup_terminal_info>>=
let setup_terminal_info() =
  try
    Terminfo.setupterm();
    num_lines := Terminfo.getnum "li";
    cursor_up := Terminfo.getstr "up";
    cursor_down := Terminfo.getstr "do";
    begin try
      start_standout := Terminfo.getstr "us";
      end_standout := Terminfo.getstr "ue"
    with Not_found ->
      start_standout := Terminfo.getstr "so";
      end_standout := Terminfo.getstr "se"
    end;
    status := Good_term
  with _ ->
    status := Bad_term
@

<<constant Location.num_loc_lines>>=
(* Print the location using standout mode. *)

let num_loc_lines = ref 0 (* number of lines already printed after input *)
@

<<function Location.highlight_locations>>=
let rec highlight_locations loc1 loc2 =
  match !status with
    Unknown ->
      setup_terminal_info(); highlight_locations loc1 loc2
  | Bad_term ->
      false
  | Good_term ->
      match !input_lexbuf with
        None -> false
      | Some lb ->
          (* Char 0 is at offset -lb.lex_abs_pos in lb.lex_buffer. *)
          let pos0 = -lb.lex_abs_pos in
          (* Do nothing if the buffer does not contain the whole phrase. *)
          if pos0 < 0 then false else begin
            (* Count number of lines in phrase *)
            let lines = ref !num_loc_lines in
            for i = pos0 to String.length lb.lex_buffer - 1 do
              if lb.lex_buffer.[i] = '\n' then incr lines
            done;
            (* If too many lines, give up *)
            if !lines >= !num_lines - 2 then false else begin
              (* Move cursor up that number of lines *)
              for i = 1 to !lines do
                Terminfo.puts stdout !cursor_up 1
              done;
              (* Print the input, switching to standout for the location *)
              let bol = ref false in
          print_string "# ";
              for pos = 0 to String.length lb.lex_buffer - pos0 - 1 do
                if !bol then (print_string "  "; bol := false);
                if pos = loc1.loc_start || pos = loc2.loc_start then
                  Terminfo.puts stdout !start_standout 1;
                if pos = loc1.loc_end || pos = loc2.loc_end then
                  Terminfo.puts stdout !end_standout 1;
                let c = lb.lex_buffer.[pos + pos0] in
                print_char c;
                bol := (c = '\n')
              done;
              (* Make sure standout mode is over *)
              Terminfo.puts stdout !end_standout 1;
              (* Position cursor back to original location *)
              for i = 1 to !num_loc_lines do
                Terminfo.puts stdout !cursor_down 1
              done;
              true
            end
          end
@

<<function Location.reset>>=
let reset () =
  num_loc_lines := 0
@



<<function Location.echo_eof>>=
let echo_eof () =
  print_newline ();
  incr num_loc_lines
@


%-------------------------------------------------------------

<<./parsing/location.ml>>=
<<copyright header>>

open Lexing

<<type Location.t>>

<<constant Location.none>>

<<function Location.symbol_loc>>

<<function Location.rhs_loc>>

<<constant Location.input_name>>

<<constant Location.input_lexbuf>>

<<type Location.terminal_info_status>>

let status = ref Unknown
and num_lines = ref 0
and cursor_up = ref ""
and cursor_down = ref ""
and start_standout = ref ""
and end_standout = ref ""

<<function Location.setup_terminal_info>>

<<constant Location.num_loc_lines>>

<<function Location.highlight_locations>>

(* Print the location in some way or another *)

open Format

<<function Location.reset>>

<<constants Location.msg_xxx>>

<<function Location.print>>

<<function Location.print_warning>>

<<function Location.echo_eof>>

@


\subsection*{[[./parsing/syntaxerr.mli]]}


%-------------------------------------------------------------

<<./parsing/syntaxerr.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1997 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)


<<type Syntaxerr.error>>

<<exception Syntaxerr.Error>>
<<exception Syntaxerr.Escape_error>>

<<signature Syntaxerr.report_error>>
@


\subsection*{[[./parsing/syntaxerr.ml]]}



%-------------------------------------------------------------

<<./parsing/syntaxerr.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1997 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)


(* Auxiliary type for reporting syntax errors *)

open Format

<<type Syntaxerr.error>>

<<exception Syntaxerr.Error>>
<<exception Syntaxerr.Escape_error>>

<<function Syntaxerr.report_error>>


@


\subsection*{[[./parsing/parsetree.mli]]}


%-------------------------------------------------------------

<<./parsing/parsetree.mli>>=
<<copyright header>>

(* Abstract syntax tree produced by parsing *)

open Asttypes

(* Type expressions for the core language *)

<<type Parsetree.core_type>>

<<type Parsetree.core_type_desc>>

(* Value expressions for the core language *)

<<type Parsetree.pattern>>

<<type Parsetree.pattern_desc>>

<<type Parsetree.expression>>

<<type Parsetree.expression_desc>>

<<type Parsetree.value_description>>

(* Type declarations *)

<<type Parsetree.type_declaration>>

<<type Parsetree.type_kind>>

<<type Parsetree.exception_declaration>>

(* Type expressions for the module language *)

<<type Parsetree.module_type>>

<<type Parsetree.module_type_desc>>


<<type Parsetree.signature>>

<<type Parsetree.signature_item>>

<<type Parsetree.signature_item_desc>>

(* Value expressions for the module language *)

<<type Parsetree.module_expr>>

<<type Parsetree.module_expr_desc>>

<<type Parsetree.structure>>

<<type Parsetree.structure_item>>

<<type Parsetree.structure_item_desc>>

(* Toplevel phrases *)

<<type Parsetree.toplevel_phrase>>

<<type Parsetree.directive_argument>>
@


\subsection*{[[./parsing/lexer.mll]]}



\subsection*{[[./parsing/parser.mly]]}

\subsection*{[[./parsing/lexer.mli]]}


%-------------------------------------------------------------

<<./parsing/lexer.mli>>=
<<copyright header>>

<<signature Lexer.token>>

<<type Lexer.error>>

<<exception Lexer.Error>>

<<signature Lexer.report_error>>

@


\subsection*{[[./parsing/parse.mli]]}


%-------------------------------------------------------------

<<./parsing/parse.mli>>=
<<copyright header>>

(* Entry points in the parser *)

<<signature Parse.implementation>>
<<signature Parse.interface>>
<<signature Parse.toplevel_phrase>>
<<signature Parse.use_file>>

@


\subsection*{[[./parsing/parse.ml]]}

%-------------------------------------------------------------

<<./parsing/parse.ml>>=
<<copyright header>>

(* Entry points in the parser *)

open Location

<<function Parse.skip_phrase>>

<<function Parse.maybe_skip_phrase>>

<<function Parse.wrap>>

<<function Parse.implementation>>
<<function Parse.interface>>

<<function Parse.xxx>>
@


\section{[[./typing/]]}

\subsection*{[[./typing/ident.mli]]}


<<signature Ident.create_persistent>>=
val create_persistent: string -> t
@


<<signature Ident.unique_name>>=
val unique_name: t -> string
@

<<signature Ident.persistent>>=
val persistent: t -> bool
@

<<signature Ident.equal>>=
val equal: t -> t -> bool
        (* Compare identifiers by name. *)      
@

<<signature Ident.same>>=
val same: t -> t -> bool
        (* Compare identifiers by binding location.
           Two identifiers are the same either if they are both
           non-persistent and have been created by the same call to
           [new], or if they are both persistent and have the same
           name. *)
@

<<signature Ident.identify>>=
val identify: t -> t -> (unit -> 'a) -> 'a
        (* [identify id1 id2 f] temporarily makes [id1] and [id2] the same
           during the evaluation of [f ()]. *)
@

<<signature Ident.hide>>=
val hide: t -> t
        (* Return an identifier with same name as the given identifier,
           but stamp different from any stamp returns by new.
           When put in a 'a tbl, this identifier can only be looked
           up by name. *)
@

<<signature Ident.make_global>>=
val make_global: t -> unit
@

<<signature Ident.global>>=
val global: t -> bool
@

<<signature Ident.print>>=
val print: t -> unit
@

<<signature Ident.empty>>=
val empty: 'a tbl
@

<<signature Ident.add>>=
val add: t -> 'a -> 'a tbl -> 'a tbl
@

<<signature Ident.find_same>>=
val find_same: t -> 'a tbl -> 'a
@

<<signature Ident.find_name>>=
val find_name: string -> 'a tbl -> 'a
@

<<signature Ident.print_tbl>>=
val print_tbl: ('a -> unit) -> 'a tbl -> unit
@

<<signature Ident.current_time>>=
val current_time: unit -> int
@


%-------------------------------------------------------------

<<./typing/ident.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Identifiers (unique names) *)

type t

<<signature Ident.create>>
<<signature Ident.create_persistent>>
<<signature Ident.name>>
<<signature Ident.unique_name>>
<<signature Ident.persistent>>
<<signature Ident.equal>>
<<signature Ident.same>>
<<signature Ident.identify>>
<<signature Ident.hide>>

<<signature Ident.make_global>>
<<signature Ident.global>>

<<signature Ident.print>>

type 'a tbl
        (* Association tables from identifiers to type 'a. *)

<<signature Ident.empty>>
<<signature Ident.add>>
<<signature Ident.find_same>>
<<signature Ident.find_name>>

<<signature Ident.print_tbl>>

<<signature Ident.current_time>>
@


\subsection*{[[./typing/ident.ml]]}


<<constant Ident.currentstamp>>=
(* A stamp of 0 denotes a persistent identifier *)

let currentstamp = ref 0
@

<<function Ident.create>>=
let create s =
  incr currentstamp;
  { name = s; stamp = !currentstamp; global = false }
@

<<function Ident.create_persistent>>=
let create_persistent s =
  { name = s; stamp = 0; global = true }
@

<<function Ident.name>>=
let name i = i.name
@

<<function Ident.unique_name>>=
let unique_name i = i.name ^ "_" ^ string_of_int i.stamp
@

<<function Ident.persistent>>=
let persistent i = (i.stamp = 0)
@

<<function Ident.equal>>=
let equal i1 i2 = i1.name = i2.name
@

<<function Ident.same>>=
let same i1 i2 = i1 = i2
  (* Possibly more efficient version (with a real compiler, at least):
       if i1.stamp <> 0
       then i1.stamp = i2.stamp
       else i2.stamp = 0 & i1.name = i2.name *)
@

<<function Ident.identify>>=
let identify i1 i2 f =
  let name1 = i1.name and stamp1 = i1.stamp in
  try
    i1.name <- i2.name;
    i1.stamp <- i2.stamp;
    let res = f () in
    i1.name <- name1;
    i1.stamp <- stamp1;
    res
  with x ->
    i1.name <- name1;
    i1.stamp <- stamp1;
    raise x
@

<<function Ident.hide>>=
let hide i =
  { stamp = -1; name = i.name; global = i.global }
@

<<function Ident.make_global>>=
let make_global i =
  i.global <- true
@

<<function Ident.global>>=
let global i =
  i.global
@

<<function Ident.print>>=
let print i =
  print_string i.name;
  match i.stamp with
    0 -> print_string "!"
  | -1 -> print_string "#"
  | n -> print_string "/"; print_int n; if i.global then print_string "g"
@

<<type Ident.tbl>>=
type 'a tbl =
    Empty
  | Node of 'a tbl * 'a data * 'a tbl * int
@

<<type Ident.data>>=
and 'a data =
  { ident: t;
    data: 'a;
    previous: 'a data option }
@

<<constant Ident.empty>>=
let empty = Empty
@

<<function Ident.mknode>>=
(* Inline expansion of height for better speed
 * let height = function
 *     Empty -> 0
 *   | Node(_,_,_,h) -> h
 *)

let mknode l d r =
  let hl = match l with Empty -> 0 | Node(_,_,_,h) -> h
  and hr = match r with Empty -> 0 | Node(_,_,_,h) -> h in
  Node(l, d, r, (if hl >= hr then hl + 1 else hr + 1))
@

<<function Ident.balance>>=
let balance l d r =
  let hl = match l with Empty -> 0 | Node(_,_,_,h) -> h
  and hr = match r with Empty -> 0 | Node(_,_,_,h) -> h in
  if hl > hr + 1 then
    let (Node(ll, ld, lr, _)) = l in
    if (match ll with Empty -> 0 | Node(_,_,_,h) -> h) >=
       (match lr with Empty -> 0 | Node(_,_,_,h) -> h) then
      mknode ll ld (mknode lr d r)
    else
      let (Node(lrl, lrd, lrr, _)) = lr in
      mknode (mknode ll ld lrl) lrd (mknode lrr d r)
  else if hr > hl + 1 then
    let (Node(rl, rd, rr, _)) = r in
    if (match rr with Empty -> 0 | Node(_,_,_,h) -> h) >=
       (match rl with Empty -> 0 | Node(_,_,_,h) -> h) then
      mknode (mknode l d rl) rd rr
    else
      let (Node(rll, rld, rlr, _)) = rl in
      mknode (mknode l d rll) rld (mknode rlr rd rr)
  else
    mknode l d r
@

<<function Ident.add>>=
let rec add id data = function
    Empty ->
      Node(Empty, {ident = id; data = data; previous = None}, Empty, 1)
  | Node(l, k, r, h) ->
      let c = compare id.name k.ident.name in
      if c = 0 then
        Node(l, {ident = id; data = data; previous = Some k}, r, h)
      else if c < 0 then
        balance (add id data l) k r
      else
        balance l k (add id data r)
@

<<function Ident.find_stamp>>=
let rec find_stamp s = function
    None ->
      raise Not_found
  | Some k ->
      if k.ident.stamp = s then k.data else find_stamp s k.previous
@

<<function Ident.find_same>>=
let rec find_same id = function
    Empty ->
      raise Not_found
  | Node(l, k, r, _) ->
      let c = compare id.name k.ident.name in
      if c = 0 then
        if id.stamp = k.ident.stamp
        then k.data
        else find_stamp id.stamp k.previous
      else
        find_same id (if c < 0 then l else r)
@

<<function Ident.find_name>>=
let rec find_name name = function
    Empty ->
      raise Not_found
  | Node(l, k, r, _) ->
      let c = compare name k.ident.name in
      if c = 0 then
        k.data
      else
        find_name name (if c < 0 then l else r)
@

<<function Ident.print_tbl>>=
let print_tbl print_elt tbl =
  open_hovbox 2;
  print_string "[[";
  let rec print_tbl = function
      Empty -> ()
    | Node(l, k, r, _) ->
        print_tbl l;
        print_entry k;
        print_tbl r
  and print_entry k =
    open_hovbox 2;
    print k.ident; print_string " ->"; print_space(); print_elt k.data;
    print_string ";"; close_box(); print_space();
    match k.previous with None -> () | Some k -> print_entry k in
  print_tbl tbl;
  print_string "]]";
  close_box()
@

<<function Ident.current_time>>=
let current_time _ = 1
@


%-------------------------------------------------------------

<<./typing/ident.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

open Format

<<type Ident.t>>

<<constant Ident.currentstamp>>

<<function Ident.create>>

<<function Ident.create_persistent>>

<<function Ident.name>>

<<function Ident.unique_name>>

<<function Ident.persistent>>

<<function Ident.equal>>

<<function Ident.same>>

<<function Ident.identify>>

<<function Ident.hide>>

<<function Ident.make_global>>

<<function Ident.global>>

<<function Ident.print>>

<<type Ident.tbl>>

<<type Ident.data>>

<<constant Ident.empty>>

<<function Ident.mknode>>

<<function Ident.balance>>

<<function Ident.add>>

<<function Ident.find_stamp>>

<<function Ident.find_same>>

<<function Ident.find_name>>

<<function Ident.print_tbl>>


<<function Ident.current_time>>
@


\subsection*{[[./typing/primitive.mli]]}



%-------------------------------------------------------------

<<./typing/primitive.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

<<type Primitive.description>>

<<signature Primitive.parse_declaration>>
<<signature Primitive.print_description>>
@


\subsection*{[[./typing/primitive.ml]]}





%-------------------------------------------------------------

<<./typing/primitive.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Description of primitive functions *)

open Format

<<type Primitive.description>>

<<function Primitive.parse_declaration>>

<<function Primitive.print_quoted>>

<<function Primitive.print_description>>
@


\subsection*{[[./typing/path.mli]]}


<<signature Path.same>>=
val same: t -> t -> bool
@

<<signature Path.isfree>>=
val isfree: Ident.t -> t -> bool
@

<<signature Path.nopos>>=
val nopos: int
@


%-------------------------------------------------------------

<<./typing/path.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

<<type Path.t>>

<<signature Path.same>>
<<signature Path.isfree>>

<<signature Path.nopos>>
@


\subsection*{[[./typing/path.ml]]}

<<constant Path.nopos>>=
let nopos = -1
@

<<function Path.same>>=
let rec same p1 p2 =
  match (p1, p2) with
    (Pident id1, Pident id2) -> Ident.same id1 id2
  | (Pdot(p1, s1, pos1), Pdot(p2, s2, pos2)) -> s1 = s2 & same p1 p2
  | (_, _) -> false
@

<<function Path.isfree>>=
let rec isfree id = function
    Pident id' -> Ident.same id id'
  | Pdot(p, s, pos) -> isfree id p
@


%-------------------------------------------------------------

<<./typing/path.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

<<type Path.t>>

<<constant Path.nopos>>

<<function Path.same>>

<<function Path.isfree>>
@


\subsection*{[[./typing/types.ml]]}


<<type Types.value_description>>=
(* Value descriptions *)

type value_description =
  { val_type: type_expr;                       (* Type of the val *)
    val_prim: Primitive.description option }   (* Is this a primitive? *)
@

<<type Types.constructor_description>>=
type constructor_description =
  { cstr_res: type_expr;                (* Type of the result *)
    cstr_args: type_expr list;          (* Type of the arguments *)
    cstr_arity: int;                    (* Number of arguments *)
    cstr_tag: constructor_tag;          (* Tag for heap blocks *)
    cstr_consts: int;                   (* Number of constant constructors *)
    cstr_nonconsts: int }               (* Number of non-const constructors *)
@

<<type Types.constructor_tag>>=
and constructor_tag =
    Cstr_constant of int                (* Constant constructor (an int) *)
  | Cstr_block of int                   (* Regular constructor (a block) *)
  | Cstr_exception of Path.t            (* Exception constructor *)
@

<<type Types.label_description>>=
type label_description =
  { lbl_res: type_expr;                 (* Type of the result *)
    lbl_arg: type_expr;                 (* Type of the argument *)
    lbl_mut: mutable_flag;              (* Is this a mutable field? *)
    lbl_pos: int;                       (* Position in block *)
    lbl_all: label_description array;   (* All the labels in this type *)
    lbl_repres: record_representation } (* Representation for this record *)
@

<<type Types.record_representation>>=
and record_representation =
    Record_regular                      (* All fields are boxed / tagged *)
  | Record_float                        (* All fields are floats *)
@

<<type Types.type_declaration>>=
type type_declaration =
  { type_params: type_expr list;
    type_arity: int;
    type_kind: type_kind;
    type_manifest: type_expr option }
@

<<type Types.type_kind>>=
and type_kind =
    Type_abstract
  | Type_variant of (string * type_expr list) list
  | Type_record of (string * mutable_flag * type_expr) list
@

<<type Types.exception_declaration>>=
type exception_declaration = type_expr list
@

<<type Types.module_type>>=
type module_type =
    Tmty_ident of Path.t
  | Tmty_signature of signature
@

<<type Types.signature>>=
and signature = signature_item list
@

<<type Types.signature_item>>=
and signature_item =
    Tsig_value of Ident.t * value_description
  | Tsig_type of Ident.t * type_declaration
  | Tsig_exception of Ident.t * exception_declaration
  | Tsig_module of Ident.t * module_type
@


%-------------------------------------------------------------

<<./typing/types.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)
open Asttypes

(* Type expressions for the core language *)

<<type Types.type_expr>>

<<type Types.type_variable>>

<<type Types.value_description>>

(* Constructor descriptions *)

<<type Types.constructor_description>>

<<type Types.constructor_tag>>

(* Record label descriptions *)

<<type Types.label_description>>

<<type Types.record_representation>>

(* Type definitions *)

<<type Types.type_declaration>>

<<type Types.type_kind>>

<<type Types.exception_declaration>>

(* Type expressions for the module language *)

<<type Types.module_type>>

<<type Types.signature>>

<<type Types.signature_item>>
@


\subsection*{[[./typing/subst.mli]]}

<<signature Subst.identity>>=
val identity: t
@

<<signature Subst.add_type>>=
val add_type: Ident.t -> Path.t -> t -> t
@

<<signature Subst.add_module>>=
val add_module: Ident.t -> Path.t -> t -> t
@

<<signature Subst.add_modtype>>=
val add_modtype: Ident.t -> module_type -> t -> t
@

<<signature Subst.type_expr>>=
val type_expr: t -> type_expr -> type_expr
@

<<signature Subst.value_description>>=
val value_description: t -> value_description -> value_description
@

<<signature Subst.type_declaration>>=
val type_declaration: t -> type_declaration -> type_declaration
@

<<signature Subst.exception_declaration>>=
val exception_declaration:
        t -> exception_declaration -> exception_declaration
@

<<signature Subst.modtype>>=
val modtype: t -> module_type -> module_type
@

<<signature Subst.signature>>=
val signature: t -> signature -> signature
@


%-------------------------------------------------------------

<<./typing/subst.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Substitutions *)

open Types

type t

<<signature Subst.identity>>

<<signature Subst.add_type>>
<<signature Subst.add_module>>
<<signature Subst.add_modtype>>

<<signature Subst.type_expr>>
<<signature Subst.value_description>>
<<signature Subst.type_declaration>>
<<signature Subst.exception_declaration>>
<<signature Subst.modtype>>
<<signature Subst.signature>>

@


\subsection*{[[./typing/subst.ml]]}


<<constant Subst.identity>>=
let identity =
  { types = Ident.empty; modules = Ident.empty; modtypes = Ident.empty }
@

<<function Subst.add_type>>=
let add_type id p s =
  { types = Ident.add id p s.types;
    modules = s.modules;
    modtypes = s.modtypes }
@

<<function Subst.add_module>>=
let add_module id p s =
  { types = s.types;
    modules = Ident.add id p s.modules;
    modtypes = s.modtypes }
@

<<function Subst.add_modtype>>=
let add_modtype id ty s =
  { types = s.types;
    modules = s.modules;
    modtypes = Ident.add id ty s.modtypes }
@

<<function Subst.module_path>>=
let rec module_path s = function
    Pident id as p ->
      begin try Ident.find_same id s.modules with Not_found -> p end
  | Pdot(p, n, pos) ->
      Pdot(module_path s p, n, pos)
@

<<function Subst.type_path>>=
let type_path s = function
    Pident id as p ->
      begin try Ident.find_same id s.types with Not_found -> p end
  | Pdot(p, n, pos) ->
      Pdot(module_path s p, n, pos)
@

<<function Subst.type_expr>>=
let rec type_expr s = function
    Tvar{tvar_link = None} as ty -> ty
  | Tvar{tvar_link = Some ty} -> type_expr s ty
  | Tarrow(t1, t2) -> Tarrow(type_expr s t1, type_expr s t2)
  | Ttuple tl -> Ttuple(List.map (type_expr s) tl)
  | Tconstr(p, []) -> Tconstr(type_path s p, [])
  | Tconstr(p, tl) -> Tconstr(type_path s p, List.map (type_expr s) tl)
@

<<function Subst.value_description>>=
let value_description s descr =
  { val_type = type_expr s descr.val_type;
    val_prim = descr.val_prim }
@

<<function Subst.type_declaration>>=
let type_declaration s decl =
  { type_params = decl.type_params;
    type_arity = decl.type_arity;
    type_kind =
      begin match decl.type_kind with
        Type_abstract -> Type_abstract
      | Type_variant cstrs ->
          Type_variant(List.map (fun (n, args) -> (n, List.map (type_expr s) args))
                           cstrs)
      | Type_record lbls ->
          Type_record(List.map (fun (n, mut, arg) -> (n, mut, type_expr s arg))
                          lbls)
      end;
    type_manifest =
      begin match decl.type_manifest with
        None -> None
      | Some ty -> Some(type_expr s ty)
      end
  }
@

<<function Subst.exception_declaration>>=
let exception_declaration s tyl =
  List.map (type_expr s) tyl
@


%-------------------------------------------------------------

<<./typing/subst.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Substitutions *)

open Misc
open Path
open Types


<<type Subst.t>>

<<constant Subst.identity>>

<<function Subst.add_type>>

<<function Subst.add_module>>

<<function Subst.add_modtype>>

<<function Subst.module_path>>

<<function Subst.type_path>>

<<function Subst.type_expr>>

<<function Subst.value_description>>

<<function Subst.type_declaration>>

<<function Subst.exception_declaration>>

let rec modtype s = function
    Tmty_ident p as mty ->
      begin match p with
        Pident id ->
          begin try Ident.find_same id s.modtypes with Not_found -> mty end
      | Pdot(p, n, pos) ->
          Tmty_ident(Pdot(module_path s p, n, pos))
      end
  | Tmty_signature sg ->
      Tmty_signature(signature s sg)

and signature s sg = List.map (signature_item s) sg

and signature_item s = function
    Tsig_value(id, d) -> Tsig_value(id, value_description s d)
  | Tsig_type(id, d) -> Tsig_type(id, type_declaration s d)
  | Tsig_exception(id, d) -> Tsig_exception(id, exception_declaration s d)
  | Tsig_module(id, mty) -> Tsig_module(id, modtype s mty)
@


\subsection*{[[./typing/predef.mli]]}

%-------------------------------------------------------------

<<./typing/predef.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* Predefined type constructors (with special typing rules in typecore) *)

open Types

<<signatures Predef.type_xxx>>

<<signatures Predef.path_xxx>>

<<signature Predef.path_match_failure>>

<<signature Predef.build_initial_env>>

<<signature Predef.builtin_values>>
@


\subsection*{[[./typing/predef.ml]]}




%-------------------------------------------------------------

<<./typing/predef.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Predefined type constructors (with special typing rules in typecore) *)

open Path
open Types


<<constants Predef.ident_xxx>>
<<constants Predef.path_xxx>>

<<constants Predef.type_xxx>>


<<constants Predef.ident_exn_xxx>>

<<constant Predef.path_match_failure>>

<<function Predef.build_initial_env>>

<<constant Predef.builtin_values>>
@


\subsection*{[[./typing/datarepr.mli]]}

<<signature Datarepr.constructor_descrs>>=
val constructor_descrs:
  type_expr -> (string * type_expr list) list ->
    (string * constructor_description) list
@

<<signature Datarepr.exception_descr>>=
val exception_descr:
  Path.t -> type_expr list -> constructor_description
@

<<signature Datarepr.label_descrs>>=
val label_descrs:
  type_expr -> (string * mutable_flag * type_expr) list ->
    (string * label_description) list
@


%-------------------------------------------------------------

<<./typing/datarepr.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Compute constructor and label descriptions from type declarations,
   determining their representation. *)

open Asttypes
open Types

<<signature Datarepr.constructor_descrs>>
<<signature Datarepr.exception_descr>>
<<signature Datarepr.label_descrs>>
@


\subsection*{[[./typing/datarepr.ml]]}

<<function Datarepr.constructor_descrs>>=
let constructor_descrs ty_res cstrs =
  let num_consts = ref 0 and num_nonconsts = ref 0 in
  List.iter
    (function (name, []) -> incr num_consts
            | (name, _)  -> incr num_nonconsts)
    cstrs;
  let rec describe_constructors idx_const idx_nonconst = function
      [] -> []
    | (name, ty_args) :: rem ->
        let (tag, descr_rem) =
          match ty_args with
            [] -> (Cstr_constant idx_const,
                   describe_constructors (idx_const+1) idx_nonconst rem)
          | _  -> (Cstr_block idx_nonconst,
                   describe_constructors idx_const (idx_nonconst+1) rem) in
        let cstr =
          { cstr_res = ty_res;
            cstr_args = ty_args;
            cstr_arity = List.length ty_args;
            cstr_tag = tag;
            cstr_consts = !num_consts;
            cstr_nonconsts = !num_nonconsts } in
        (name, cstr) :: descr_rem in
  describe_constructors 0 0 cstrs
@

<<function Datarepr.exception_descr>>=
let exception_descr path_exc decl =
  { cstr_res = Predef.type_exn;
    cstr_args = decl;
    cstr_arity = List.length decl;
    cstr_tag = Cstr_exception path_exc;
    cstr_consts = -1;
    cstr_nonconsts = -1 }
@

<<constant Datarepr.dummy_label>>=
let dummy_label =
  { lbl_res = Ttuple []; lbl_arg = Ttuple []; lbl_mut = Immutable;
    lbl_pos = (-1); lbl_all = [||]; lbl_repres = Record_regular }
@

<<function Datarepr.is_float>>=
(* Cannot call ctype.repres here *)

let rec is_float = function
    Tvar{tvar_link = Some ty} -> is_float ty
  | Tconstr(p, _) -> Path.same p Predef.path_float
  | _ -> false
@

<<function Datarepr.label_descrs>>=
let label_descrs ty_res lbls =
  let all_labels = Array.create (List.length lbls) dummy_label in
  let repres =
    if List.for_all (fun (name, flag, ty) -> is_float ty) lbls
    then Record_float
    else Record_regular in
  let rec describe_labels num = function
      [] -> []
    | (name, mut_flag, ty_arg) :: rest ->
        let lbl =
          { lbl_res = ty_res;
            lbl_arg = ty_arg;
            lbl_mut = mut_flag;
            lbl_pos = num;
            lbl_all = all_labels;
            lbl_repres = repres } in
        all_labels.(num) <- lbl;
        (name, lbl) :: describe_labels (num+1) rest in
  describe_labels 0 lbls
@


%-------------------------------------------------------------

<<./typing/datarepr.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Compute constructor and label descriptions from type declarations,
   determining their representation. *)

open Misc
open Asttypes
open Types

<<function Datarepr.constructor_descrs>>

<<function Datarepr.exception_descr>>

<<constant Datarepr.dummy_label>>

<<function Datarepr.is_float>>

<<function Datarepr.label_descrs>>
@


\subsection*{[[./typing/env.mli]]}


<<signature Env.add_value>>=
(* Insertion by identifier *)

val add_value: Ident.t -> value_description -> t -> t
@

<<signature Env.add_type>>=
val add_type: Ident.t -> type_declaration -> t -> t
@

<<signature Env.add_exception>>=
val add_exception: Ident.t -> exception_declaration -> t -> t
@

<<signature Env.add_module>>=
val add_module: Ident.t -> module_type -> t -> t
@

<<signature Env.add_signature>>=
(* Insertion of all fields of a signature. *)

val add_signature: signature -> t -> t
@

<<signature Env.open_signature>>=
(* Insertion of all fields of a signature, relative to the given path.
   Used to implement open. *)

val open_signature: Path.t -> signature -> t -> t
@

<<signature Env.open_pers_signature>>=
val open_pers_signature: string -> t -> t
@

<<signature Env.enter_value>>=
(* Insertion by name *)

val enter_value: string -> value_description -> t -> Ident.t * t
@

<<signature Env.enter_type>>=
val enter_type: string -> type_declaration -> t -> Ident.t * t
@

<<signature Env.enter_exception>>=
val enter_exception: string -> exception_declaration -> t -> Ident.t * t
@

<<signature Env.enter_module>>=
val enter_module: string -> module_type -> t -> Ident.t * t
@

<<signature Env.reset_cache>>=
(* Reset the cache of in-core module interfaces.
   To be called in particular when load_path changes. *)

val reset_cache: unit -> unit
@

<<signature Env.read_signature>>=
(* Read, save a signature to/from a file *)

val read_signature: string -> string -> signature * Digest.t
        (* Arguments: module name, file name.
           Results: signature, CRC. *)
@

<<signature Env.save_signature>>=
val save_signature: signature -> string -> string -> Digest.t
        (* Arguments: signature, module name, file name.
           Result: CRC. *)
@

<<signature Env.imported_units>>=
(* Return the set of compilation units imported, with their CRC *)

val imported_units: unit -> (string * Digest.t) list
@



<<signature Env.check_modtype_inclusion>>=
(* Forward declaration to break mutual recursion with includemod. *)

val check_modtype_inclusion: (t -> module_type -> module_type -> unit) ref
@

<<type Env.summary>>=
@

<<signature Env.summary>>=
@


%-------------------------------------------------------------

<<./typing/env.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Environment handling *)

open Types

<<signature type Env.t>>

<<signature Env.empty>>
<<signature Env.initial>>

<<signature Env.find_value>>
<<signature Env.find_type>>

<<signature Env.lookup_value>>
<<signature Env.lookup_constructor>>
<<signature Env.lookup_label>>
<<signature Env.lookup_type>>
<<signature Env.lookup_module>>

<<signature Env.add_value>>
<<signature Env.add_type>>
<<signature Env.add_exception>>
<<signature Env.add_module>>

<<signature Env.add_signature>>

<<signature Env.open_signature>>
<<signature Env.open_pers_signature>>

<<signature Env.enter_value>>
<<signature Env.enter_type>>
<<signature Env.enter_exception>>
<<signature Env.enter_module>>

<<signature Env.reset_cache>>

<<signature Env.read_signature>>
<<signature Env.save_signature>>

<<signature Env.imported_units>>

<<type Env.error>>

<<exception Env.Error>>

<<signature Env.report_error>>

<<signature Env.check_modtype_inclusion>>


<<type Env.summary>>

<<signature Env.summary>>
@


\subsection*{[[./typing/env.ml]]}




<<type Env.module_components>>=
and module_components =
    Structure_comps of structure_components
  | Functor_comps of functor_components
@

<<type Env.structure_components>>=
and structure_components = {
  mutable comp_values: (string, (value_description * int)) Tbl.t;
  mutable comp_constrs: (string, (constructor_description * int)) Tbl.t;
  mutable comp_labels: (string, (label_description * int)) Tbl.t;
  mutable comp_types: (string, (type_declaration * int)) Tbl.t;
  mutable comp_modules: (string, (module_type * int)) Tbl.t;
  mutable comp_components: (string, (module_components * int)) Tbl.t
}
@

<<type Env.functor_components>>=
and functor_components = {
  fcomp_param: Ident.t;
  fcomp_arg: module_type;
  fcomp_res: module_type;
  fcomp_env: t
}
@


<<type Env.pers_struct>>=
(* Persistent structure descriptions *)

type pers_struct =
  { ps_name: string;
    ps_sig: signature;
    ps_comps: module_components }
@

<<constant Env.persistent_structures>>=
let persistent_structures =
@

<<constant Env.imported_units>>=
let imported_units = ref ([] : (string * Digest.t) list)
@

<<function Env.read_pers_struct>>=
let read_pers_struct modname filename =
  let ic = open_in_bin filename in
  try
    let buffer = String.create (String.length cmi_magic_number) in
    really_input ic buffer 0 (String.length cmi_magic_number);
    if buffer <> cmi_magic_number then begin
      close_in ic;
      raise(Error(Not_an_interface filename))
    end;
    let ps = (input_value ic : pers_struct) in
    let crc = Digest.input ic in
    close_in ic;
    if ps.ps_name <> modname then
      raise(Error(Illegal_renaming(ps.ps_name, filename)));
    (ps, crc)
  with End_of_file | Failure _ ->
    close_in ic;
    raise(Error(Corrupted_interface(filename)))
@

<<function Env.find_pers_struct>>=
let find_pers_struct name =
  try
    Hashtbl.find persistent_structures name
  with Not_found ->
    let (ps, crc) =
      read_pers_struct name
        (find_in_path !load_path (String.lowercase name ^ ".cmi")) in
    Hashtbl.add persistent_structures name ps;
    imported_units := (name, crc) :: !imported_units;
    ps
@

<<function Env.reset_cache>>=
let reset_cache() =
  Hashtbl.clear persistent_structures;
  imported_units := []
@

<<constant Env.components_of_functor_appl>>=
@

<<constant Env.check_modtype_inclusion>>=
let check_modtype_inclusion =
  (* to be filled with includemod.check_modtype_inclusion *)
  ref ((fun env mty1 mty2 -> fatal_error "Env.include_modtypes") :
@

<<function Env.find_module_descr>>=
(* Lookup by identifier *)

let rec find_module_descr path env =
  match path with
    Pident id ->
      begin try
        let (p, desc) = Ident.find_same id env.components
        in desc
      with Not_found ->
        if Ident.persistent id
        then (find_pers_struct (Ident.name id)).ps_comps
        else raise Not_found
      end
  | Pdot(p, s, pos) ->
      begin match find_module_descr p env with
       Structure_comps c ->
      let (descr, pos) = Tbl.find s c.comp_components in
          descr
      | Functor_comps f ->
        raise Not_found
      end
@

<<function Env.find>>=
let find proj1 proj2 path env =
  match path with
    Pident id ->
      let (p, data) = Ident.find_same id (proj1 env)
      in data
  | Pdot(p, s, pos) ->
      begin match find_module_descr p env with
        Structure_comps c ->
          let (data, pos) = Tbl.find s (proj2 c) in data
      | Functor_comps f ->
          raise Not_found
      end
@

<<function Env.lookup>>=
let lookup proj1 proj2 lid env =
  match lid with
    Lident s ->
      Ident.find_name s (proj1 env)
  | Ldot(l, s) ->
      begin match lookup_module_descr l env with
       (p, Structure_comps c) ->
      let (data, pos) = Tbl.find s (proj2 c) in
          (Pdot(p, s, pos), data)
      | (p, Functor_comps f) ->
         raise Not_found
      end
@

<<function Env.lookup_simple>>=
let lookup_simple proj1 proj2 lid env =
  match lid with
    Lident s ->
      Ident.find_name s (proj1 env)
  | Ldot(l, s) ->
      begin match lookup_module_descr l env with
       (p, Structure_comps c) ->
      let (data, pos) = Tbl.find s (proj2 c) in
          data
      | (p, Functor_comps f) ->
         raise Not_found
      end
@

<<function Env.scrape_modtype>>=
(* Scrape a module type *)

let rec scrape_modtype mty env =
  match mty with
    Tmty_ident path ->
      failwith "Env.scrape_modtype:TODO"
(*
      begin match find_modtype path env with
          Tmodtype_manifest mty -> scrape_modtype mty env
        | Tmodtype_abstract -> mty
      end
*)
  | _ -> mty
@

<<function Env.constructors_of_type>>=
(* Compute constructor descriptions *)

let constructors_of_type ty_path decl =
  match decl.type_kind with
    Type_variant cstrs ->
      Datarepr.constructor_descrs (Tconstr(ty_path, decl.type_params)) cstrs
  | _ -> []
@

<<function Env.labels_of_type>>=
(* Compute label descriptions *)

let labels_of_type ty_path decl =
  match decl.type_kind with
    Type_record labels ->
      Datarepr.label_descrs (Tconstr(ty_path, decl.type_params)) labels
  | _ -> []
@

<<function Env.prefix_idents>>=
(* Given a signature and a root path, prefix all idents in the signature
   by the root path and build the corresponding substitution. *)

let rec prefix_idents root pos sub = function
    [] -> ([], sub)
  | Tsig_value(id, decl) :: rem ->
      let p = Pdot(root, Ident.name id, pos) in
      let nextpos = match decl.val_prim with None -> pos+1 | Some _ -> pos in
      let (pl, final_sub) = prefix_idents root nextpos sub rem in
      (p::pl, final_sub)
  | Tsig_type(id, decl) :: rem ->
      let p = Pdot(root, Ident.name id, nopos) in
      let (pl, final_sub) =
        prefix_idents root pos (Subst.add_type id p sub) rem in
      (p::pl, final_sub)
  | Tsig_exception(id, decl) :: rem ->
      let p = Pdot(root, Ident.name id, pos) in
      let (pl, final_sub) = prefix_idents root (pos+1) sub rem in
      (p::pl, final_sub)
  | Tsig_module(id, mty) :: rem ->
      let p = Pdot(root, Ident.name id, pos) in
      let (pl, final_sub) =
        prefix_idents root (pos+1) (Subst.add_module id p sub) rem in
      (p::pl, final_sub)
@

<<constant Env.funappl_memo>>=
(* Memoized function to compute the components of a functor application
   in a path. *)

let funappl_memo =
@

<<toplevel Env._1>>=
@

<<function Env.enter>>=
(* Insertion of bindings by name *)

let enter store_fun name data env =
  let id = Ident.create name in (id, store_fun id (Pident id) data env)
@

<<function Env.add_signature_component>>=
(* Insertion of all components of a signature *)

let add_signature_component env comp =
  match comp with
    Tsig_value(id, decl) -> add_value id decl env
  | Tsig_type(id, decl) -> add_type id decl env
  | Tsig_exception(id, decl) -> add_exception id decl env
  | Tsig_module(id, mty) -> add_module id mty env
@

<<function Env.add_signature>>=
let add_signature sg env =
  List.fold_left add_signature_component env sg
@

<<function Env.open_signature>>=
(* Open a signature path *)

let open_signature root sg env =
  (* First build the paths and substitution *)
  let (pl, sub) = prefix_idents root 0 Subst.identity sg in
  (* Then enter the components in the environment after substitution *)
  List.fold_left2
    (fun env item p ->
      match item with
        Tsig_value(id, decl) ->
          store_value (Ident.hide id) p
                      (Subst.value_description sub decl) env
      | Tsig_type(id, decl) ->
          store_type (Ident.hide id) p
                     (Subst.type_declaration sub decl) env
      | Tsig_exception(id, decl) ->
          store_exception (Ident.hide id) p
                          (Subst.exception_declaration sub decl) env
      | Tsig_module(id, mty) ->
          store_module (Ident.hide id) p (Subst.modtype sub mty) env
    )
    env sg pl
@

<<function Env.open_pers_signature>>=
(* Open a signature from a file *)

let open_pers_signature name env =
  let ps = find_pers_struct name in
  open_signature (Pident(Ident.create_persistent name)) ps.ps_sig env
@

<<function Env.read_signature>>=
(* Read a signature from a file *)

let read_signature modname filename =
  let (ps, crc) = read_pers_struct modname filename in (ps.ps_sig, crc)
@

<<function Env.save_signature>>=
(* Save a signature to a file *)

let save_signature sg modname filename =
  let ps =
    { ps_name = modname;
      ps_sig = sg;
      ps_comps =
        components_of_module empty Subst.identity
            (Pident(Ident.create_persistent modname)) (Tmty_signature sg) } in
  let oc = open_out_bin filename in
  output_string oc cmi_magic_number;
  output_value oc ps;
  flush oc;
  let crc = Digest.file filename in
  Digest.output oc crc;
  close_out oc;
  crc
@

<<constant Env.initial>>=
(* Make the initial environment *)

let initial = Predef.build_initial_env add_type add_exception empty
@

<<function Env.imported_units>>=
(* Return the list of imported interfaces with their CRCs *)

let imported_units() = !imported_units
@




%-------------------------------------------------------------

<<./typing/env.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Environment handling *)

open Format
open Config
open Misc
open Asttypes
open Longident
open Path
open Types


<<type Env.error>>

<<exception Env.Error>>

<<type Env.t>>

<<type Env.module_components>>

<<type Env.structure_components>>

<<type Env.functor_components>>

<<constant Env.empty>>

<<type Env.pers_struct>>

<<constant Env.persistent_structures>>
  (Hashtbl.create 17 : (string, pers_struct) Hashtbl.t)

<<constant Env.imported_units>>

<<function Env.read_pers_struct>>

<<function Env.find_pers_struct>>

<<function Env.reset_cache>>

<<constant Env.components_of_functor_appl>>

<<constant Env.check_modtype_inclusion>>
       t -> module_type -> module_type -> unit)

<<function Env.find_module_descr>>

<<function Env.find>>

let find_value = find (fun env -> env.values) (fun sc -> sc.comp_values)
and find_type = find (fun env -> env.types) (fun sc -> sc.comp_types)

(* Lookup by name *)

let rec lookup_module_descr lid env =
  match lid with
    Lident s ->
      begin try
        Ident.find_name s env.components
      with Not_found ->
        (Pident(Ident.create_persistent s), (find_pers_struct s).ps_comps)
      end
  | Ldot(l, s) ->
      let (p, descr) = lookup_module_descr l env in
      begin match descr with
       Structure_comps c ->
      let (descr, pos) = Tbl.find s c.comp_components in
          (Pdot(p, s, pos), descr)
      | Functor_comps f ->
         raise Not_found
      end

and lookup_module lid env =
  match lid with
    Lident s ->
      begin try
        Ident.find_name s env.modules
      with Not_found ->
        (Pident(Ident.create_persistent s), 
         Tmty_signature(find_pers_struct s).ps_sig)
      end
  | Ldot(l, s) ->
      let (p, descr) = lookup_module_descr l env in
      begin match descr with
       Structure_comps c ->
          let (data, pos) = Tbl.find s c.comp_modules in
          (Pdot(p, s, pos), data)
      | Functor_comps f ->
         raise Not_found
      end

<<function Env.lookup>>

<<function Env.lookup_simple>>

let lookup_value =
  lookup (fun env -> env.values) (fun sc -> sc.comp_values)
and lookup_constructor =
  lookup_simple (fun env -> env.constrs) (fun sc -> sc.comp_constrs)
and lookup_label =
  lookup_simple (fun env -> env.labels) (fun sc -> sc.comp_labels)
and lookup_type =
  lookup (fun env -> env.types) (fun sc -> sc.comp_types)

<<function Env.scrape_modtype>>

<<function Env.constructors_of_type>>

<<function Env.labels_of_type>>

<<function Env.prefix_idents>>

(* Compute structure descriptions *)

let rec components_of_module env sub path mty =
  match scrape_modtype mty env with
    Tmty_signature sg ->
      let c =
        { comp_values = Tbl.empty; comp_constrs = Tbl.empty;
          comp_labels = Tbl.empty; comp_types = Tbl.empty;
          comp_modules = Tbl.empty; 
          comp_components = Tbl.empty } in
      let (pl, sub) = prefix_idents path 0 sub sg in
      let env = ref env in
      let pos = ref 0 in
      List.iter2 (fun item path ->
        match item with
          Tsig_value(id, decl) ->
            let decl' = Subst.value_description sub decl in
            c.comp_values <-
              Tbl.add (Ident.name id) (decl', !pos) c.comp_values;
            begin match decl.val_prim with
              None -> incr pos | Some _ -> ()
            end
        | Tsig_type(id, decl) ->
            let decl' = Subst.type_declaration sub decl in
            c.comp_types <-
              Tbl.add (Ident.name id) (decl', nopos) c.comp_types;
            List.iter
              (fun (name, descr) ->
                c.comp_constrs <- Tbl.add name (descr, nopos) c.comp_constrs)
              (constructors_of_type path decl');
            List.iter
              (fun (name, descr) ->
                c.comp_labels <- Tbl.add name (descr, nopos) c.comp_labels)
              (labels_of_type path decl')
        | Tsig_exception(id, decl) ->
            let decl' = Subst.exception_declaration sub decl in
            let cstr = Datarepr.exception_descr path decl' in
            c.comp_constrs <-
              Tbl.add (Ident.name id) (cstr, !pos) c.comp_constrs;
            incr pos
        | Tsig_module(id, mty) ->
            let mty' = Subst.modtype sub mty in
            c.comp_modules <-
              Tbl.add (Ident.name id) (mty', !pos) c.comp_modules;
            let comps = components_of_module !env sub path mty in
            c.comp_components <-
              Tbl.add (Ident.name id) (comps, !pos) c.comp_components;
            env := store_components id path comps !env;
            incr pos
        )
        sg pl;
    Structure_comps c
  | Tmty_ident p ->
       Structure_comps {
         comp_values = Tbl.empty; comp_constrs = Tbl.empty;
          comp_labels = Tbl.empty; comp_types = Tbl.empty;
          comp_modules = Tbl.empty;
          comp_components = Tbl.empty }

(* Insertion of bindings by identifier + path *)

and store_value id path decl env =
  { values = Ident.add id (path, decl) env.values;
    constrs = env.constrs;
    labels = env.labels;
    types = env.types;
    modules = env.modules;
    components = env.components }

and store_type id path info env =
  { values = env.values;
    constrs =
      List.fold_right
        (fun (name, descr) constrs ->
          Ident.add (Ident.create name) descr constrs)
        (constructors_of_type path info)
        env.constrs;
    labels =
      List.fold_right
        (fun (name, descr) labels ->
          Ident.add (Ident.create name) descr labels)
        (labels_of_type path info)
        env.labels;
    types = Ident.add id (path, info) env.types;
    modules = env.modules;
    components = env.components }

and store_exception id path decl env =
  { values = env.values;
    constrs = Ident.add id (Datarepr.exception_descr path decl) env.constrs;
    labels = env.labels;
    types = env.types;
    modules = env.modules;
    components = env.components }

and store_module id path mty env =
  { values = env.values;
    constrs = env.constrs;
    labels = env.labels;
    types = env.types;
    modules = Ident.add id (path, mty) env.modules;
    components =
      Ident.add id (path, components_of_module env Subst.identity path mty)
                   env.components }

and store_components id path comps env =
  { values = env.values;
    constrs = env.constrs;
    labels = env.labels;
    types = env.types;
    modules = env.modules;
    components = Ident.add id (path, comps) env.components }

<<constant Env.funappl_memo>>
  (Hashtbl.create 17 : (Path.t, module_components) Hashtbl.t)

<<toplevel Env._1>>

(* Insertion of bindings by identifier *)

let add_value id desc env =
  store_value id (Pident id) desc env

and add_type id info env =
  store_type id (Pident id) info env

and add_exception id decl env =
  store_exception id (Pident id) decl env

and add_module id mty env =
  store_module id (Pident id) mty env

<<function Env.enter>>

let enter_value = enter store_value
and enter_type = enter store_type
and enter_exception = enter store_exception
and enter_module = enter store_module

<<function Env.add_signature_component>>

<<function Env.add_signature>>

<<function Env.open_signature>>

<<function Env.open_pers_signature>>

<<function Env.read_signature>>

<<function Env.save_signature>>

<<constant Env.initial>>

<<function Env.imported_units>>

<<function Env.report_error>>
@


\subsection*{[[./typing/typedtree.mli]]}


<<signature Typedtree.pat_bound_idents>>=
(* Auxiliary functions over the a.s.t. *)

val pat_bound_idents: pattern -> Ident.t list
@

<<signature Typedtree.let_bound_idents>>=
val let_bound_idents: (pattern * expression) list -> Ident.t list
@

<<signature Typedtree.rev_let_bound_idents>>=
val rev_let_bound_idents: (pattern * expression) list -> Ident.t list
@


%-------------------------------------------------------------

<<./typing/typedtree.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Abstract syntax tree after typing *)

open Asttypes
open Types

(* Value expressions for the core language *)

<<type Typedtree.pattern>>

<<type Typedtree.pattern_desc>>

<<type Typedtree.expression>>

<<type Typedtree.expression_desc>>

(* Value expressions for the module language *)

<<type Typedtree.module_expr>>

<<type Typedtree.module_expr_desc>>

<<type Typedtree.structure>>

<<type Typedtree.structure_item>>

<<type Typedtree.module_coercion>>

<<signature Typedtree.pat_bound_idents>>
<<signature Typedtree.let_bound_idents>>
<<signature Typedtree.rev_let_bound_idents>>
@


\subsection*{[[./typing/typedtree.ml]]}


<<constant Typedtree.idents>>=
(* List the identifiers bound by a pattern or a let *)

let idents = ref([]: Ident.t list)
@

<<function Typedtree.bound_idents>>=
let rec bound_idents pat =
  match pat.pat_desc with
    Tpat_any -> ()
  | Tpat_var id -> idents := id :: !idents
  | Tpat_alias(p, id) -> bound_idents p; idents := id :: !idents
  | Tpat_constant cst -> ()
  | Tpat_tuple patl -> List.iter bound_idents patl
  | Tpat_construct(cstr, patl) -> List.iter bound_idents patl
  | Tpat_record lbl_pat_list ->
      List.iter (fun (lbl, pat) -> bound_idents pat) lbl_pat_list
  | Tpat_or(p1, p2) -> bound_idents p1; bound_idents p2
@

<<function Typedtree.pat_bound_idents>>=
let pat_bound_idents pat =
  idents := []; bound_idents pat; let res = !idents in idents := []; res
@

<<function Typedtree.rev_let_bound_idents>>=
let rev_let_bound_idents pat_expr_list =
  idents := [];
  List.iter (fun (pat, expr) -> bound_idents pat) pat_expr_list;
  let res = !idents in idents := []; res
@

<<function Typedtree.let_bound_idents>>=
let let_bound_idents pat_expr_list =
  List.rev(rev_let_bound_idents pat_expr_list)
@


%-------------------------------------------------------------

<<./typing/typedtree.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* Abstract syntax tree after typing *)

open Misc
open Asttypes
open Types

(* Value expressions for the core language *)

<<type Typedtree.pattern>>

<<type Typedtree.pattern_desc>>

<<type Typedtree.expression>>

<<type Typedtree.expression_desc>>


(* Value expressions for the module language *)

<<type Typedtree.module_expr>>

<<type Typedtree.module_expr_desc>>

<<type Typedtree.structure>>

<<type Typedtree.structure_item>>

<<type Typedtree.module_coercion>>

(* Auxiliary functions over the a.s.t. *)

<<constant Typedtree.idents>>

<<function Typedtree.bound_idents>>

<<function Typedtree.pat_bound_idents>>

<<function Typedtree.rev_let_bound_idents>>

<<function Typedtree.let_bound_idents>>

      
@


\subsection*{[[./typing/ctype.mli]]}

<<signature Ctype.begin_def>>=
val begin_def: unit -> unit
        (* Raise the variable level by one at the beginning of a definition. *)
@

<<signature Ctype.end_def>>=
val end_def: unit -> unit
        (* Lower the variable level by one at the end of a definition *)
@

<<signature Ctype.reset_def>>=
val reset_def: unit -> unit
        (* Reset (to 0) the variable level *)
@


<<signature Ctype.new_global_var>>=
val new_global_var: unit -> type_expr
        (* Return a fresh variable, bound at toplevel
           (as type variables ['a] in type constraints). *)
@

<<signature Ctype.repr>>=
val repr: type_expr -> type_expr
        (* Return the canonical representative of a type. *)
@

<<signature Ctype.generalize>>=
val generalize: type_expr -> unit
        (* Generalize in-place the given type *)
@

<<signature Ctype.make_nongen>>=
val make_nongen: type_expr -> unit
        (* Make non-generalizable the given type *)
@

<<signature Ctype.instance>>=
val instance: type_expr -> type_expr
        (* Take an instance of a type scheme *)
@

<<signature Ctype.instance_constructor>>=
val instance_constructor:
        constructor_description -> type_expr list * type_expr
        (* Same, for a constructor *)
@

<<signature Ctype.instance_label>>=
val instance_label: label_description -> type_expr * type_expr
        (* Same, for a label *)
@

<<signature Ctype.unify>>=
val unify: Env.t -> type_expr -> type_expr -> unit
        (* Unify the two types given. Raise [Unify] if not possible. *)
@

<<signature Ctype.filter_arrow>>=
val filter_arrow: Env.t -> type_expr -> type_expr * type_expr
        (* A special case of unification (with 'a -> 'b). *)
@

<<signature Ctype.moregeneral>>=
val moregeneral: Env.t -> type_expr -> type_expr -> bool
        (* Check if the first type scheme is more general than the second. *)
@

<<signature Ctype.equal>>=
val equal: Env.t -> type_expr list -> type_expr ->
                       type_expr list -> type_expr -> bool
        (* [equal env [x1...xn] tau [y1...yn] sigma]
           checks whether the parameterized types
           [/\x1.../\xn.tau] and [/\y1.../\yn.sigma] are equivalent. *)
@

<<signature Ctype.closed_schema>>=
val closed_schema: type_expr -> bool
        (* Check whether the given type scheme contains no non-generic
           type variables *)
@

<<signature Ctype.nondep_type>>=
val nondep_type: Env.t -> Ident.t -> type_expr -> type_expr
        (* Return a type equivalent to the given type but without
           references to the given module identifier. Raise [Not_found]
           if no such type exists. *)
@

<<signature Ctype.free_type_ident>>=
val free_type_ident: Env.t -> Ident.t list -> type_expr -> bool
        (* Test whether one of the given type identifiers occur free
           in the given type expression. *)
@

<<signature Ctype.is_generic>>=
val is_generic: type_expr -> bool
        (* Test whether the given type variable is generic *)
@

<<signature Ctype.arity>>=
val arity: type_expr -> int
        (* Return the arity (as for curried functions) of the given type. *)
@

<<signature Ctype.none>>=
val none: type_expr
        (* A dummy type expression *)
@

<<signature Ctype.substitute>>=
val substitute:
        type_expr list -> type_expr list -> type_expr -> type_expr
        (* [substitute [v1...vN] [t1...tN] t]
           returns a copy of [t] where the [vi] are replaced
           by the [ti]. *)
@


<<signature Ctype.newty>>=
val newty: 'a -> 'a
@

<<signature Ctype.init_def>>=
val init_def: 'a -> unit
@


%-------------------------------------------------------------

<<./typing/ctype.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Operations on core types *)

open Types

<<signature Ctype.begin_def>>
<<signature Ctype.end_def>>
<<signature Ctype.reset_def>>
<<signature Ctype.newvar>>
<<signature Ctype.new_global_var>>
<<signature Ctype.repr>>
<<signature Ctype.generalize>>
<<signature Ctype.make_nongen>>
<<signature Ctype.instance>>
<<signature Ctype.instance_constructor>>
<<signature Ctype.instance_label>>
<<signature Ctype.unify>>
<<signature Ctype.filter_arrow>>
<<signature Ctype.moregeneral>>
<<signature Ctype.equal>>
<<signature Ctype.closed_schema>>
<<signature Ctype.nondep_type>>
<<signature Ctype.free_type_ident>>
<<signature Ctype.is_generic>>
<<signature Ctype.arity>>
<<signature Ctype.none>>
<<signature Ctype.substitute>>

<<exception Ctype.Unify>>

<<signature Ctype.newty>>
<<signature Ctype.init_def>>
@


\subsection*{[[./typing/ctype.ml]]}


<<constant Ctype.current_level>>=
let current_level = ref 0
@

<<constant Ctype.generic_level>>=
let generic_level = (-1)
@

<<function Ctype.reset_def>>=
let reset_def () = current_level := 0
@

<<function Ctype.begin_def>>=
let begin_def () = incr current_level
@

<<function Ctype.end_def>>=
let end_def () = decr current_level
@

<<function Ctype.newvar>>=
let newvar () =
  Tvar { tvar_level = !current_level; tvar_link = None }
@

<<function Ctype.new_global_var>>=
let new_global_var () =
  Tvar { tvar_level = 1; tvar_link = None }
@

<<function Ctype.repr>>=
let rec repr = function
    Tvar({tvar_link = Some ty} as v) ->
      let r = repr ty in
      if r != ty then v.tvar_link <- Some r;
      r
  | t -> t
@

<<constant Ctype.none>>=
let none = Ttuple []                  (* Clearly ill-formed type *)
@

<<function Ctype.generalize>>=
(* Type generalization *)

let rec generalize ty =
  match repr ty with
    Tvar v ->
      if v.tvar_level > !current_level then v.tvar_level <- generic_level
  | Tarrow(t1, t2) ->
      generalize t1; generalize t2
  | Ttuple tl ->
      List.iter generalize tl
  | Tconstr(p, []) ->
      ()
  | Tconstr(p, tl) ->
      List.iter generalize tl
@

<<function Ctype.make_nongen>>=
let rec make_nongen ty =
  match repr ty with
    Tvar v ->
      if v.tvar_level > !current_level then v.tvar_level <- !current_level
  | Tarrow(t1, t2) ->
      make_nongen t1; make_nongen t2
  | Ttuple tl ->
      List.iter make_nongen tl
  | Tconstr(p, []) ->
      ()
  | Tconstr(p, tl) ->
      List.iter make_nongen tl
@

<<constant Ctype.inst_subst>>=
(* Taking instances of type schemes *)

let inst_subst = ref ([] : (type_expr * type_expr) list)
@

<<function Ctype.copy>>=
let rec copy ty =
  match repr ty with
    Tvar v as t ->
      if v.tvar_level = generic_level then begin
        try
          List.assq t !inst_subst
        with Not_found ->
          let t' = newvar() in
          inst_subst := (t, t') :: !inst_subst;
          t'
      end else t
  | Tarrow(t1, t2) ->
      Tarrow(copy t1, copy t2)
  | Ttuple tl ->
      Ttuple(List.map copy tl)
  | Tconstr(p, []) as t ->
      t
  | Tconstr(p, tl) ->
      Tconstr(p, List.map copy tl)
@

<<function Ctype.instance>>=
let instance sch =
  inst_subst := [];
  let ty = copy sch in
  inst_subst := [];
  ty
@

<<function Ctype.instance_constructor>>=
let instance_constructor cstr =
  inst_subst := [];
  let ty_res = copy cstr.cstr_res in
  let ty_args = List.map copy cstr.cstr_args in
  inst_subst := [];
  (ty_args, ty_res)
@

<<function Ctype.instance_label>>=
let instance_label lbl =
  inst_subst := [];
  let ty_res = copy lbl.lbl_res in
  let ty_arg = copy lbl.lbl_arg in
  inst_subst := [];
  (ty_arg, ty_res)
@

<<function Ctype.substitute>>=
let substitute params args body =
  inst_subst := List.combine params args;
  let ty = copy body in
  inst_subst := [];
  ty
@

<<exception Ctype.Cannot_expand>>=
(* Unification *)

exception Cannot_expand
@

<<function Ctype.expand_abbrev>>=
let expand_abbrev env path args =
  try
    let decl = Env.find_type path env in
    match decl.type_manifest with
      Some body -> substitute decl.type_params args body
    | None -> raise Cannot_expand
  with Not_found ->
    raise Cannot_expand
@

<<function Ctype.occur>>=
let rec occur tvar ty =
  match repr ty with
    Tvar v ->
      if v == tvar then raise Unify;
      if v.tvar_level > tvar.tvar_level then v.tvar_level <- tvar.tvar_level
  | Tarrow(t1, t2) ->
      occur tvar t1; occur tvar t2
  | Ttuple tl ->
      List.iter (occur tvar) tl
  | Tconstr(p, []) ->
      ()
  | Tconstr(p, tl) ->
      List.iter (occur tvar) tl
@

<<function Ctype.filter_arrow>>=
let rec filter_arrow env t =
  match repr t with
    Tvar v ->
      let t1 = Tvar { tvar_level = v.tvar_level; tvar_link = None }
      and t2 = Tvar { tvar_level = v.tvar_level; tvar_link = None } in
      v.tvar_link <- Some(Tarrow(t1, t2));
      (t1, t2)
  | Tarrow(t1, t2) ->
      (t1, t2)
  | Tconstr(p, tl) ->
      begin try
        filter_arrow env (expand_abbrev env p tl)
      with Cannot_expand ->
        raise Unify
      end
  | _ ->
      raise Unify
@

<<function Ctype.moregen_occur>>=
(* Matching between type schemes *)

let rec moregen_occur tvar ty =
  match repr ty with
    Tvar v ->
      if v == tvar then raise Unify;
      (* tvar has level = !current_level iff it is generic
         in the original type scheme. In this case, it can be freely
         instantiated. Otherwise, tvar is not generic
         and cannot be instantiated by a type that contains
         generic variables. *)
      if v.tvar_level = generic_level & tvar.tvar_level < !current_level
      then raise Unify
  | Tarrow(t1, t2) ->
      moregen_occur tvar t1; moregen_occur tvar t2
  | Ttuple tl ->
      List.iter (moregen_occur tvar) tl
  | Tconstr(p, []) ->
      ()
  | Tconstr(p, tl) ->
      List.iter (moregen_occur tvar) tl
@

<<function Ctype.moregeneral>>=
let moregeneral env sch1 sch2 =
  begin_def();
  try
    moregen env (instance sch1) sch2;
    end_def();
    true
  with Unify ->
    end_def();
    false
@

<<function Ctype.equal>>=
(* Equivalence between parameterized types *)

let equal env params1 ty1 params2 ty2 =
  let subst = List.combine params1 params2 in
  let rec eqtype t1 t2 =
    let t1 = repr t1 in
    let t2 = repr t2 in
    match (t1, t2) with
      (Tvar _, Tvar _) ->
        begin try
          List.assq t1 subst == t2
        with Not_found ->
          fatal_error "Ctype.equal"
        end
    | (Tarrow(t1, u1), Tarrow(t2, u2)) ->
        eqtype t1 t2 & eqtype u1 u2
    | (Ttuple tl1, Ttuple tl2) ->
        eqtype_list tl1 tl2
    | (Tconstr(p1, tl1), Tconstr(p2, tl2)) ->
        if Path.same p1 p2 then
          eqtype_list tl1 tl2
        else begin
          try
            eqtype (expand_abbrev env p1 tl1) t2
          with Cannot_expand ->
          try
            eqtype t1 (expand_abbrev env p2 tl2)
          with Cannot_expand ->
            false
        end
    | (Tconstr(p1, tl1), _) ->
        begin try
          eqtype (expand_abbrev env p1 tl1) t2
        with Cannot_expand ->
          false
        end
    | (_, Tconstr(p2, tl2)) ->
        begin try
          eqtype t1 (expand_abbrev env p2 tl2)
        with Cannot_expand ->
          false
        end
    | (_, _) ->
        false
  and eqtype_list tl1 tl2 =
    match (tl1, tl2) with
      ([], []) -> true
    | (t1::r1, t2::r2) -> eqtype t1 t2 & eqtype_list r1 r2
    | (_, _) -> false
  in
    eqtype ty1 ty2
@

<<function Ctype.nondep_type>>=
(* Remove dependencies *)

let rec nondep_type env id ty =
  match repr ty with
    Tvar v as tvar -> tvar
  | Tarrow(t1, t2) ->
      Tarrow(nondep_type env id t1, nondep_type env id t2)
  | Ttuple tl ->
      Ttuple(List.map (nondep_type env id) tl)
  | Tconstr(p, tl) ->
      if Path.isfree id p then begin
        let ty' =
          try
            expand_abbrev env p tl
          with Cannot_expand ->
            raise Not_found in
        nondep_type env id ty'
      end else
        Tconstr(p, List.map (nondep_type env id) tl)
@

<<function Ctype.free_type_ident>>=
let rec free_type_ident env ids ty =
  match repr ty with
    Tvar _ -> false
  | Tarrow(t1, t2) ->
      free_type_ident env ids t1 or free_type_ident env ids t2
  | Ttuple tl ->
      List.exists (free_type_ident env ids) tl
  | Tconstr((Pident id as p), tl) ->
      List.exists (Ident.same id) ids or begin
        try
          free_type_ident env (id::ids) (expand_abbrev env p tl)
        with Cannot_expand ->
          List.exists (free_type_ident env ids) tl
      end
  | Tconstr(p, tl) ->
      begin try
        free_type_ident env ids (expand_abbrev env p tl)
      with Cannot_expand ->
        List.exists (free_type_ident env ids) tl
      end
@

<<function Ctype.closed_schema>>=
(* Miscellaneous *)

let rec closed_schema ty =
  match repr ty with
    Tvar v -> v.tvar_level = generic_level
  | Tarrow(t1, t2) -> closed_schema t1 & closed_schema t2
  | Ttuple tl -> List.for_all closed_schema tl
  | Tconstr(p, tl) -> List.for_all closed_schema tl
@

<<function Ctype.is_generic>>=
let is_generic ty =
  match repr ty with
    Tvar v -> v.tvar_level = generic_level
  | _ -> fatal_error "Ctype.is_generic"
@

<<function Ctype.arity>>=
let rec arity ty =
  match repr ty with
    Tarrow(t1, t2) -> 1 + arity t2
  | _ -> 0
@

<<function Ctype.newty>>=
let newty x = x
@

<<function Ctype.init_def>>=
let init_def _ = ()
@


%-------------------------------------------------------------

<<./typing/ctype.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Operations on core types *)

open Misc
open Path
open Types

<<exception Ctype.Unify>>

<<constant Ctype.current_level>>

<<constant Ctype.generic_level>>

<<function Ctype.reset_def>>
<<function Ctype.begin_def>>
<<function Ctype.end_def>>

<<function Ctype.newvar>>

<<function Ctype.new_global_var>>

<<function Ctype.repr>>

<<constant Ctype.none>>

<<function Ctype.generalize>>

<<function Ctype.make_nongen>>

<<constant Ctype.inst_subst>>

<<function Ctype.copy>>

<<function Ctype.instance>>

<<function Ctype.instance_constructor>>

<<function Ctype.instance_label>>

<<function Ctype.substitute>>

<<exception Ctype.Cannot_expand>>

<<function Ctype.expand_abbrev>>

<<function Ctype.occur>>

let rec unify env t1 t2 =
  if t1 == t2 then () else begin
    let t1 = repr t1 in
    let t2 = repr t2 in
    if t1 == t2 then () else begin
      match (t1, t2) with
        (Tvar v, _) ->
          occur v t2; v.tvar_link <- Some t2
      | (_, Tvar v) ->
          occur v t1; v.tvar_link <- Some t1
      | (Tarrow(t1, u1), Tarrow(t2, u2)) ->
          unify env t1 t2; unify env u1 u2
      | (Ttuple tl1, Ttuple tl2) ->
          unify_list env tl1 tl2
      | (Tconstr(p1, tl1), Tconstr(p2, tl2)) ->
          if Path.same p1 p2 then
            unify_list env tl1 tl2
          else begin
            try
              unify env (expand_abbrev env p1 tl1) t2
            with Cannot_expand ->
            try
              unify env t1 (expand_abbrev env p2 tl2)
            with Cannot_expand ->
              raise Unify
          end
      | (Tconstr(p1, tl1), _) ->
          begin try
            unify env (expand_abbrev env p1 tl1) t2
          with Cannot_expand ->
            raise Unify
          end
      | (_, Tconstr(p2, tl2)) ->
          begin try
            unify env t1 (expand_abbrev env p2 tl2)
          with Cannot_expand ->
            raise Unify
          end
      | (_, _) ->
          raise Unify
    end
  end

and unify_list env tl1 tl2 =
  match (tl1, tl2) with
    ([], []) -> ()
  | (t1::r1, t2::r2) -> unify env t1 t2; unify_list env r1 r2
  | (_, _) -> raise Unify

<<function Ctype.filter_arrow>>

<<function Ctype.moregen_occur>>

let rec moregen env t1 t2 =
  if t1 == t2 then () else begin
    let t1 = repr t1 in
    let t2 = repr t2 in
    if t1 == t2 then () else begin
      match (t1, t2) with
        (Tvar v, _) ->
          if v.tvar_level = generic_level then raise Unify;
          moregen_occur v t2;
          v.tvar_link <- Some t2
      | (Tarrow(t1, u1), Tarrow(t2, u2)) ->
          moregen env t1 t2; moregen env u1 u2
      | (Ttuple tl1, Ttuple tl2) ->
          moregen_list env tl1 tl2
      | (Tconstr(p1, tl1), Tconstr(p2, tl2)) ->
          if Path.same p1 p2 then
            moregen_list env tl1 tl2
          else begin
            try
              moregen env (expand_abbrev env p1 tl1) t2
            with Cannot_expand ->
            try
              moregen env t1 (expand_abbrev env p2 tl2)
            with Cannot_expand ->
              raise Unify
          end
      | (Tconstr(p1, tl1), _) ->
          begin try
            moregen env (expand_abbrev env p1 tl1) t2
          with Cannot_expand ->
            raise Unify
          end
      | (_, Tconstr(p2, tl2)) ->
          begin try
            moregen env t1 (expand_abbrev env p2 tl2)
          with Cannot_expand ->
            raise Unify
          end
      | (_, _) ->
          raise Unify
    end
  end

and moregen_list env tl1 tl2 =
  match (tl1, tl2) with
    ([], []) -> ()
  | (t1::r1, t2::r2) -> moregen env t1 t2; moregen_list env r1 r2
  | (_, _) -> raise Unify
  
<<function Ctype.moregeneral>>

<<function Ctype.equal>>

<<function Ctype.nondep_type>>

<<function Ctype.free_type_ident>>

<<function Ctype.closed_schema>>

<<function Ctype.is_generic>>

<<function Ctype.arity>>

<<function Ctype.newty>>
<<function Ctype.init_def>>
@


\subsection*{[[./typing/includecore.mli]]}

<<exception Includecore.Dont_match>>=
exception Dont_match
@

<<signature Includecore.value_descriptions>>=
val value_descriptions:
        Env.t -> value_description -> value_description -> module_coercion
@

<<signature Includecore.type_declarations>>=
val type_declarations:
        Env.t -> Ident.t -> type_declaration -> type_declaration -> bool
@

<<signature Includecore.exception_declarations>>=
val exception_declarations:
        Env.t -> exception_declaration -> exception_declaration -> bool
@


%-------------------------------------------------------------

<<./typing/includecore.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Inclusion checks for the core language *)

open Types
open Typedtree

<<exception Includecore.Dont_match>>

<<signature Includecore.value_descriptions>>
<<signature Includecore.type_declarations>>
<<signature Includecore.exception_declarations>>


@


\subsection*{[[./typing/includecore.ml]]}

<<exception Includecore.Dont_match (./typing/includecore.ml)>>=
(* Inclusion between value descriptions *)

exception Dont_match
@

<<function Includecore.value_descriptions>>=
let value_descriptions env vd1 vd2 =
  if Ctype.moregeneral env vd1.val_type vd2.val_type then begin
    match (vd1.val_prim, vd2.val_prim) with
        (Some p1, Some p2) ->
          if p1 = p2 then Tcoerce_none else raise Dont_match
      | (Some p, None) -> Tcoerce_primitive p
      | (None, Some p) -> raise Dont_match
      | (None, None) -> Tcoerce_none
  end else
    raise Dont_match
@

<<function Includecore.type_declarations>>=
(* Inclusion between type declarations *)

let type_declarations env id decl1 decl2 =
  decl1.type_arity = decl2.type_arity &
  begin match (decl1.type_kind, decl2.type_kind) with
      (_, Type_abstract) -> true
    | (Type_variant cstrs1, Type_variant cstrs2) ->
        for_all2
          (fun (cstr1, arg1) (cstr2, arg2) ->
            cstr1 = cstr2 &
            for_all2
              (fun ty1 ty2 ->
                Ctype.equal env decl1.type_params ty1 decl2.type_params ty2)
              arg1 arg2)
          cstrs1 cstrs2
    | (Type_record labels1, Type_record labels2) ->
        for_all2
          (fun (lbl1, mut1, ty1) (lbl2, mut2, ty2) ->
            lbl1 = lbl2 & mut1 = mut2 &
            Ctype.equal env decl1.type_params ty1 decl2.type_params ty2)
          labels1 labels2
    | (_, _) -> false
  end &
  begin match (decl1.type_manifest, decl2.type_manifest) with
      (_, None) -> true
    | (Some ty1, Some ty2) ->
        Ctype.equal env decl1.type_params ty1 decl2.type_params ty2
    | (None, Some ty2) ->
        let ty1 = Tconstr(Pident id, decl2.type_params) in
        Ctype.equal env [] ty1 [] ty2
  end
@

<<function Includecore.exception_declarations>>=
(* Inclusion between exception declarations *)

let exception_declarations env ed1 ed2 =
  for_all2 (fun ty1 ty2 -> Ctype.equal env [] ty1 [] ty2) ed1 ed2
@


%-------------------------------------------------------------

<<./typing/includecore.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Inclusion checks for the core language *)

open Misc
open Path
open Types
open Typedtree

<<exception Includecore.Dont_match (./typing/includecore.ml)>>

<<function Includecore.value_descriptions>>

<<function Includecore.type_declarations>>

<<function Includecore.exception_declarations>>

@


\subsection*{[[./typing/mtype.mli]]}

<<signature Mtype.scrape>>=
val scrape: Env.t -> module_type -> module_type
        (* Expand toplevel module type abbreviations
           till hitting a "hard" module type (signature, functor,
           or abstract module type ident. *)
@

<<signature Mtype.strengthen>>=
val strengthen: Env.t -> module_type -> Path.t -> module_type
        (* Strengthen abstract type components relative to the
           given path. *)
@

<<signature Mtype.nondep_supertype>>=
val nondep_supertype: Env.t -> Ident.t -> module_type -> module_type
        (* Return the smallest supertype of the given type
           in which the given ident does not appear.
           Raise [Not_found] if no such type List.exists. *)
@


%-------------------------------------------------------------

<<./typing/mtype.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Operations on module types *)

open Types

<<signature Mtype.scrape>>
<<signature Mtype.strengthen>>
<<signature Mtype.nondep_supertype>>
@


\subsection*{[[./typing/mtype.ml]]}

<<function Mtype.scrape>>=
let rec scrape env mty =
  match mty with
    Tmty_ident p ->
      failwith "Mtype.scrape:TODO"
(*
      begin try
        match Env.find_modtype p env with
          Tmodtype_abstract -> mty
        | Tmodtype_manifest mty' -> scrape env mty'
      with Not_found ->
        mty
      end
*)
  | _ -> mty
@

<<type Mtype.variance>>=
(* In nondep_supertype, env is only used for the type it assigns to id.
   Hence there is no need to keep env up-to-date by adding the bindings
   traversed. *)

type variance = Co | Contra | Strict
@

<<function Mtype.nondep_supertype>>=
let nondep_supertype env mid mty =

  let rec nondep_mty var mty =
    match mty with
      Tmty_ident p ->
        if Path.isfree mid p then begin
          failwith "nondep_mty:TODO"
            (*
          match Env.find_modtype p env with
            Tmodtype_abstract -> raise Not_found
          | Tmodtype_manifest mty -> nondep_mty var mty      
            *)
        end else mty
    | Tmty_signature sg ->
        Tmty_signature(nondep_sig var sg)

  and nondep_sig var = function
    [] -> []
  | item :: rem ->
      let rem' = nondep_sig var rem in
      match item with
        Tsig_value(id, d) ->
          Tsig_value(id, {val_type = Ctype.nondep_type env mid d.val_type;
                          val_prim = d.val_prim}) :: rem'
      | Tsig_type(id, d) ->
          Tsig_type(id, nondep_type_decl var d) :: rem'
      | Tsig_exception(id, d) ->
          Tsig_exception(id, List.map (Ctype.nondep_type env mid) d) :: rem'
      | Tsig_module(id, mty) ->
          Tsig_module(id, nondep_mty var mty) :: rem'

  and nondep_type_decl var d =
    {type_params = d.type_params;
     type_arity = d.type_arity;
     type_kind =
       begin try
         match d.type_kind with
           Type_abstract ->
             Type_abstract
         | Type_variant cstrs ->
             Type_variant(List.map
               (fun (c, tl) -> (c, List.map (Ctype.nondep_type env mid) tl))
               cstrs)
         | Type_record lbls ->
             Type_record(List.map
               (fun (c, mut, t) -> (c, mut, Ctype.nondep_type env mid t))
               lbls)
       with Not_found ->
         match var with Co -> Type_abstract | _ -> raise Not_found
       end;
     type_manifest =
       begin try
         match d.type_manifest with
           None -> None
         | Some ty -> Some(Ctype.nondep_type env mid ty)
       with Not_found ->
         match var with Co -> None | _ -> raise Not_found
       end}

  in
    nondep_mty Co mty
@


%-------------------------------------------------------------

<<./typing/mtype.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Operations on module types *)

open Path
open Types


<<function Mtype.scrape>>

let rec strengthen env mty p =
  match scrape env mty with
    Tmty_signature sg ->
      Tmty_signature(strengthen_sig env sg p)
  | mty ->
      mty

and strengthen_sig env sg p =
  match sg with
    [] -> []
  | (Tsig_value(id, desc) as sigelt) :: rem ->
      sigelt :: strengthen_sig env rem p
  | Tsig_type(id, decl) :: rem ->
      let newdecl =
        match decl.type_manifest with
          None ->
            { type_params = decl.type_params;
              type_arity = decl.type_arity;
              type_kind = decl.type_kind;
              type_manifest = Some(Tconstr(Pdot(p, Ident.name id, nopos),
                                                decl.type_params)) }
        | _ -> decl in
      Tsig_type(id, newdecl) :: strengthen_sig env rem p
  | (Tsig_exception(id, d) as sigelt) :: rem ->
      sigelt :: strengthen_sig env rem p
  | Tsig_module(id, mty) :: rem ->
      Tsig_module(id, strengthen env mty (Pdot(p, Ident.name id, nopos))) ::
      strengthen_sig (Env.add_module id mty env) rem p
      (* Need to add the module in case it defines manifest module types *)

<<type Mtype.variance>>

<<function Mtype.nondep_supertype>>
@


\subsection*{[[./typing/printtyp.mli]]}


<<signature Printtyp.reset_var_names>>=
val reset_var_names: unit -> unit
@


<<signature Printtyp.type_scheme>>=
val type_scheme: type_expr -> unit
@





<<signature Printtyp.signature_item>>=
val signature_item: signature_item -> unit
@


%-------------------------------------------------------------

<<./typing/printtyp.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Printing functions *)
open Types
open Typedtree

<<signature Printtyp.longident>>
<<signature Printtyp.ident>>
<<signature Printtyp.path>>
<<signature Printtyp.reset_var_names>>
<<signature Printtyp.type_expr>>
<<signature Printtyp.type_scheme>>
<<signature Printtyp.value_description>>
<<signature Printtyp.type_declaration>>
<<signature Printtyp.exception_declaration>>
<<signature Printtyp.modtype>>
<<signature Printtyp.signature>>
<<signature Printtyp.signature_item>>
@


\subsection*{[[./typing/printtyp.ml]]}



<<constant Printtyp.var_names>>=
(* Print a type expression *)

let var_names = ref ([] : (type_expr * string) list)
@

<<constant Printtyp.var_counter>>=
let var_counter = ref 0
@

<<function Printtyp.reset_var_names>>=
let reset_var_names () = var_names := []; var_counter := 0
@

<<function Printtyp.name_of_var>>=
let name_of_var v =
  try
    List.assq v !var_names
  with Not_found ->
    let name = 
      if !var_counter < 26
      then String.make 1 (Char.chr(97 + !var_counter)) 
      else String.make 1 (Char.chr(97 + !var_counter mod 26)) ^
           string_of_int(!var_counter / 26) in
    var_names := (v, name) :: !var_names;
    incr var_counter;
    name
@





%-------------------------------------------------------------

<<./typing/printtyp.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Printing functions *)

open Format
open Longident
open Path
open Asttypes
open Types
open Typedtree


<<function Printtyp.longident>>

<<function Printtyp.ident>>

<<constant Printtyp.ident_pervasive>>

<<function Printtyp.path>>

<<constant Printtyp.var_names>>
<<constant Printtyp.var_counter>>

<<function Printtyp.reset_var_names>>

<<function Printtyp.name_of_var>>

<<function Printtyp.typeexp>>
<<function Printtyp.type_expr>>

and type_scheme ty = reset_var_names(); typexp true 0 ty

(* Print one type declaration *)

<<function Printtyp.type_declaration>>

<<function Printtyp.exception_declaration>>

<<function Printtyp.value_description>>

(* Print a module type *)

<<function Printtyp.modtype>>

<<function Printtyp.signature>>
@


\subsection*{[[./typing/parmatch.mli]]}




%-------------------------------------------------------------

<<./typing/parmatch.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Detection of partial matches and unused match cases. *)

open Typedtree

<<signature Parmatch.check_partial>>
<<signature Parmatch.check_unused>>
@


\subsection*{[[./typing/parmatch.ml]]}

<<function Parmatch.make_pat>>=
let make_pat desc ty =
  {pat_desc = desc; pat_loc = Location.none; pat_type = ty}
@

<<constant Parmatch.omega>>=
let omega = make_pat Tpat_any Ctype.none
@

<<function Parmatch.omegas>>=
let rec omegas i =
  if i <= 0 then [] else omega :: omegas (i-1)
@

<<function Parmatch.omega_list>>=
let omega_list l = omegas(List.length l)
@

<<function Parmatch.has_guard>>=
let has_guard act =
  match act.exp_desc with
    Texp_when(_, _) -> true
  | _ -> false
@

<<function Parmatch.simple_match>>=
let simple_match p1 p2 = 
  match p1.pat_desc, p2.pat_desc with
    Tpat_construct(c1, _), Tpat_construct(c2, _) ->
      c1.cstr_tag = c2.cstr_tag
  | Tpat_constant(c1), Tpat_constant(c2) ->
      c1 = c2
  | Tpat_tuple(_), Tpat_tuple(_) -> true
  | Tpat_record(_), Tpat_record(_) -> true
  | _, (Tpat_any | Tpat_var(_)) -> true
  | _, _ -> false
@

<<function Parmatch.record_labels>>=
(* Return the set of labels and number of fields for a record pattern. *)

let record_labels p =
  match p.pat_desc with
    Tpat_record((lbl1, pat1) :: rem) -> Array.to_list lbl1.lbl_all
  | _ -> fatal_error "Parmatch.record_labels"
@

<<function Parmatch.record_num_fields>>=
let record_num_fields p =
  match p.pat_desc with
    Tpat_record((lbl1, pat1) :: rem) -> Array.length lbl1.lbl_all
  | _ -> fatal_error "Parmatch.record_num_fields"
@

<<function Parmatch.set_fields>>=
let set_fields size l =
  let v = Array.create size omega in
  let rec change_rec l = match l with
    (lbl,p)::l ->  v.(lbl.lbl_pos) <- p ;  change_rec l 
  | [] -> () in
  change_rec l;
  Array.to_list v
@

<<function Parmatch.simple_match_args>>=
let simple_match_args p1 p2 =
  match p2.pat_desc with
    Tpat_construct(cstr, args) -> args
  | Tpat_tuple(args)  -> args
  | Tpat_record(args) ->  set_fields (record_num_fields p1) args
  | (Tpat_any | Tpat_var(_)) ->
      begin match p1.pat_desc with
        Tpat_construct(_, args) -> omega_list args
      | Tpat_tuple(args) -> omega_list args
      | Tpat_record(args) ->  omega_list args
      | _ -> []
      end
  | _ -> []
@

<<function Parmatch.simple_pat>>=
(*
  Computes the discriminating pattern for matching by the first
  column of pss, that is:
     checks for a tuple or a record when q is a variable.
*)

let rec simple_pat q pss = match pss with
    ({pat_desc = Tpat_alias(p,_)}::ps)::pss -> 
        simple_pat q ((p::ps)::pss)
  | ({pat_desc = Tpat_or(p1,p2)}::ps)::pss ->
        simple_pat q ((p1::ps)::(p2::ps)::pss)
  | ({pat_desc = (Tpat_any | Tpat_var(_))}::_)::pss ->
        simple_pat q pss
  | (({pat_desc = Tpat_tuple(args)} as p)::_)::_ ->
        make_pat (Tpat_tuple(omega_list args)) p.pat_type
  | (({pat_desc = Tpat_record(args)} as p)::_)::pss ->
        make_pat (Tpat_record (List.map (fun lbl -> (lbl,omega)) (record_labels p)))
                 p.pat_type
  | _ -> q
@

<<function Parmatch.filter_one>>=
let filter_one q pss =
  let rec filter_rec = function
      ({pat_desc = Tpat_alias(p,_)}::ps)::pss -> 
        filter_rec ((p::ps)::pss)
    | ({pat_desc = Tpat_or(p1,p2)}::ps)::pss ->
        filter_rec ((p1::ps)::(p2::ps)::pss)
    | (p::ps)::pss ->
        if simple_match q p
        then (simple_match_args q p @ ps) :: filter_rec pss
        else filter_rec pss
    | _ -> [] in
  filter_rec pss
@

<<function Parmatch.filter_extra>>=
let filter_extra pss =
  let rec filter_rec = function
      ({pat_desc = Tpat_alias(p,_)}::ps)::pss -> 
        filter_rec ((p::ps)::pss)
    | ({pat_desc = Tpat_or(p1,p2)}::ps)::pss ->
        filter_rec ((p1::ps)::(p2::ps)::pss)
    | ({pat_desc = (Tpat_any | Tpat_var(_))} :: qs) :: pss ->
        qs :: filter_rec pss
    | _::pss  -> filter_rec pss
    | [] -> [] in
  filter_rec pss
@

<<function Parmatch.filter_all>>=
let filter_all pat0 pss =

  let rec insert q qs env =
    match env with
      [] -> [q, [simple_match_args q q @ qs]]
    | ((p,pss) as c)::env ->
        if simple_match q p
        then (p, ((simple_match_args p q @ qs) :: pss)) :: env
        else c :: insert q qs env in

  let rec filter_rec env = function
    ({pat_desc = Tpat_alias(p,_)}::ps)::pss ->
      filter_rec env ((p::ps)::pss)
  | ({pat_desc = Tpat_or(p1,p2)}::ps)::pss ->
      filter_rec env ((p1::ps)::(p2::ps)::pss)
  | ({pat_desc = (Tpat_any | Tpat_var(_))}::_)::pss ->
      filter_rec env pss
  | (p::ps)::pss ->
      filter_rec (insert p ps env) pss
  | _ -> env

  and filter_omega env = function
    ({pat_desc = Tpat_alias(p,_)}::ps)::pss ->
      filter_omega env ((p::ps)::pss)
  | ({pat_desc = Tpat_or(p1,p2)}::ps)::pss ->
      filter_omega env ((p1::ps)::(p2::ps)::pss)
  | ({pat_desc = (Tpat_any | Tpat_var(_))}::ps)::pss ->
      filter_omega
        (List.map (fun (q,qss) -> (q,(simple_match_args q omega @ ps) :: qss)) env)
        pss
  | _::pss -> filter_omega env pss
  | [] -> env in
        
  filter_omega
    (filter_rec
      (match pat0.pat_desc with
        (Tpat_record(_) | Tpat_tuple(_)) -> [pat0,[]]
      | _ -> [])
      pss)
    pss
@

<<function Parmatch.full_match>>=
let full_match env =
  match env with
    ({pat_desc = Tpat_construct(c,_)},_) :: _ ->
      List.length env = c.cstr_consts + c.cstr_nonconsts
  | ({pat_desc = Tpat_constant(Const_char _)},_) :: _ ->
      List.length env = 256
  | ({pat_desc = Tpat_constant(_)},_) :: _ -> false
  | ({pat_desc = Tpat_tuple(_)},_) :: _ -> true
  | ({pat_desc = Tpat_record(_)},_) :: _ -> true
  | _ -> fatal_error "Parmatch.full_match"
@

<<function Parmatch.satisfiable>>=
(*
  Is the last row of pattern matrix pss + qs satisfiable ?
        That is :
  Does there List.exists at least one value vector, es such that :
   1/ for all ps in pss ps # es (ps and es are not compatible)
   2/ qs <= es                  (es matches qs)
*)

let rec satisfiable pss qs =
  match pss with
    [] -> true
  | _ ->
    match qs with
      [] -> false
    | {pat_desc = Tpat_or(q1,q2)}::qs ->
        satisfiable pss (q1::qs) or satisfiable pss (q2::qs)
    | {pat_desc = Tpat_alias(q,_)}::qs ->
        satisfiable pss (q::qs)
    | {pat_desc = (Tpat_any | Tpat_var(_))}::qs ->
        let q0 = simple_pat omega pss in     
        begin match filter_all q0 pss with
          (* first column of pss is made of variables only *)
          [] -> satisfiable (filter_extra pss) qs 
        | constrs ->          
            let try_non_omega (p,pss) =
              satisfiable pss (simple_match_args p omega @ qs)  in
            if full_match constrs
            then List.exists try_non_omega constrs
            else satisfiable (filter_extra pss) qs or
                 List.exists try_non_omega constrs
        end
    | q::qs ->
        let q0 = simple_pat q pss in
        satisfiable (filter_one q0 pss) (simple_match_args q0 q @ qs)
@

<<function Parmatch.initial_matrix>>=
let rec initial_matrix = function
    [] -> []
  | (pat, act) :: rem ->
       if has_guard act
       then initial_matrix rem
       else [pat] :: initial_matrix rem
@

<<function Parmatch.get_mins>>=
let get_mins ps =
  let rec select_rec r = function
    [] -> r
  | p::ps ->
      if List.exists (fun p0 -> le_pats p0 p) ps
      then select_rec r ps
      else select_rec (p::r) ps in
  select_rec [] (select_rec [] ps)
@

<<function Parmatch.check_partial>>=
let check_partial loc casel =
  let pss = get_mins (initial_matrix casel) in
  if match pss with
      []     -> true
    | ps::_  -> satisfiable pss (List.map (fun _ -> omega) ps)
  then Location.print_warning loc "this pattern-matching is not exhaustive"
@

<<function Parmatch.location_of_clause>>=
let location_of_clause = function
    pat :: _ -> pat.pat_loc
  | _ -> fatal_error "Parmatch.location_of_clause"
@

<<function Parmatch.check_unused>>=
let check_unused casel =
  let prefs =   
    List.fold_right
      (fun (pat,act as clause) r ->
         if has_guard act
         then ([], ([pat], act)) :: r
         else ([], ([pat], act)) :: 
              List.map (fun (pss,clause) -> [pat]::pss,clause) r)
      casel [] in
  List.iter
    (fun (pss, ((qs, _) as clause)) ->
      if not (satisfiable pss qs) then
        Location.print_warning (location_of_clause qs)
                                "this match case is unused.")
    prefs
@


%-------------------------------------------------------------

<<./typing/parmatch.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Detection of partial matches and unused match cases. *)

open Misc
open Asttypes
open Types
open Typedtree


<<function Parmatch.make_pat>>

<<constant Parmatch.omega>>

<<function Parmatch.omegas>>

<<function Parmatch.omega_list>>

<<function Parmatch.has_guard>>

<<function Parmatch.simple_match>>

<<function Parmatch.record_labels>>

<<function Parmatch.record_num_fields>>

<<function Parmatch.set_fields>>

<<function Parmatch.simple_match_args>>

<<function Parmatch.simple_pat>>

<<function Parmatch.filter_one>>

<<function Parmatch.filter_extra>>

<<function Parmatch.filter_all>>

      
<<function Parmatch.full_match>>

<<function Parmatch.satisfiable>>

<<function Parmatch.initial_matrix>>

let rec le_pat p q =
  match (p.pat_desc, q.pat_desc) with
    (Tpat_var _ | Tpat_any), _ -> true
  | Tpat_alias(p,_), _ -> le_pat p q
  | _, Tpat_alias(q,_) -> le_pat p q
  | Tpat_or(p1,p2), _ -> le_pat p1 q or le_pat p2 q
  | _, Tpat_or(q1,q2) -> le_pat p q1 & le_pat p q2
  | Tpat_constant(c1), Tpat_constant(c2) -> c1 = c2
  | Tpat_construct(c1,ps), Tpat_construct(c2,qs) ->
      c1.cstr_tag = c2.cstr_tag & le_pats ps qs
  | Tpat_tuple(ps), Tpat_tuple(qs) -> le_pats ps qs
  | Tpat_record(l1), Tpat_record(l2) ->
     let size = record_num_fields p in
     le_pats (set_fields size l1) (set_fields size l2)
  | _, _ -> false  

and le_pats ps qs =
  match ps,qs with
    p::ps, q::qs -> le_pat p q & le_pats ps qs
  | _, _         -> true

<<function Parmatch.get_mins>>

<<function Parmatch.check_partial>>

<<function Parmatch.location_of_clause>>

<<function Parmatch.check_unused>>
@


\subsection*{[[./typing/typetexp.mli]]}


<<signature Typetexp.transl_type_scheme>>=
val transl_type_scheme:
        Env.t -> Parsetree.core_type -> Types.type_expr
@

<<signature Typetexp.reset_type_variables>>=
val reset_type_variables: unit -> unit
@

<<signature Typetexp.enter_type_variable>>=
val enter_type_variable: string -> Types.type_expr
@

<<exception Typetexp.Already_bound>>=
exception Already_bound
@



%-------------------------------------------------------------

<<./typing/typetexp.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

<<signature Typetexp.transl_simple_type>>
<<signature Typetexp.transl_type_scheme>>
<<signature Typetexp.reset_type_variables>>
<<signature Typetexp.enter_type_variable>>

<<exception Typetexp.Already_bound>>

<<type Typetexp.error>>

<<exception Typetexp.Error>>

<<signature Typetexp.report_error>>
@


\subsection*{[[./typing/typetexp.ml]]}


<<constant Typetexp.type_variables>>=
(* Translation of type expressions *)

let type_variables = ref (Tbl.empty : (string, Types.type_expr) Tbl.t)
@

<<function Typetexp.reset_type_variables>>=
let reset_type_variables () =
  type_variables := Tbl.empty
@

<<function Typetexp.enter_type_variable>>=
let enter_type_variable name =
  try
    Tbl.find name !type_variables; raise Already_bound
  with Not_found ->
    let v = new_global_var() in
    type_variables := Tbl.add name v !type_variables;
    v
@

<<function Typetexp.transl_simple_type>>=
let rec transl_simple_type env fixed styp =
  match styp.ptyp_desc with
    Ptyp_var name ->
      begin try
        Tbl.find name !type_variables
      with Not_found ->
        if fixed then
          raise(Error(styp.ptyp_loc, Unbound_type_variable name))
        else begin
          let v = new_global_var() in
          type_variables := Tbl.add name v !type_variables;
          v
        end
      end
  | Ptyp_arrow(st1, st2) ->
      Tarrow(transl_simple_type env fixed st1,
             transl_simple_type env fixed st2)
  | Ptyp_tuple stl ->
      Ttuple(List.map (transl_simple_type env fixed) stl)
  | Ptyp_constr(lid, stl) ->
      let (path, decl) =
        try
          Env.lookup_type lid env
        with Not_found ->
          raise(Error(styp.ptyp_loc, Unbound_type_constructor lid)) in
      if List.length stl <> decl.type_arity then
        raise(Error(styp.ptyp_loc, Type_arity_mismatch(lid, decl.type_arity,
                                                           List.length stl)));
      Tconstr(path, List.map (transl_simple_type env fixed) stl)
@

<<function Typetexp.transl_type_scheme>>=
let transl_type_scheme env styp =
  reset_type_variables();
  begin_def();
  let typ = transl_simple_type env false styp in
  end_def();
  generalize typ;
  typ
@



%-------------------------------------------------------------

<<./typing/typetexp.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Typechecking of type expressions for the core language *)

open Parsetree
open Types
open Ctype

<<exception Typetexp.Already_bound>>

<<type Typetexp.error>>

<<exception Typetexp.Error>>

<<constant Typetexp.type_variables>>

<<function Typetexp.reset_type_variables>>

<<function Typetexp.enter_type_variable>>

<<function Typetexp.transl_simple_type>>

<<function Typetexp.transl_type_scheme>>

(* Error report *)

open Format
open Printtyp

<<function Typetexp.report_error>>
@


\subsection*{[[./typing/includemod.mli]]}

<<signature Includemod.modtypes>>=
val modtypes: Env.t -> module_type -> module_type -> module_coercion
@

<<signature Includemod.signatures>>=
val signatures: Env.t -> signature -> signature -> module_coercion
@

<<signature Includemod.compunit>>=
val compunit: string -> signature -> string -> signature -> module_coercion
@




%-------------------------------------------------------------

<<./typing/includemod.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Inclusion checks for the module language *)

open Types
open Typedtree

<<signature Includemod.modtypes>>
<<signature Includemod.signatures>>
<<signature Includemod.compunit>>

<<type Includemod.error>>

<<exception Includemod.Error>>

<<signature Includemod.report_error>>
@


\subsection*{[[./typing/includemod.ml]]}


<<function Includemod.value_descriptions>>=
(* Inclusion between value descriptions *)

let value_descriptions env id vd1 vd2 =
  try
    Includecore.value_descriptions env vd1 vd2
  with Includecore.Dont_match ->
    raise(Error[Value_descriptions(id, vd1, vd2)])
@

<<function Includemod.type_declarations>>=
(* Inclusion between type declarations *)

let type_declarations env id decl1 decl2 =
  if Includecore.type_declarations env id decl1 decl2
  then ()
  else raise(Error[Type_declarations(id, decl1, decl2)])
@

<<function Includemod.exception_declarations>>=
(* Inclusion between exception declarations *)

let exception_declarations env id decl1 decl2 =
  if Includecore.exception_declarations env decl1 decl2
  then ()
  else raise(Error[Exception_declarations(id, decl1, decl2)])
@

<<exception Includemod.Dont_match>>=
(* Expand a module type identifier when possible *)

exception Dont_match
@

<<function Includemod.expand_module_path>>=
let expand_module_path env path =
  failwith "expand_module_path:TODO"
(*
  try
    match Env.find_modtype path env with
      Tmodtype_abstract -> raise Dont_match
    | Tmodtype_manifest mty -> mty
  with Not_found ->
    raise Dont_match
*)
@

<<type Includemod.field_desc>>=
(* Extract name, kind and ident from a signature item *)

type field_desc =
    Field_value of string
  | Field_type of string
  | Field_exception of string
  | Field_module of string
  | Field_modtype of string
@

<<function Includemod.item_ident_name>>=
let item_ident_name = function
    Tsig_value(id, _) -> (id, Field_value(Ident.name id))
  | Tsig_type(id, _) -> (id, Field_type(Ident.name id))
  | Tsig_exception(id, _) -> (id, Field_exception(Ident.name id))
  | Tsig_module(id, _) -> (id, Field_module(Ident.name id))
@

<<function Includemod.simplify_structure_coercion>>=
(* Simplify a structure coercion *)

let simplify_structure_coercion cc =
  let pos = ref 0 in
  try
    List.iter
      (fun (n, c) ->
        if n <> !pos or c <> Tcoerce_none then raise Exit;
        incr pos)
      cc;
    Tcoerce_none
  with Exit ->
    Tcoerce_structure cc
@

<<function Includemod.check_modtype_inclusion>>=
(* Simplified inclusion check between module types *)

let check_modtype_inclusion env mty1 mty2 =
  try
    modtypes env mty1 mty2; ()
  with Error reasons ->
    raise Not_found
@

<<toplevel Includemod._1>>=
let _ = Env.check_modtype_inclusion := check_modtype_inclusion
@

<<function Includemod.compunit>>=
(* Check that an implementation of a compilation unit meets its
   interface. *)

let compunit impl_name impl_sig intf_name intf_sig =
  try
    signatures Env.initial impl_sig intf_sig
  with Error reasons ->
    raise(Error(Interface_mismatch(impl_name, intf_name) :: reasons))
@



%-------------------------------------------------------------

<<./typing/includemod.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Inclusion checks for the module language *)

open Misc
open Path
open Types
open Typedtree


<<type Includemod.error>>

<<exception Includemod.Error>>

(* All functions "blah env x1 x2" check that x1 is included in x2,
   i.e. that x1 is the type of an implementation that fulfills the
   specification x2. If not, Error is raised with a backtrace of the error. *)

<<function Includemod.value_descriptions>>

<<function Includemod.type_declarations>>

<<function Includemod.exception_declarations>>

<<exception Includemod.Dont_match>>

<<function Includemod.expand_module_path>>

<<type Includemod.field_desc>>

<<function Includemod.item_ident_name>>

<<function Includemod.simplify_structure_coercion>>

(* Inclusion between module types. 
   Return the restriction that transforms a value of the smaller type
   into a value of the bigger type. *)

let rec modtypes env mty1 mty2 =
  try
    try_modtypes env mty1 mty2
  with 
    Dont_match ->
      raise(Error[Module_types(mty1, mty2)])
  | Error reasons ->
      raise(Error(Module_types(mty1, mty2) :: reasons))

and try_modtypes env mty1 mty2 =
  match (mty1, mty2) with
    (Tmty_ident p1, Tmty_ident p2) when Path.same p1 p2 ->
      Tcoerce_none
  | (Tmty_ident p1, _) ->
      try_modtypes env (expand_module_path env p1) mty2
  | (_, Tmty_ident p2) ->
      try_modtypes env mty1 (expand_module_path env p2)
  | (Tmty_signature sig1, Tmty_signature sig2) ->
      signatures env sig1 sig2
  | (_, _) ->
      raise Dont_match

(* Inclusion between signatures *)

and signatures env sig1 sig2 =
  (* Environment used to check inclusion of components *)
  let new_env =
    Env.add_signature sig1 env in
  (* Build a table of the components of sig1, along with their positions.
     The table is indexed by kind and name of component *)
  let rec build_component_table pos tbl = function
      [] -> tbl
    | item :: rem ->
        let (id, name) = item_ident_name item in
        let nextpos =
          match item with
            Tsig_value(_,{val_prim = None})
          | Tsig_exception(_,_)
          | Tsig_module(_,_) -> pos+1
          | Tsig_value(_,{val_prim = Some _})
          | Tsig_type(_,_)
          -> pos in
        build_component_table nextpos
                              (Tbl.add name (id, item, pos) tbl) rem in
  let comps1 =
    build_component_table 0 Tbl.empty sig1 in
  (* Pair each component of sig2 with a component of sig1,
     identifying the names along the way.
     Return a coercion list indicating, for all run-time components
     of sig2, the position of the matching run-time components of sig1
     and the coercion to be applied to it. *)
  let rec pair_components paired unpaired = function
      [] ->
        begin match unpaired with
            [] -> signature_components new_env (List.rev paired)
          | _  -> raise(Error unpaired)
        end
    | item2 :: rem ->
        let (id2, name2) = item_ident_name item2 in
        begin try
          let (id1, item1, pos1) = Tbl.find name2 comps1 in
          Ident.identify id1 id2
            (fun () ->
              pair_components ((item1, item2, pos1) :: paired) unpaired rem)
        with Not_found ->
          pair_components paired (Missing_field id2 :: unpaired) rem
        end in
  (* Do the pairing and checking, and return the final coercion *)
  simplify_structure_coercion(pair_components [] [] sig2)

(* Inclusion between signature components *)

and signature_components env = function
    [] -> []
  | (Tsig_value(id1, valdecl1), Tsig_value(id2, valdecl2), pos) :: rem ->
      let cc = value_descriptions env id1 valdecl1 valdecl2 in
      begin match valdecl2.val_prim with
        None -> (pos, cc) :: signature_components env rem
      | Some p -> signature_components env rem
      end
  | (Tsig_type(id1, tydecl1), Tsig_type(id2, tydecl2), pos) :: rem ->
      type_declarations env id1 tydecl1 tydecl2;
      signature_components env rem
  | (Tsig_exception(id1, excdecl1), Tsig_exception(id2, excdecl2), pos)
    :: rem ->
      exception_declarations env id1 excdecl1 excdecl2;
      (pos, Tcoerce_none) :: signature_components env rem
  | (Tsig_module(id1, mty1), Tsig_module(id2, mty2), pos) :: rem ->
      let cc = modtypes env mty1 mty2 in
      (pos, cc) :: signature_components env rem
  | _ ->
      fatal_error "Includemod.signature_components"

<<function Includemod.check_modtype_inclusion>>

<<toplevel Includemod._1>>

<<function Includemod.compunit>>

(* Error report *)

open Format
open Printtyp

<<function Includemod.include_err>>

<<function Includemod.report_error>>

@


\subsection*{[[./typing/typedecl.mli]]}




<<signature Typedecl.transl_with_constraint>>=
val transl_with_constraint:
        Env.t -> Parsetree.type_declaration -> type_declaration
@



%-------------------------------------------------------------

<<./typing/typedecl.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Typing of type definitions and primitive definitions *)

open Types
open Typedtree

<<signature Typedecl.transl_type_decl>>
<<signature Typedecl.transl_exception>>

<<signature Typedecl.transl_value_decl>>

<<signature Typedecl.transl_with_constraint>>
    
<<type Typedecl.error>>

<<exception Typedecl.Error>>

<<signature Typedecl.report_error>>
@


\subsection*{[[./typing/typedecl.ml]]}


<<function Typedecl.enter_types>>=
(* Enter all declared types in the environment as abstract types *)

let rec enter_types env = function
    [] ->
      ([], env)
  | (name, sdecl) :: srem ->
      let decl =
        { type_params = []; (*this field is unused when kind = Type_abstract*)
          type_arity = List.length sdecl.ptype_params;
          type_kind = Type_abstract;
          type_manifest = None } in
      let (id, extenv) = Env.enter_type name decl env in
      let (rem_id, final_env) = enter_types extenv srem in
      (id :: rem_id, final_env)
@

<<function Typedecl.transl_declaration>>=
let transl_declaration env (name, sdecl) id =
  Ctype.begin_def();
  reset_type_variables();
  let params =
    try
      List.map enter_type_variable sdecl.ptype_params
    with Already_bound ->
      raise(Error(sdecl.ptype_loc, Repeated_parameter)) in
  let decl =
    { type_params = params;
      type_arity = List.length params;
      type_kind =
        begin match sdecl.ptype_kind with
          Ptype_abstract ->
            Type_abstract
        | Ptype_variant cstrs ->
            let all_constrs = ref StringSet.empty in
            List.iter
              (fun (name, args) ->
                if StringSet.mem name !all_constrs then
                  raise(Error(sdecl.ptype_loc, Duplicate_constructor name));
                all_constrs := StringSet.add name !all_constrs)
              cstrs;
            if List.length cstrs > Config.max_tag then
              raise(Error(sdecl.ptype_loc, Too_many_constructors));
            Type_variant(List.map
              (fun (name, args) ->
                      (name, List.map (transl_simple_type env true) args))
              cstrs)
        | Ptype_record lbls ->
            let all_labels = ref StringSet.empty in
            List.iter
              (fun (name, mut, arg) ->
                if StringSet.mem name !all_labels then
                  raise(Error(sdecl.ptype_loc, Duplicate_label name));
                all_labels := StringSet.add name !all_labels)
              lbls;
            Type_record(List.map
              (fun (name, mut, arg) ->
                      (name, mut, transl_simple_type env true arg))
              lbls)
        end;
      type_manifest =
        begin match sdecl.ptype_manifest with
          None -> None
        | Some sty -> Some(transl_simple_type env true sty)
        end } in
  Ctype.end_def();
  List.iter Ctype.generalize params;
  (* If both a variant/record definition and a type equation are given,
     need to check that the equation refers to a type of the same kind
     with the same constructors and labels *)
  begin match decl with
    {type_kind = (Type_variant _ | Type_record _); type_manifest = Some ty} ->
      begin match ty with
        Tconstr(path, args) ->
          begin try
            let decl' = Env.find_type path env in
            if args = params & Includecore.type_declarations env id decl decl'
            then ()
            else raise(Error(sdecl.ptype_loc, Definition_mismatch ty))
          with Not_found ->
            raise(Error(sdecl.ptype_loc, Definition_mismatch ty))
          end
      | _ -> raise(Error(sdecl.ptype_loc, Definition_mismatch ty))
      end
  | _ -> ()
  end;
  (id, decl)
@

<<function Typedecl.check_recursive_abbrev>>=
(* Check for recursive abbrevs *)

let check_recursive_abbrev env (name, sdecl) (id, decl) =
  match decl.type_manifest with
    Some ty ->
      if Ctype.free_type_ident env [id] ty
      then raise(Error(sdecl.ptype_loc, Recursive_abbrev name))
  | _ -> ()
@

<<function Typedecl.transl_type_decl>>=
(* Translate a set of mutually recursive type declarations *)

let transl_type_decl env name_sdecl_list =
  Ctype.reset_def();
  let decls =
    match name_sdecl_list with
      [(name, {ptype_kind = Ptype_abstract}) as name_sdecl] ->
        (* No recursion involved, use original env for translation *)
        let id = Ident.create name in
        [transl_declaration env name_sdecl id]
    | _ ->
        (* Enter the types as abstract *)
        let (id_list, temp_env) = enter_types env name_sdecl_list in
        (* Translate each declaration *)
        List.map2 (transl_declaration temp_env) name_sdecl_list id_list in
  (* Build the final env *)
  let newenv =
    List.fold_right
      (fun (id, decl) env -> Env.add_type id decl env)
      decls env in
  (* Check for recursive abbrevs *)
  List.iter2 (check_recursive_abbrev newenv) name_sdecl_list decls;
  (* Done *)
  (decls, newenv)
@

<<function Typedecl.transl_exception>>=
(* Translate an exception declaration *)

let transl_exception env excdecl =
  Ctype.reset_def();
  reset_type_variables();
  List.map (transl_simple_type env true) excdecl
@

<<function Typedecl.transl_value_decl>>=
(* Translate a value declaration *)

let transl_value_decl env valdecl =
  Ctype.reset_def();
  let ty = Typetexp.transl_type_scheme env valdecl.pval_type in
  { val_type = ty;
    val_prim = Primitive.parse_declaration (Ctype.arity ty) valdecl.pval_prim }
@

<<function Typedecl.transl_with_constraint>>=
(* Translate a "with" constraint -- much simplified version of
    transl_type_decl. *)

let transl_with_constraint env sdecl =
  Ctype.reset_def();
  Ctype.begin_def();
  reset_type_variables();
  let params =
    try
      List.map enter_type_variable sdecl.ptype_params
    with Already_bound ->
      raise(Error(sdecl.ptype_loc, Repeated_parameter)) in
  Ctype.end_def();
  List.iter Ctype.generalize params;
  { type_params = params;
    type_arity = List.length params;
    type_kind = Type_abstract;
    type_manifest =
        begin match sdecl.ptype_manifest with
          None -> None
        | Some sty -> Some(transl_simple_type env true sty)
        end }
@



%-------------------------------------------------------------

<<./typing/typedecl.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Typing of type definitions *)

open Parsetree
open Types
open Typedtree
open Typetexp


<<type Typedecl.error>>

<<exception Typedecl.Error>>

<<function Typedecl.enter_types>>

(* Translate one type declaration *)

module StringSet = Set

<<function Typedecl.transl_declaration>>

<<function Typedecl.check_recursive_abbrev>>

<<function Typedecl.transl_type_decl>>

<<function Typedecl.transl_exception>>

<<function Typedecl.transl_value_decl>>

<<function Typedecl.transl_with_constraint>>

(* Error report *)

open Format

<<function Typedecl.report_error>>

@


\subsection*{[[./typing/typecore.mli]]}





%-------------------------------------------------------------

<<./typing/typecore.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Type inference for the core language *)

open Asttypes
open Types

<<signature Typecore.type_binding>>
<<signature Typecore.type_expression>>
        
<<type Typecore.error>>

<<exception Typecore.Error>>

<<signature Typecore.report_error>>
@


\subsection*{[[./typing/typecore.ml]]}



<<function Typecore.unify_pat>>=
(* Typing of patterns *)

let unify_pat env pat expected_ty =
  try
    unify env pat.pat_type expected_ty
  with Unify ->
    raise(Error(pat.pat_loc, Pattern_type_clash(pat.pat_type, expected_ty)))
@

<<constant Typecore.pattern_variables>>=
let pattern_variables = ref ([]: (Ident.t * type_expr) list)
@

<<function Typecore.enter_variable>>=
let enter_variable loc name ty =
  if List.exists (fun (id, ty) -> Ident.name id = name) !pattern_variables
  then raise(Error(loc, Multiply_bound_variable));
  let id = Ident.create name in
  pattern_variables := (id, ty) :: !pattern_variables;
  id
@

<<function Typecore.type_pat>>=
let rec type_pat env sp =
  match sp.ppat_desc with
    Ppat_any ->
      { pat_desc = Tpat_any;
        pat_loc = sp.ppat_loc;
        pat_type = newvar() }
  | Ppat_var name ->
      let ty = newvar() in
      let id = enter_variable sp.ppat_loc name ty in
      { pat_desc = Tpat_var id;
        pat_loc = sp.ppat_loc;
        pat_type = ty }
  | Ppat_alias(sp, name) ->
      let p = type_pat env sp in
      let id = enter_variable sp.ppat_loc name p.pat_type in
      { pat_desc = Tpat_alias(p, id);
        pat_loc = sp.ppat_loc;
        pat_type = p.pat_type }
  | Ppat_constant cst ->
      { pat_desc = Tpat_constant cst;
        pat_loc = sp.ppat_loc;
        pat_type = type_constant cst }
  | Ppat_tuple spl ->
      let pl = List.map (type_pat env) spl in
      { pat_desc = Tpat_tuple pl;
        pat_loc = sp.ppat_loc;
        pat_type = Ttuple(List.map (fun p -> p.pat_type) pl) }
  | Ppat_construct(lid, sarg) ->
      let constr =
        try
          Env.lookup_constructor lid env
        with Not_found ->
          raise(Error(sp.ppat_loc, Unbound_constructor lid)) in
      let sargs =
        match sarg with
          None -> []
        | Some {ppat_desc = Ppat_tuple spl} when constr.cstr_arity > 1 -> spl
        | Some({ppat_desc = Ppat_any} as sp) when constr.cstr_arity > 1 ->
            replicate_list sp constr.cstr_arity
        | Some sp -> [sp] in
      if List.length sargs <> constr.cstr_arity then
        raise(Error(sp.ppat_loc, Constructor_arity_mismatch(lid,
                                     constr.cstr_arity, List.length sargs)));
      let args = List.map (type_pat env) sargs in
      let (ty_args, ty_res) = instance_constructor constr in
      List.iter2 (unify_pat env) args ty_args;
      { pat_desc = Tpat_construct(constr, args);
        pat_loc = sp.ppat_loc;
        pat_type = ty_res }
  | Ppat_record lid_sp_list ->
      let ty = newvar() in
      let type_label_pat (lid, sarg) =
        let label =
          try
            Env.lookup_label lid env
          with Not_found ->
            raise(Error(sp.ppat_loc, Unbound_label lid)) in
        let (ty_arg, ty_res) = instance_label label in
        begin try
          unify env ty_res ty
        with Unify ->
          raise(Error(sp.ppat_loc, Label_mismatch(lid, ty_res, ty)))
        end;
        let arg = type_pat env sarg in
        unify_pat env arg ty_arg;
        (label, arg)
      in
      { pat_desc = Tpat_record(List.map type_label_pat lid_sp_list);
        pat_loc = sp.ppat_loc;
        pat_type = ty }
  | Ppat_or(sp1, sp2) ->
      let initial_pattern_variables = !pattern_variables in
      let p1 = type_pat env sp1 in
      let p2 = type_pat env sp2 in
      if !pattern_variables != initial_pattern_variables then
        raise(Error(sp.ppat_loc, Orpat_not_closed));
      unify_pat env p2 p1.pat_type;
      { pat_desc = Tpat_or(p1, p2);
        pat_loc = sp.ppat_loc;
        pat_type = p1.pat_type }
  | Ppat_constraint(sp, sty) ->
      let p = type_pat env sp in
      let ty = Typetexp.transl_simple_type env false sty in
      unify_pat env p ty;
      p
@

<<function Typecore.add_pattern_variables>>=
let add_pattern_variables env =
  let pv = !pattern_variables in
  pattern_variables := [];
  List.fold_right
    (fun (id, ty) env ->
      Env.add_value id {val_type = ty; val_prim = None} env)
    pv env
@

<<function Typecore.type_pattern>>=
let type_pattern env spat =
  pattern_variables := [];
  let pat = type_pat env spat in
  let new_env = add_pattern_variables env in
  (pat, new_env)
@

<<function Typecore.type_pattern_list>>=
let type_pattern_list env spatl =
  pattern_variables := [];
  let patl = List.map (type_pat env) spatl in
  let new_env = add_pattern_variables env in
  (patl, new_env)
@

<<function Typecore.is_nonexpansive>>=
(* Generalization criterion for expressions *)

let rec is_nonexpansive exp =
  match exp.exp_desc with
    Texp_ident(_,_) -> true
  | Texp_constant _ -> true
  | Texp_let(rec_flag, pat_exp_list, body) ->
      List.for_all (fun (pat, exp) -> is_nonexpansive exp) pat_exp_list &
      is_nonexpansive body
  | Texp_function _ -> true
  | Texp_tuple el ->
      List.for_all is_nonexpansive el
  | Texp_construct(_, el) ->
      List.for_all is_nonexpansive el
  | Texp_record lbl_exp_list ->
      List.for_all (fun (lbl, exp) -> lbl.lbl_mut = Immutable & is_nonexpansive exp)
              lbl_exp_list
  | Texp_field(exp, lbl) -> is_nonexpansive exp
  | Texp_array [] -> true
  | _ -> false
@


<<function Typecore.unify_exp>>=
(* Typing of expressions *)

let unify_exp env exp expected_ty =
  try
    unify env exp.exp_type expected_ty
  with Unify ->
    raise(Error(exp.exp_loc, Expr_type_clash(exp.exp_type, expected_ty)))
@

<<function Typecore.type_binding>>=
(* Typing of toplevel bindings *)

let type_binding env rec_flag spat_sexp_list =
  reset_def();
  Typetexp.reset_type_variables();
  type_let env rec_flag spat_sexp_list
@

<<function Typecore.type_expression>>=
(* Typing of toplevel expressions *)

let type_expression env sexp =
  reset_def();
  Typetexp.reset_type_variables();
  begin_def();
  let exp = type_exp env sexp in
  end_def();
  if is_nonexpansive exp then generalize exp.exp_type;
  exp
@



%-------------------------------------------------------------

<<./typing/typecore.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Typechecking for the core language *)

open Misc
open Asttypes
open Parsetree
open Types
open Typedtree
open Ctype


<<type Typecore.error>>

<<exception Typecore.Error>>

<<function Typecore.type_constant>>

<<function Typecore.unify_pat>>

<<constant Typecore.pattern_variables>>

<<function Typecore.enter_variable>>

<<function Typecore.type_pat>>

<<function Typecore.add_pattern_variables>>

<<function Typecore.type_pattern>>

<<function Typecore.type_pattern_list>>

<<function Typecore.is_nonexpansive>>

<<function Typecore.type_format>>

<<function Typecore.unify_exp>>

let rec type_exp env sexp =
  match sexp.pexp_desc with
    Pexp_ident lid ->
      begin try
        let (path, desc) = Env.lookup_value lid env in
        { exp_desc = Texp_ident(path, desc);
          exp_loc = sexp.pexp_loc;
          exp_type = instance desc.val_type }
      with Not_found ->
        raise(Error(sexp.pexp_loc, Unbound_value lid))
      end
  | Pexp_constant cst ->
      { exp_desc = Texp_constant cst;
        exp_loc = sexp.pexp_loc;
        exp_type = type_constant cst }
  | Pexp_let(rec_flag, spat_sexp_list, sbody) ->
      let (pat_exp_list, new_env) = type_let env rec_flag spat_sexp_list in
      let body = type_exp new_env sbody in
      { exp_desc = Texp_let(rec_flag, pat_exp_list, body);
        exp_loc = sexp.pexp_loc;
        exp_type = body.exp_type }
  | Pexp_function caselist ->
      let ty_arg = newvar() and ty_res = newvar() in
      let cases = type_cases env ty_arg ty_res caselist in
      Parmatch.check_unused cases;
      Parmatch.check_partial sexp.pexp_loc cases;
      { exp_desc = Texp_function cases;
        exp_loc = sexp.pexp_loc;
        exp_type = Tarrow(ty_arg, ty_res) }
  | Pexp_apply(sfunct, sargs) ->
      let funct = type_exp env sfunct in
      let rec type_args ty_fun = function
        [] ->
          ([], ty_fun)
      | sarg1 :: sargl ->
          let (ty1, ty2) =
            try
              filter_arrow env ty_fun
            with Unify ->
              raise(Error(sfunct.pexp_loc,
                          Apply_non_function funct.exp_type)) in
          let arg1 = type_expect env sarg1 ty1 in
          let (argl, ty_res) = type_args ty2 sargl in
          (arg1 :: argl, ty_res) in
      let (args, ty_res) = type_args funct.exp_type sargs in
      { exp_desc = Texp_apply(funct, args);
        exp_loc = sexp.pexp_loc;
        exp_type = ty_res }
  | Pexp_match(sarg, caselist) ->
      let arg = type_exp env sarg in
      let ty_res = newvar() in
      let cases = type_cases env arg.exp_type ty_res caselist in
      Parmatch.check_unused cases;
      Parmatch.check_partial sexp.pexp_loc cases;
      { exp_desc = Texp_match(arg, cases);
        exp_loc = sexp.pexp_loc;
        exp_type = ty_res }
  | Pexp_try(sbody, caselist) ->
      let body = type_exp env sbody in
      let cases = type_cases env Predef.type_exn body.exp_type caselist in
      Parmatch.check_unused cases;
      { exp_desc = Texp_try(body, cases);
        exp_loc = sexp.pexp_loc;
        exp_type = body.exp_type }
  | Pexp_tuple sexpl ->
      let expl = List.map (type_exp env) sexpl in
      { exp_desc = Texp_tuple expl;
        exp_loc = sexp.pexp_loc;
        exp_type = Ttuple(List.map (fun exp -> exp.exp_type) expl) }
  | Pexp_construct(lid, sarg) ->
      let constr =
        try
          Env.lookup_constructor lid env
        with Not_found ->
          raise(Error(sexp.pexp_loc, Unbound_constructor lid)) in
      let sargs =
        match sarg with
          None -> []
        | Some {pexp_desc = Pexp_tuple sel} when constr.cstr_arity > 1 -> sel
        | Some se -> [se] in
      if List.length sargs <> constr.cstr_arity then
        raise(Error(sexp.pexp_loc, Constructor_arity_mismatch(lid,
                                       constr.cstr_arity, List.length sargs)));
      let (ty_args, ty_res) = instance_constructor constr in
      let args = List.map2 (type_expect env) sargs ty_args in
      { exp_desc = Texp_construct(constr, args);
        exp_loc = sexp.pexp_loc;
        exp_type = ty_res }
  | Pexp_record lid_sexp_list ->
      let ty = newvar() in
      let num_fields = ref 0 in
      let type_label_exp (lid, sarg) =
        let label =
          try
            Env.lookup_label lid env
          with Not_found ->
            raise(Error(sexp.pexp_loc, Unbound_label lid)) in
        let (ty_arg, ty_res) = instance_label label in
        begin try
          unify env ty_res ty
        with Unify ->
          raise(Error(sexp.pexp_loc, Label_mismatch(lid, ty_res, ty)))
        end;
        let arg = type_expect env sarg ty_arg in
        num_fields := Array.length label.lbl_all;
        (label, arg) in
      let lbl_exp_list = List.map type_label_exp lid_sexp_list in
      let rec check_duplicates = function
        [] -> ()
      | (lid, sarg) :: remainder ->
          if List.mem_assoc lid remainder
          then raise(Error(sexp.pexp_loc, Label_multiply_defined lid))
          else check_duplicates remainder in
      check_duplicates lid_sexp_list;
      if List.length lid_sexp_list <> !num_fields then
        raise(Error(sexp.pexp_loc, Label_missing));
      { exp_desc = Texp_record lbl_exp_list;
        exp_loc = sexp.pexp_loc;
        exp_type = ty }
  | Pexp_field(sarg, lid) ->
      let arg = type_exp env sarg in
      let label =
        try
          Env.lookup_label lid env
        with Not_found ->
          raise(Error(sexp.pexp_loc, Unbound_label lid)) in
      let (ty_arg, ty_res) = instance_label label in
      unify_exp env arg ty_res;
      { exp_desc = Texp_field(arg, label);
        exp_loc = sexp.pexp_loc;
        exp_type = ty_arg }
  | Pexp_setfield(srecord, lid, snewval) ->
      let record = type_exp env srecord in
      let label =
        try
          Env.lookup_label lid env
        with Not_found ->
          raise(Error(sexp.pexp_loc, Unbound_label lid)) in
      if label.lbl_mut = Immutable then
        raise(Error(sexp.pexp_loc, Label_not_mutable lid));
      let (ty_arg, ty_res) = instance_label label in
      unify_exp env record ty_res;
      let newval = type_expect env snewval ty_arg in
      { exp_desc = Texp_setfield(record, label, newval);
        exp_loc = sexp.pexp_loc;
        exp_type = Predef.type_unit }
  | Pexp_array(sargl) ->
      let ty = newvar() in
      let argl = List.map (fun sarg -> type_expect env sarg ty) sargl in
      { exp_desc = Texp_array argl;
        exp_loc = sexp.pexp_loc;
        exp_type = Predef.type_array ty }
  | Pexp_ifthenelse(scond, sifso, sifnot) ->
      let cond = type_expect env scond Predef.type_bool in
      begin match sifnot with
        None ->
          let ifso = type_expect env sifso Predef.type_unit in
          { exp_desc = Texp_ifthenelse(cond, ifso, None);
            exp_loc = sexp.pexp_loc;
            exp_type = Predef.type_unit }
      | Some sexp ->
          let ifso = type_exp env sifso in
          let ifnot = type_expect env sexp ifso.exp_type in
          { exp_desc = Texp_ifthenelse(cond, ifso, Some ifnot);
            exp_loc = sexp.pexp_loc;
            exp_type = ifso.exp_type }
      end
  | Pexp_sequence(sexp1, sexp2) ->
      let exp1 = type_statement env sexp1 in
      let exp2 = type_exp env sexp2 in
      { exp_desc = Texp_sequence(exp1, exp2);
        exp_loc = sexp.pexp_loc;
        exp_type = exp2.exp_type }
  | Pexp_while(scond, sbody) ->
      let cond = type_expect env scond Predef.type_bool in
      let body = type_statement env sbody in
      { exp_desc = Texp_while(cond, body);
        exp_loc = sexp.pexp_loc;
        exp_type = Predef.type_unit }
  | Pexp_for(param, slow, shigh, dir, sbody) ->
      let low = type_expect env slow Predef.type_int in
      let high = type_expect env shigh Predef.type_int in
      let (id, new_env) =
        Env.enter_value param {val_type = Predef.type_int;
                                val_prim = None} env in
      let body = type_statement new_env sbody in
      { exp_desc = Texp_for(id, low, high, dir, body);
        exp_loc = sexp.pexp_loc;
        exp_type = Predef.type_unit }
  | Pexp_constraint(sarg, sty) ->
      let ty = Typetexp.transl_simple_type env false sty in
      let arg = type_expect env sarg ty in
      { exp_desc = arg.exp_desc;
        exp_loc = arg.exp_loc;
        exp_type = ty }
  | Pexp_when(scond, sbody) ->
      let cond = type_expect env scond Predef.type_bool in
      let body = type_exp env sbody in
      { exp_desc = Texp_when(cond, body);
        exp_loc = sexp.pexp_loc;
        exp_type = body.exp_type }
      
(* Typing of an expression with an expected type.
   Some constructs are treated specially to provide better error messages. *)

and type_expect env sexp ty_expected =
  match sexp.pexp_desc with
    Pexp_constant(Const_string s as cst) ->
      let exp =
        { exp_desc = Texp_constant cst;
          exp_loc = sexp.pexp_loc;
          exp_type =
            (* Terrible hack for format strings *)
            match Ctype.repr ty_expected with
              Tconstr(path, _) when Path.same path Predef.path_format ->
                type_format sexp.pexp_loc s
            | _ -> Predef.type_string } in
      unify_exp env exp ty_expected;
      exp
  | Pexp_let(rec_flag, spat_sexp_list, sbody) ->
      let (pat_exp_list, new_env) = type_let env rec_flag spat_sexp_list in
      let body = type_expect new_env sbody ty_expected in
      { exp_desc = Texp_let(rec_flag, pat_exp_list, body);
        exp_loc = sexp.pexp_loc;
        exp_type = body.exp_type }
  | Pexp_sequence(sexp1, sexp2) ->
      let exp1 = type_statement env sexp1 in
      let exp2 = type_expect env sexp2 ty_expected in
      { exp_desc = Texp_sequence(exp1, exp2);
        exp_loc = sexp.pexp_loc;
        exp_type = exp2.exp_type }
  | _ ->
      let exp = type_exp env sexp in
      unify_exp env exp ty_expected;
      exp

(* Typing of statements (expressions whose values are discarded) *)

and type_statement env sexp =
    let exp = type_exp env sexp in
    match Ctype.repr exp.exp_type with
      Tarrow(_, _) ->
        Location.print_warning sexp.pexp_loc
          "this function application is partial,\n\
           maybe some arguments are missing.";
        exp
    | _ -> exp

(* Typing of match cases *)

and type_cases env ty_arg ty_res caselist =
  List.map
    (fun (spat, sexp) ->
      let (pat, ext_env) = type_pattern env spat in
      unify_pat env pat ty_arg;
      let exp = type_expect ext_env sexp ty_res in
      (pat, exp))
    caselist

(* Typing of let bindings *)

and type_let env rec_flag spat_sexp_list =
  begin_def();
  let (pat_list, new_env) =
    type_pattern_list env (List.map (fun (spat, sexp) -> spat) spat_sexp_list) in
  let exp_env =
    match rec_flag with Nonrecursive -> env | Recursive -> new_env in
  let exp_list =
    List.map2
      (fun (spat, sexp) pat -> type_expect exp_env sexp pat.pat_type)
      spat_sexp_list pat_list in
  List.iter2
    (fun pat exp -> Parmatch.check_partial pat.pat_loc [pat, exp])
    pat_list exp_list;
  end_def();
  List.iter
    (fun exp -> if not (is_nonexpansive exp) then make_nongen exp.exp_type)
    exp_list;
  List.iter
    (fun exp -> generalize exp.exp_type)
    exp_list;
  (List.combine pat_list exp_list, new_env)

<<function Typecore.type_binding>>

<<function Typecore.type_expression>>

(* Error report *)

open Format
open Printtyp

<<function Typecore.report_error>>
@


\subsection*{[[./typing/typemod.mli]]}



<<signature Typemod.check_nongen_schemes>>=
val check_nongen_schemes:
        structure -> unit
@




%-------------------------------------------------------------

<<./typing/typemod.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Type-checking of the module language *)

open Types
open Typedtree

<<signature Typemod.type_structure>>
<<signature Typemod.transl_signature>>
<<signature Typemod.check_nongen_schemes>>

<<type Typemod.error>>

<<exception Typemod.Error>>

<<signature Typemod.report_error>>
@


\subsection*{[[./typing/typemod.ml]]}


<<function Typemod.extract_sig>>=
(* Extract a signature from a module type *)

let extract_sig env loc mty =
  match Mtype.scrape env mty with
    Tmty_signature sg -> sg
  | _ -> raise(Error(loc, Signature_expected))
@

<<function Typemod.extract_sig_open>>=
let extract_sig_open env loc mty =
  match Mtype.scrape env mty with
    Tmty_signature sg -> sg
  | _ -> raise(Error(loc, Structure_expected mty))
@

<<function Typemod.type_module_path>>=
(* Lookup the type of a module path *)

let type_module_path env loc lid =
  try
    Env.lookup_module lid env
  with Not_found ->
    raise(Error(loc, Unbound_module lid))
@

<<exception Typemod.Not_a_path>>=
(* Try to convert a module expression to a module path. *)

exception Not_a_path
@

<<function Typemod.path_of_module>>=
let rec path_of_module mexp =
  match mexp.mod_desc with
    Tmod_ident p -> p
  | _ -> raise Not_a_path
@

<<function Typemod.check_unique_names>>=
let check_unique_names sg =
  let type_names = ref StringSet.empty
  and module_names = ref StringSet.empty
  and modtype_names = ref StringSet.empty in
  let check cl loc set_ref name =
    if StringSet.mem name !set_ref
    then raise(Error(loc, Repeated_name(cl, name)))
    else set_ref := StringSet.add name !set_ref in
  let check_item item =
    match item.pstr_desc with
      Pstr_eval exp -> ()
    | Pstr_value(rec_flag, exps) -> ()
    | Pstr_primitive(name, desc) -> ()
    | Pstr_type name_decl_list ->
        List.iter
          (fun (name, decl) -> check "type" item.pstr_loc type_names name)
          name_decl_list
    | Pstr_exception(name, decl) -> ()
    | Pstr_module(name, smod) ->
        check "module" item.pstr_loc module_names name
    | Pstr_open lid -> () in
  List.iter check_item sg
@

<<function Typemod.check_nongen_schemes>>=
(* Check that all core type schemes in a structure are closed *)

let check_nongen_schemes str =
  List.iter 
    (function
        Tstr_value(rec_flag, pat_exp_list) ->
          List.iter
            (fun (pat, exp) ->
              if not (Ctype.closed_schema exp.exp_type) then
                raise(Error(exp.exp_loc, Non_generalizable exp.exp_type)))
            pat_exp_list
      | _ -> ())  (* Sub-structures have been checked before *)
  str
@



%-------------------------------------------------------------

<<./typing/typemod.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                         Caml Special Light                          *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1995 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Type-checking of the module language *)

open Misc
open Longident
open Path
open Parsetree
open Types
open Typedtree


<<type Typemod.error>>

<<exception Typemod.Error>>

<<function Typemod.extract_sig>>

<<function Typemod.extract_sig_open>>

<<function Typemod.type_module_path>>

(* Check and translate a module type expression *)

let rec transl_modtype env smty =
  match smty.pmty_desc with
    Pmty_ident lid ->
      failwith "transl_modtype:TODO"
(*
      begin try
        let (path, info) = Env.lookup_modtype lid env in 
        Tmty_ident path
      with Not_found ->
        raise(Error(smty.pmty_loc, Unbound_modtype lid))
      end
*)
  | Pmty_signature ssg ->
      Tmty_signature(transl_signature env ssg)
      
and transl_signature env sg =
  match sg with
    [] -> []
  | {psig_desc = Psig_value(name, sdesc)} :: srem ->
      let desc = Typedecl.transl_value_decl env sdesc in
      let (id, newenv) = Env.enter_value name desc env in
      let rem = transl_signature newenv srem in
      Tsig_value(id, desc) :: rem
  | {psig_desc = Psig_type sdecls} :: srem ->
      let (decls, newenv) = Typedecl.transl_type_decl env sdecls in
      let rem = transl_signature newenv srem in
      map_end (fun (id, info) -> Tsig_type(id, info)) decls rem
  | {psig_desc = Psig_exception(name, sarg)} :: srem ->
      let arg = Typedecl.transl_exception env sarg in
      let (id, newenv) = Env.enter_exception name arg env in
      let rem = transl_signature newenv srem in
      Tsig_exception(id, arg) :: rem
  | {psig_desc = Psig_module(name, smty)} :: srem ->
      let mty = transl_modtype env smty in
      let (id, newenv) = Env.enter_module name mty env in
      let rem = transl_signature newenv srem in
      Tsig_module(id, mty) :: rem
  | {psig_desc = Psig_open lid; psig_loc = loc} :: srem ->
      let (path, mty) = type_module_path env loc lid in
      let sg = extract_sig_open env loc mty in
      let newenv = Env.open_signature path sg env in
      transl_signature newenv srem

<<exception Typemod.Not_a_path>>

<<function Typemod.path_of_module>>

(* Check that all type and module identifiers in a structure have
   distinct names (so that access by named paths is unambiguous). *)

module StringSet = Set

<<function Typemod.check_unique_names>>

<<function Typemod.check_nongen_schemes>>

(* Type a module value expression *)

let rec type_module env smod =
  match smod.pmod_desc with
    Pmod_ident lid ->
      let (path, mty) = type_module_path env smod.pmod_loc lid in
      { mod_desc = Tmod_ident path;
        mod_type = Mtype.strengthen env mty path;
        mod_loc = smod.pmod_loc }
  | Pmod_structure sstr ->
      let (str, sg, _) = type_structure env sstr in
      check_nongen_schemes str;
      { mod_desc = Tmod_structure str;
        mod_type = Tmty_signature sg;
        mod_loc = smod.pmod_loc }
  | Pmod_constraint(sarg, smty) ->
      let arg = type_module env sarg in
      let mty = transl_modtype env smty in
      let coercion =
        try
          Includemod.modtypes env arg.mod_type mty
        with Includemod.Error msg ->
          raise(Error(sarg.pmod_loc, Not_included msg)) in
      { mod_desc = Tmod_constraint(arg, mty, coercion);
        mod_type = mty;
        mod_loc = smod.pmod_loc }

and type_structure env sstr =
  check_unique_names sstr;
  type_struct env sstr

and type_struct env = function
    [] ->
      ([], [], env)
  | {pstr_desc = Pstr_eval sexpr} :: srem ->
      let expr = Typecore.type_expression env sexpr in
      let (str_rem, sig_rem, final_env) = type_struct env srem in
      (Tstr_eval expr :: str_rem, sig_rem, final_env)
  | {pstr_desc = Pstr_value(rec_flag, sdefs)} :: srem ->
      let (defs, newenv) =
        Typecore.type_binding env rec_flag sdefs in
      let (str_rem, sig_rem, final_env) = type_struct newenv srem in
      let bound_idents = let_bound_idents defs in
      let make_sig_value id =
        Tsig_value(id, Env.find_value (Pident id) newenv) in
      (Tstr_value(rec_flag, defs) :: str_rem,
       map_end make_sig_value bound_idents sig_rem,
       final_env)
  | {pstr_desc = Pstr_primitive(name, sdesc)} :: srem ->
      let desc = Typedecl.transl_value_decl env sdesc in
      let (id, newenv) = Env.enter_value name desc env in
      let (str_rem, sig_rem, final_env) = type_struct newenv srem in
      (Tstr_primitive(id, desc) :: str_rem,
       Tsig_value(id, desc) :: sig_rem,
       final_env)
  | {pstr_desc = Pstr_type sdecls} :: srem ->
      let (decls, newenv) = Typedecl.transl_type_decl env sdecls in
      let (str_rem, sig_rem, final_env) = type_struct newenv srem in
      (Tstr_type decls :: str_rem,
       map_end (fun (id, info) -> Tsig_type(id, info)) decls sig_rem,
       final_env)
  | {pstr_desc = Pstr_exception(name, sarg)} :: srem ->
      let arg = Typedecl.transl_exception env sarg in
      let (id, newenv) = Env.enter_exception name arg env in
      let (str_rem, sig_rem, final_env) = type_struct newenv srem in
      (Tstr_exception(id, arg) :: str_rem,
       Tsig_exception(id, arg) :: sig_rem,
       final_env)
  | {pstr_desc = Pstr_module(name, smodl)} :: srem ->
      let modl = type_module env smodl in
      let (id, newenv) = Env.enter_module name modl.mod_type env in
      let (str_rem, sig_rem, final_env) = type_struct newenv srem in
      (Tstr_module(id, modl) :: str_rem,
       Tsig_module(id, modl.mod_type) :: sig_rem,
       final_env)
  | {pstr_desc = Pstr_open lid; pstr_loc = loc} :: srem ->
      let (path, mty) = type_module_path env loc lid in
      let sg = extract_sig_open env loc mty in
      type_struct (Env.open_signature path sg env) srem

(* Error report *)

open Format
open Printtyp

<<function Typemod.report_error>>
@




\section{[[./bytecomp/]]}


\subsection*{[[./bytecomp/lambda.mli]]}


<<signature Lambda.const_unit>>=
val const_unit: structured_constant
@

<<signature Lambda.lambda_unit>>=
val lambda_unit: lambda
@

<<signature Lambda.name_lambda>>=
val name_lambda: lambda -> (Ident.t -> lambda) -> lambda
@

<<signature Lambda.is_guarded>>=
val is_guarded: lambda -> bool
@

<<signature Lambda.free_variables>>=
val free_variables: lambda -> Ident.t Set.t
@

<<signature Lambda.transl_path>>=
val transl_path: Path.t -> lambda
@


%-------------------------------------------------------------

<<./bytecomp/lambda.mli>>=
<<copyright header>>

(* The "lambda" intermediate code *)

open Asttypes

<<type Lambda.primitive>>

<<type Lambda.comparison>>

<<type Lambda.array_kind>>

<<type Lambda.structured_constant>>

<<type Lambda.function_kind>>

<<type Lambda.let_kind>>

<<type Lambda.shared_code>>

<<type Lambda.lambda>>

<<type Lambda.lambda_switch>>

<<type Lambda.lambda_event>>

<<type Lambda.lambda_event_kind>>

<<signature Lambda.const_unit>>
<<signature Lambda.lambda_unit>>
<<signature Lambda.name_lambda>>
<<signature Lambda.is_guarded>>

<<signature Lambda.free_variables>>

<<signature Lambda.transl_path>>
@


\subsection*{[[./bytecomp/lambda.ml]]}



<<constant Lambda.const_unit>>=
let const_unit = Const_pointer 0
@

<<constant Lambda.lambda_unit>>=
let lambda_unit = Lconst const_unit
@

<<function Lambda.name_lambda>>=
let name_lambda arg fn =
  match arg with
    Lvar id -> fn id
  | _ -> let id = Ident.create "let" in Llet(Strict, id, arg, fn id)
@

<<function Lambda.free_variables>>=
let free_variables l =
  let fv = ref IdentSet.empty in
  let rec freevars = function
    Lvar id ->
      fv := IdentSet.add id !fv
  | Lconst sc -> ()
  | Lapply(fn, args) ->
      freevars fn; List.iter freevars args
  | Lfunction(kind, params, body) ->
      freevars body;
      List.iter (fun param -> fv := IdentSet.remove param !fv) params
  | Llet(str, id, arg, body) ->
      freevars arg; freevars body; fv := IdentSet.remove id !fv
  | Lletrec(decl, body) ->
      freevars body;
      List.iter (fun (id, exp) -> freevars exp) decl;
      List.iter (fun (id, exp) -> fv := IdentSet.remove id !fv) decl
  | Lprim(p, args) ->
      List.iter freevars args
  | Lswitch(arg, sw) ->
      freevars arg; 
      List.iter (fun (key, case) -> freevars case) sw.sw_consts;
      List.iter (fun (key, case) -> freevars case) sw.sw_blocks
  | Lstaticfail -> ()
  | Lcatch(e1, e2) ->
      freevars e1; freevars e2
  | Ltrywith(e1, exn, e2) ->
      freevars e1; freevars e2; fv := IdentSet.remove exn !fv
  | Lifthenelse(e1, e2, e3) ->
      freevars e1; freevars e2; freevars e3
  | Lsequence(e1, e2) ->
      freevars e1; freevars e2
  | Lwhile(e1, e2) ->
      freevars e1; freevars e2
  | Lfor(v, e1, e2, dir, e3) -> 
      freevars e1; freevars e2; freevars e3; fv := IdentSet.remove v !fv
  | Lassign(id, e) ->
      fv := IdentSet.add id !fv; freevars e
  | Levent (lam, evt) ->
      freevars lam
  in freevars l; !fv
@

<<constant Lambda.is_guarded>>=
(* Check if an action has a "when" guard *)

let rec is_guarded = function
    Lifthenelse(cond, body, Lstaticfail) -> true
  | Llet(str, id, lam, body) -> is_guarded body
  | Levent(lam, ev) -> is_guarded lam
  | _ -> false
@

<<constant Lambda.transl_path>>=
let rec transl_path = function
    Pident id ->
      if Ident.global id then Lprim(Pgetglobal id, []) else Lvar id
  | Pdot(p, s, pos) ->
      Lprim(Pfield pos, [transl_path p])
@


%-------------------------------------------------------------

<<./bytecomp/lambda.ml>>=
<<copyright header>>

open Misc
open Path
open Asttypes

<<type Lambda.primitive>>

<<type Lambda.comparison>>

<<type Lambda.array_kind>>

<<type Lambda.structured_constant>>

<<type Lambda.function_kind>>

<<type Lambda.let_kind>>

<<type Lambda.shared_code>>

<<type Lambda.lambda>>

<<type Lambda.lambda_switch>>

<<type Lambda.lambda_event>>

<<type Lambda.lambda_event_kind>>

<<constant Lambda.const_unit>>

<<constant Lambda.lambda_unit>>

<<function Lambda.name_lambda>>

module IdentSet = Set

<<function Lambda.free_variables>>

<<constant Lambda.is_guarded>>

<<constant Lambda.transl_path>>
@


\subsection*{[[./bytecomp/printlambda.mli]]}

%-------------------------------------------------------------

<<./bytecomp/printlambda.mli>>=
<<copyright header>>

open Lambda

<<signature Printlambda.structured_constant>>
<<signature Printlambda.lambda>>
@


\subsection*{[[./bytecomp/printlambda.ml]]}

%-------------------------------------------------------------

<<./bytecomp/printlambda.ml>>=
<<copyright header>>

open Format
open Asttypes
open Primitive
open Types
open Lambda


<<function Printlambda.structured_constant>>

<<function Printlambda.primitive>>

<<function Printlambda.lambda>>
@

\subsection*{[[./bytecomp/meta.mli]]}

<<type Meta.closure>>=
type closure = unit -> Obj.t
@


%-------------------------------------------------------------

<<./bytecomp/meta.mli>>=
<<copyright header>>

(* To control the runtime system and bytecode interpreter *)

external global_data : unit -> Obj.t array = "get_global_data"
external realloc_global_data : int -> unit = "realloc_global"
external static_alloc : int -> string = "static_alloc"
external static_free : string -> unit = "static_free"
<<type Meta.closure>>
external reify_bytecode : string -> int -> closure = "reify_bytecode"
external available_primitives : unit -> string array = "available_primitives"
@


\subsection*{[[./bytecomp/meta.ml]]}

<<type Meta.closure (./bytecomp/meta.ml)>>=
type closure = unit -> Obj.t
@


%-------------------------------------------------------------

<<./bytecomp/meta.ml>>=
<<copyright header>>

external global_data : unit -> Obj.t array = "get_global_data"
external realloc_global_data : int -> unit = "realloc_global"
external static_alloc : int -> string = "static_alloc"
external static_free : string -> unit = "static_free"
<<type Meta.closure (./bytecomp/meta.ml)>>
external reify_bytecode : string -> int -> closure = "reify_bytecode"
external available_primitives : unit -> string array = "available_primitives"
@


\subsection*{[[./bytecomp/runtimedef.mli]]}

<<signature Runtimedef.builtin_exceptions>>=
(* Values and functions known and/or provided by the runtime system *)

val builtin_exceptions: string array
@

<<signature Runtimedef.builtin_primitives>>=
val builtin_primitives: string array
@


%-------------------------------------------------------------

<<./bytecomp/runtimedef.mli>>=
<<copyright header>>

<<signature Runtimedef.builtin_exceptions>>
<<signature Runtimedef.builtin_primitives>>
@


\subsection*{[[./bytecomp/instruct.mli]]}


%-------------------------------------------------------------

<<./bytecomp/instruct.mli>>=
<<copyright header>>

(* The type of the instructions of the abstract machine *)

open Lambda

<<type Instruct.compilation_env>>

(* The ce_stack component gives locations of variables residing 
   in the stack. The locations are offsets w.r.t. the origin of the
   stack frame.
   The ce_heap component gives the positions of variables residing in the
   heap-allocated environment. *)

(* Debugging events *)

<<type Instruct.debug_event>>

<<type Instruct.debug_event_kind>>

<<type Instruct.debug_event_info>>

<<type Instruct.debug_event_repr>>

<<type Instruct.label>>

<<type Instruct.instruction>>

<<signature Instruct.immed_min>>
<<signature Instruct.immed_max>>
@


\subsection*{[[./bytecomp/instruct.ml]]}



%-------------------------------------------------------------

<<./bytecomp/instruct.ml>>=
<<copyright header>>

open Lambda

<<type Instruct.compilation_env>>


<<type Instruct.debug_event>>

<<type Instruct.debug_event_kind>>

<<type Instruct.debug_event_info>>

<<type Instruct.debug_event_repr>>

<<type Instruct.label>>

<<type Instruct.instruction>>

let immed_min = -0x40000000
and immed_max = 0x3FFFFFFF

(* Actually the abstract machine accomodates -0x80000000 to 0x7FFFFFFF,
   but these numbers overflow the Caml type int if the compiler runs on
   a 32-bit processor. *)
@


\subsection*{[[./bytecomp/printinstr.mli]]}

%-------------------------------------------------------------

<<./bytecomp/printinstr.mli>>=
<<copyright header>>

(* Pretty-print lists of instructions *)

open Instruct

<<signature Printinstr.instruction>>
<<signature Printinstr.instrlist>>
@


\subsection*{[[./bytecomp/printinstr.ml]]}


%-------------------------------------------------------------

<<./bytecomp/printinstr.ml>>=
<<copyright header>>

(* Pretty-print lists of instructions *)

open Format
open Lambda
open Instruct


<<constant Printinstr.instruction>>

<<constant Printinstr.instruction_list>>
 
<<function Printinstr.instrlist>>
@


\subsection*{[[./bytecomp/simplif.mli]]}



%-------------------------------------------------------------

<<./bytecomp/simplif.mli>>=
<<copyright header>>

(* Elimination of useless Llet(Alias) bindings *)

open Lambda

<<signature Simplif.simplify_lambda>>
@


\subsection*{[[./bytecomp/simplif.ml]]}

<<exception Simplif.Real_reference>>=
(* To transform let-bound references into variables *)

exception Real_reference
@

<<function Simplif.eliminate_ref>>=
let rec eliminate_ref id = function
    Lvar v as lam ->
      if Ident.same v id then raise Real_reference else lam
  | Lconst cst as lam -> lam
  | Lapply(e1, el) -> 
      Lapply(eliminate_ref id e1, List.map (eliminate_ref id) el)
  | Lfunction(kind, params, body) as lam ->
      if IdentSet.mem id (free_variables lam)
      then raise Real_reference
      else lam
  | Llet(str, v, e1, e2) ->
      Llet(str, v, eliminate_ref id e1, eliminate_ref id e2)
  | Lletrec(idel, e2) ->
      Lletrec(List.map (fun (v, e) -> (v, eliminate_ref id e)) idel,
              eliminate_ref id e2)
  | Lprim(Pfield 0, [Lvar v]) when Ident.same v id ->
      Lvar id
  | Lprim(Psetfield(0, _), [Lvar v; e]) when Ident.same v id ->
      Lassign(id, eliminate_ref id e)
  | Lprim(Poffsetref delta, [Lvar v]) when Ident.same v id ->
      Lassign(id, Lprim(Poffsetint delta, [Lvar id]))
  | Lprim(p, el) ->
      Lprim(p, List.map (eliminate_ref id) el)
  | Lswitch(e, sw) ->
      Lswitch(eliminate_ref id e,
        {sw_numconsts = sw.sw_numconsts;
         sw_consts =
            List.map (fun (n, e) -> (n, eliminate_ref id e)) sw.sw_consts;
         sw_numblocks = sw.sw_numblocks;
         sw_blocks =
            List.map (fun (n, e) -> (n, eliminate_ref id e)) sw.sw_blocks;
         sw_checked = sw.sw_checked})
  | Lstaticfail ->
      Lstaticfail
  | Lcatch(e1, e2) ->
      Lcatch(eliminate_ref id e1, eliminate_ref id e2)
  | Ltrywith(e1, v, e2) ->
      Ltrywith(eliminate_ref id e1, v, eliminate_ref id e2)
  | Lifthenelse(e1, e2, e3) ->
      Lifthenelse(eliminate_ref id e1,
                  eliminate_ref id e2,
                  eliminate_ref id e3)
  | Lsequence(e1, e2) ->
      Lsequence(eliminate_ref id e1, eliminate_ref id e2)
  | Lwhile(e1, e2) ->
      Lwhile(eliminate_ref id e1, eliminate_ref id e2)
  | Lfor(v, e1, e2, dir, e3) ->
      Lfor(v, eliminate_ref id e1, eliminate_ref id e2,
           dir, eliminate_ref id e3)
  | Lassign(v, e) ->
      Lassign(v, eliminate_ref id e)
  | Levent(l, ev) ->
      Levent(eliminate_ref id l, ev)
@

<<function Simplif.simplify_lambda>>=
(* Simplification of lets *)

let simplify_lambda lam =
  (* First pass: count the occurrences of all identifiers *)
  let occ = Hashtbl.create 83 in
  let count_var v =
    try
      !(Hashtbl.find occ v)
    with Not_found ->
      0 in
  let rec count = function
    Lvar v ->
      begin try
        incr(Hashtbl.find occ v)
      with Not_found ->
        Hashtbl.add occ v (ref 1)
      end
  | Lconst cst -> ()
  | Lapply(l1, ll) -> count l1; List.iter count ll
  | Lfunction(kind, params, l) -> count l
  | Llet(str, v, Lvar w, l2) ->
      (* v will be replaced by w in l2, so each occurrence of v in l2
         increases w's refcount *)
      count l2;
      let vc = count_var v in
      begin try
        let r = Hashtbl.find occ w in r := !r + vc
      with Not_found ->
        Hashtbl.add occ w (ref vc)
      end
  | Llet(str, v, l1, l2) ->
      count l2;
      (* If v is unused, l1 will be removed, so don't count its variables *)
      if str = Strict or count_var v > 0 then count l1
  | Lletrec(bindings, body) ->
      List.iter (fun (v, l) -> count l) bindings;
      count body
  | Lprim(p, ll) -> List.iter count ll
  | Lswitch(l, sw) ->
      count l;
      List.iter (fun (n, l) -> count l) sw.sw_consts;
      List.iter (fun (n, l) -> count l) sw.sw_blocks
  | Lstaticfail -> ()
  | Lcatch(l1, l2) -> count l1; count l2
  | Ltrywith(l1, v, l2) -> count l1; count l2
  | Lifthenelse(l1, l2, l3) -> count l1; count l2; count l3
  | Lsequence(l1, l2) -> count l1; count l2
  | Lwhile(l1, l2) -> count l1; count l2
  | Lfor(v, l1, l2, dir, l3) -> count l1; count l2; count l3
  | Lassign(v, l) ->
      (* Lalias-bound variables are never assigned, so don't increase
         v's refcount *)
      count l
  | Levent(l, ev) -> count l
  in
  count lam;
  (* Second pass: remove Lalias bindings of unused variables,
     and substitute the bindings of variables used exactly once. *)
  let subst = Hashtbl.create 83 in
  let rec simplif = function
    Lvar v as l ->
      begin try
        Hashtbl.find subst v
      with Not_found ->
        l
      end
  | Lconst cst as l -> l
  | Lapply(l1, ll) -> Lapply(simplif l1, List.map simplif ll)
  | Lfunction(kind, params, l) -> Lfunction(kind, params, simplif l)
  | Llet(str, v, Lvar w, l2) ->
      Hashtbl.add subst v (simplif (Lvar w));
      simplif l2
  | Llet(Strict, v, Lprim(Pmakeblock(0, Mutable), [linit]), lbody)
    when not !Clflags.debug ->
      let slinit = simplif linit in
      let slbody = simplif lbody in
      begin try
        Llet(Strict, v, slinit, eliminate_ref v slbody)
      with Real_reference ->
        Llet(Strict, v, Lprim(Pmakeblock(0, Mutable), [slinit]), slbody)
      end
  | Llet(Strict, v, l1, l2) -> Llet(Strict, v, simplif l1, simplif l2)
  | Llet(Alias, v, l1, l2) ->
      begin match count_var v with
        0 -> simplif l2
      | 1 -> Hashtbl.add subst v (simplif l1); simplif l2
      | n -> Llet(Alias, v, simplif l1, simplif l2)
      end
  | Llet(StrictOpt, v, l1, l2) ->
      begin match count_var v with
        0 -> simplif l2
      | n -> Llet(Alias, v, simplif l1, simplif l2)
      end
  | Lletrec(bindings, body) ->
      Lletrec(List.map (fun (v, l) -> (v, simplif l)) bindings, simplif body)
  | Lprim(p, ll) -> Lprim(p, List.map simplif ll)
  | Lswitch(l, sw) ->
      Lswitch(simplif l,
        {sw_numconsts = sw.sw_numconsts;
         sw_consts = List.map (fun (n, e) -> (n, simplif e)) sw.sw_consts;
         sw_numblocks = sw.sw_numblocks;
         sw_blocks = List.map (fun (n, e) -> (n, simplif e)) sw.sw_blocks;
         sw_checked = sw.sw_checked})
  | Lstaticfail -> Lstaticfail
  | Lcatch(l1, l2) -> Lcatch(simplif l1, simplif l2)
  | Ltrywith(l1, v, l2) -> Ltrywith(simplif l1, v, simplif l2)
  | Lifthenelse(l1, l2, l3) -> Lifthenelse(simplif l1, simplif l2, simplif l3)
  | Lsequence(l1, l2) -> Lsequence(simplif l1, simplif l2)
  | Lwhile(l1, l2) -> Lwhile(simplif l1, simplif l2)
  | Lfor(v, l1, l2, dir, l3) ->
      Lfor(v, simplif l1, simplif l2, dir, simplif l3)
  | Lassign(v, l) -> Lassign(v, simplif l)
  | Levent(l, ev) -> Levent(simplif l, ev)
  in
  simplif lam
@


%-------------------------------------------------------------

<<./bytecomp/simplif.ml>>=
<<copyright header>>

(* Elimination of useless Llet(Alias) bindings.
   Also transform let-bound references into variables. *)

open Asttypes
open Lambda

<<exception Simplif.Real_reference>>

module IdentSet = Set

<<function Simplif.eliminate_ref>>

<<function Simplif.simplify_lambda>>
@


\subsection*{[[./bytecomp/matching.mli]]}


<<exception Matching.Cannot_flatten>>=
exception Cannot_flatten
@

<<signature Matching.flatten_pattern>>=
val flatten_pattern: int -> pattern -> pattern list
@


%-------------------------------------------------------------

<<./bytecomp/matching.mli>>=
<<copyright header>>

(* Compilation of pattern-matching *)

open Typedtree
open Lambda

<<signature Matching.for_function>>
<<signature Matching.for_trywith>>
<<signature Matching.for_let>>
<<signature Matching.for_multiple_match>>
<<signature Matching.for_tupled_function>>

<<exception Matching.Cannot_flatten>>

<<signature Matching.flatten_pattern>>
@


\subsection*{[[./bytecomp/matching.ml]]}

<<type Matching.pattern_matching>>=
(*  See Peyton-Jones, "The Implementation of functional programming
    languages", chapter 5. *)

type pattern_matching =
  { mutable cases : (pattern list * lambda) list;
    args : (lambda * let_kind) list }
@

<<function Matching.add_line>>=
(* To group lines of patterns with identical keys *)

let add_line patl_action pm =
  pm.cases <- patl_action :: pm.cases; pm
@

<<function Matching.add>>=
let add make_matching_fun division key patl_action args =
  try
    let pm = List.assoc key division in
    pm.cases <- patl_action :: pm.cases;
    division
  with Not_found ->
    let pm = make_matching_fun args in
    pm.cases <- patl_action :: pm.cases;
    (key, pm) :: division
@

<<function Matching.name_pattern>>=
(* To find reasonable names for let-bound and lambda-bound idents *)

let rec name_pattern default = function
    (pat :: patl, action) :: rem ->
      begin match pat.pat_desc with
        Tpat_var id -> id
      | Tpat_alias(p, id) -> id
      | _ -> name_pattern default rem
      end
  | _ -> Ident.create default
@

<<constant Matching.any_pat>>=
(* To remove aliases and bind named components *)

let any_pat =
  {pat_desc = Tpat_any; pat_loc = Location.none; pat_type = Ctype.none}
@

<<function Matching.simplify_matching>>=
let simplify_matching m =
  match m.args with
    [] -> m
  | (arg, mut) :: argl ->
      let rec simplify = function
        (pat :: patl, action as patl_action) :: rem ->
          begin match pat.pat_desc with
            Tpat_var id ->
              (any_pat :: patl, Llet(Alias, id, arg, action)) ::
              simplify rem
          | Tpat_alias(p, id) ->
              simplify ((p :: patl, Llet(Alias, id, arg, action)) :: rem)
          | _ ->
              patl_action :: simplify rem
          end
      | cases -> cases in
    { args = m.args; cases = simplify m.cases }
@

<<constant Matching.make_constant_matching>>=
(* Matching against a constant *)

let make_constant_matching = function
    [] -> fatal_error "Matching.make_constant_matching"
  | (arg :: argl) -> {cases = []; args = argl}
@

<<function Matching.divide_constant>>=
let divide_constant {cases = cl; args = al} =
  let rec divide = function
      ({pat_desc = Tpat_constant cst} :: patl, action) :: rem ->
        let (constants, others) = divide rem in
        (add make_constant_matching constants cst (patl, action) al, others)
    | cl ->
      ([], {cases = cl; args = al})
  in divide cl
@

<<function Matching.make_constr_matching>>=
(* Matching against a constructor *)

let make_constr_matching cstr = function
    [] -> fatal_error "Matching.make_constr_matching"
  | ((arg, mut) :: argl) ->
      let (first_pos, last_pos) =
        match cstr.cstr_tag with
          Cstr_constant _ | Cstr_block _ -> (0, cstr.cstr_arity - 1)
        | Cstr_exception _ -> (1, cstr.cstr_arity) in
      let rec make_args pos =
        if pos > last_pos
        then argl
        else (Lprim(Pfield pos, [arg]), Alias) :: make_args (pos + 1) in
      {cases = []; args = make_args first_pos}
@

<<function Matching.divide_constructor>>=
let divide_constructor {cases = cl; args = al} =
  let rec divide = function
      ({pat_desc = Tpat_construct(cstr, args)} :: patl, action) :: rem ->
        let (constructs, others) = divide rem in
        (add (make_constr_matching cstr) constructs
             cstr.cstr_tag (args @ patl, action) al,
         others)
    | cl ->
      ([], {cases = cl; args = al})
  in divide cl
@

<<function Matching.divide_var>>=
(* Matching against a variable *)

let divide_var {cases = cl; args = al} =
  let rec divide = function
      ({pat_desc = Tpat_any} :: patl, action) :: rem ->
        let (vars, others) = divide rem in
        (add_line (patl, action) vars, others)
    | cl ->
        (make_constant_matching al, {cases = cl; args = al})
  in divide cl
@

<<function Matching.make_tuple_matching>>=
(* Matching against a tuple pattern *)

let make_tuple_matching num_comps = function
    [] -> fatal_error "Matching.make_tuple_matching"
  | (arg, mut) :: argl ->
      let rec make_args pos =
        if pos >= num_comps
        then argl
        else (Lprim(Pfield pos, [arg]), Alias) :: make_args (pos + 1) in
      {cases = []; args = make_args 0}
@

<<function Matching.divide_tuple>>=
let divide_tuple arity {cases = cl; args = al} =
  let rec divide = function
      ({pat_desc = Tpat_tuple args} :: patl, action) :: rem ->
        let (tuples, others) = divide rem in
        (add_line (args @ patl, action) tuples, others)
    | ({pat_desc = Tpat_any} :: patl, action) :: rem ->
        let (tuples, others) = divide rem in
        (add_line (replicate_list any_pat arity @ patl, action) tuples, others)
    | cl ->
        (make_tuple_matching arity al, {cases = cl; args = al})
  in divide cl
@

<<function Matching.make_record_matching>>=
(* Matching against a record pattern *)

let make_record_matching all_labels = function
    [] -> fatal_error "Matching.make_tuple_matching"
  | ((arg, mut) :: argl) ->
      let rec make_args pos =
        if pos >= Array.length all_labels then argl else begin
          let lbl = all_labels.(pos) in
          let access =
            match lbl.lbl_repres with
              Record_regular -> Pfield lbl.lbl_pos
            | Record_float -> Pfloatfield lbl.lbl_pos in
          let str =
            match lbl.lbl_mut with
              Immutable -> Alias
            | Mutable -> StrictOpt in
          (Lprim(access, [arg]), str) :: make_args(pos + 1)
        end in
      {cases = []; args = make_args 0}
@

<<function Matching.divide_record>>=
let divide_record all_labels {cases = cl; args = al} =
  let num_fields = Array.length all_labels in
  let record_matching_line lbl_pat_list =
    let patv = Array.create num_fields any_pat in
    List.iter (fun (lbl, pat) -> patv.(lbl.lbl_pos) <- pat) lbl_pat_list;
    Array.to_list patv in
  let rec divide = function
      ({pat_desc = Tpat_record lbl_pat_list} :: patl, action) :: rem ->
        let (records, others) = divide rem in
        (add_line (record_matching_line lbl_pat_list @ patl, action) records,
         others)
    | ({pat_desc = Tpat_any} :: patl, action) :: rem ->
        let (records, others) = divide rem in
        (add_line (record_matching_line [] @ patl, action) records, others)
    | cl ->
        (make_record_matching all_labels al, {cases = cl; args = al})
  in divide cl
@

<<function Matching.flatten_orpat_match>>=
(* Matching against an or pattern. *)

let rec flatten_orpat_match pat =
  match pat.pat_desc with
    Tpat_or(p1, p2) -> flatten_orpat_match p1 @ flatten_orpat_match p2
  | _ -> [[pat], lambda_unit]
@

<<constant Matching.divide_orpat>>=
let divide_orpat = function
    {cases = (orpat :: patl, act) :: casel; args = arg1 :: argl as args} ->
      ({cases = flatten_orpat_match orpat; args = [arg1]},
       {cases = [patl, act]; args = argl},
       {cases = casel; args = args})
  | _ ->
    fatal_error "Matching.divide_orpat"
@

<<function Matching.combine_var>>=
(* To combine sub-matchings together *)

let combine_var (lambda1, total1) (lambda2, total2) =
  if total1 then (lambda1, true)
  else if lambda2 = Lstaticfail then (lambda1, total1)
  else (Lcatch(lambda1, lambda2), total2)
@

<<function Matching.make_test_sequence>>=
let make_test_sequence tst arg const_lambda_list =
  List.fold_right
    (fun (c, act) rem ->
      Lifthenelse(Lprim(tst, [arg; Lconst(Const_base c)]), act, rem))
    const_lambda_list Lstaticfail
@

<<function Matching.make_switch_or_test_sequence>>=
let make_switch_or_test_sequence arg const_lambda_list int_lambda_list =
  let min_key =
    List.fold_right (fun (k, l) m -> min k m) int_lambda_list max_int in
  let max_key =
    List.fold_right (fun (k, l) m -> max k m) int_lambda_list min_int in
  (* min_key and max_key can be arbitrarily large, so watch out for
     overflow in the following comparison *)
  if List.length int_lambda_list <= 1 + max_key / 4 - min_key / 4 then
    (* Sparse matching -- use a sequence of tests
       (4 bytecode instructions per test)  *)
    make_test_sequence (Pintcomp Ceq) arg const_lambda_list
  else begin
    (* Dense matching -- use a jump table
       (2 bytecode instructions + 1 word per entry in the table) *)
    let numcases = max_key - min_key + 1 in
    let cases =
      List.map (fun (key, l) -> (key - min_key, l)) int_lambda_list in
    let offsetarg =
      if min_key = 0 then arg else Lprim(Poffsetint(-min_key), [arg]) in
    Lswitch(offsetarg,
            {sw_numconsts = numcases; sw_consts = cases;
             sw_numblocks = 0; sw_blocks = []; sw_checked = true})
  end
@

<<function Matching.make_bitvect_check>>=
let make_bitvect_check arg int_lambda_list =
  let bv = String.make 32 '\000' in
  List.iter
    (fun (n, l) ->
      bv.[n lsr 3] <- Char.chr(Char.code bv.[n lsr 3] lor (1 lsl (n land 7))))
    int_lambda_list;
  Lifthenelse(Lprim(Pbittest, [Lconst(Const_base(Const_string bv)); arg]),
              lambda_unit, Lstaticfail)
@

<<constant Matching.prim_string_equal>>=
let prim_string_equal =
  Pccall{prim_name = "string_equal";
         prim_arity = 2; prim_alloc = false;
         prim_native_name = ""; prim_native_float = false}
@

<<function Matching.combine_constant>>=
let combine_constant arg cst (const_lambda_list, total1) (lambda2, total2) =
  let lambda1 =
    match cst with
      Const_int _ ->
        let int_lambda_list =
          List.map (function Const_int n, l -> n,l | _ -> assert false)
                   const_lambda_list in
        make_switch_or_test_sequence arg const_lambda_list int_lambda_list
    | Const_char _ ->
        let int_lambda_list =
          List.map (function Const_char c, l -> (Char.code c, l)
                           | _ -> assert false)
                   const_lambda_list in
        if List.for_all (fun (c, l) -> l = lambda_unit) const_lambda_list then
          make_bitvect_check arg int_lambda_list 
        else
          make_switch_or_test_sequence arg const_lambda_list int_lambda_list
    | Const_string _ ->
        make_test_sequence prim_string_equal arg const_lambda_list
    | Const_float _ ->
        make_test_sequence (Pfloatcomp Ceq) arg const_lambda_list
  in (Lcatch(lambda1, lambda2), total2)
@

<<function Matching.combine_constructor>>=
let combine_constructor arg cstr (tag_lambda_list, total1) (lambda2, total2) =
  if cstr.cstr_consts < 0 then begin
    (* Special cases for exceptions *)
    let lambda1 =
      List.fold_right
        (fun (ex, act) rem ->
           match ex with
           | Cstr_exception path ->
               Lifthenelse(Lprim(Pintcomp Ceq, 
                                 [Lprim(Pfield 0, [arg]); transl_path path]),
                           act, rem)
           | _ -> assert false)
        tag_lambda_list Lstaticfail
    in (Lcatch(lambda1, lambda2), total2)
  end else begin
    (* Regular concrete type *)
    let rec split_cases = function
      [] -> ([], [])
    | (cstr, act) :: rem ->
        let (consts, nonconsts) = split_cases rem in
        match cstr with
          Cstr_constant n -> ((n, act) :: consts, nonconsts)
        | Cstr_block n    -> (consts, (n, act) :: nonconsts)
        | _ -> assert false in
    let (consts, nonconsts) = split_cases tag_lambda_list in
    let lambda1 =
      match (cstr.cstr_consts, cstr.cstr_nonconsts, consts, nonconsts) with
        (1, 0, [0, act], []) -> act
      | (0, 1, [], [0, act]) -> act
      | (1, 1, [0, act1], [0, act2]) ->
          Lifthenelse(arg, act2, act1)
      | (1, 1, [0, act1], []) ->
          Lifthenelse(arg, Lstaticfail, act1)
      | (1, 1, [], [0, act2]) ->
          Lifthenelse(arg, act2, Lstaticfail)
      | (_, _, _, _) ->
          Lswitch(arg, {sw_numconsts = cstr.cstr_consts;
                        sw_consts = consts;
                        sw_numblocks = cstr.cstr_nonconsts;
                        sw_blocks = nonconsts;
                        sw_checked = false}) in
    if total1
     & List.length tag_lambda_list = cstr.cstr_consts + cstr.cstr_nonconsts
    then (lambda1, true)
    else (Lcatch(lambda1, lambda2), total2)
  end
@

<<function Matching.combine_orpat>>=
let combine_orpat (lambda1, total1) (lambda2, total2) (lambda3, total3) =
  (Lcatch(Lsequence(lambda1, lambda2), lambda3), total3)
@

<<function Matching.event_branch>>=
(* Insertion of debugging events *)

let rec event_branch repr lam =
  begin match lam, repr with
    (_, None) ->
      lam
  | (Levent(lam', ev), Some r) ->
      incr r;
      Levent(lam', {lev_loc = ev.lev_loc;
                    lev_kind = ev.lev_kind;
                    lev_repr = repr;
                    lev_env = ev.lev_env})
  | (Llet(str, id, lam, body), _) ->
      Llet(str, id, lam, event_branch repr body)
  | (_, Some r) ->
(*      incr r;
      Levent(lam, {lev_loc = -1;
                   lev_kind = Lev_before;
                   lev_repr = repr;
                   lev_env = Env.Env_empty})
*)      fatal_error "Matching.event_branch"
  end
@

<<function Matching.compile_match>>=
(* The main compilation function.
   Input: a pattern matching.
   Output: a lambda term, a "total" flag (true if we're sure that the
     matching covers all cases; this is an approximation). *)

let rec compile_match repr m =

  let rec compile_list = function
    [] -> ([], true)
  | (key, pm) :: rem ->
      let (lambda1, total1) = compile_match repr pm in
      let (list2, total2) = compile_list rem in
      ((key, lambda1) :: list2, total1 & total2) in

  match m with
    { cases = [] } ->
      (Lstaticfail, false)
  | { cases = ([], action) :: rem; args = argl } ->
      if is_guarded action then begin
        let (lambda, total) =
          compile_match None { cases = rem; args = argl }
        in
        (Lcatch(event_branch repr action, lambda), total)
      end else
        (event_branch repr action, true)
  | { args = (arg, str) :: argl } ->
      let v = name_pattern "match" m.cases in
      let newarg = Lvar v in
      let pm =
        simplify_matching
          { cases = m.cases; args = (newarg, Alias) :: argl } in
      let (lam, total) =
        match pm.cases with
          (pat :: patl, action) :: _ ->
            begin match pat.pat_desc with
              Tpat_any ->
                let (vars, others) = divide_var pm in
                combine_var (compile_match repr vars)
                            (compile_match repr others)
            | Tpat_constant cst ->
                let (constants, others) = divide_constant pm in
                combine_constant newarg cst
                  (compile_list constants) (compile_match repr others)
            | Tpat_tuple patl ->
                let (tuples, others) = divide_tuple (List.length patl) pm in
                combine_var (compile_match repr tuples)
                            (compile_match repr others)
            | Tpat_construct(cstr, patl) ->
                let (constrs, others) = divide_constructor pm in
                combine_constructor newarg cstr
                  (compile_list constrs) (compile_match repr others)
            | Tpat_record((lbl, _) :: _) ->
                let (records, others) = divide_record lbl.lbl_all pm in
                combine_var (compile_match repr records)
                            (compile_match repr others)
            | Tpat_or(pat1, pat2) ->
                (* Avoid duplicating the code of the action *)
                let (or_match, remainder_line, others) = divide_orpat pm in
                combine_orpat (compile_match None or_match)
                              (compile_match repr remainder_line)
                              (compile_match repr others)
            | _ ->
                fatal_error "Matching.compile_match1"
            end
        | _ -> fatal_error "Matching.compile_match2" in
      (Llet(str, v, arg, lam), total)
  | _ -> assert false
@

<<function Matching.compile_matching>>=
(* The entry points *)

let compile_matching repr handler_fun arg pat_act_list =
  let pm =
    { cases = List.map (fun (pat, act) -> ([pat], act)) pat_act_list;
      args = [arg, Strict] } in
  let (lambda, total) = compile_match repr pm in
  if total then lambda else Lcatch(lambda, handler_fun())
@

<<function Matching.partial_function>>=
let partial_function loc () =
  Lprim(Praise, [Lprim(Pmakeblock(0, Immutable),
          [transl_path Predef.path_match_failure;
           Lconst(Const_block(0,
              [Const_base(Const_string !Location.input_name);
               Const_base(Const_int loc.loc_start);
               Const_base(Const_int loc.loc_end)]))])])
@

<<function Matching.for_function>>=
let for_function loc repr param pat_act_list =
  compile_matching repr (partial_function loc) param pat_act_list
@

<<function Matching.for_trywith>>=
let for_trywith param pat_act_list =
  compile_matching None (fun () -> Lprim(Praise, [param])) param pat_act_list
@

<<function Matching.for_let>>=
let for_let loc param pat body =
  compile_matching None (partial_function loc) param [pat, body]
@

<<exception Matching.Cannot_flatten (./bytecomp/matching.ml)>>=
(* Handling of tupled functions and matches *)

exception Cannot_flatten
@

<<function Matching.flatten_pattern>>=
let flatten_pattern size p =
  match p.pat_desc with
    Tpat_tuple args -> args
  | Tpat_any -> replicate_list any_pat size
  | _ -> raise Cannot_flatten
@

<<function Matching.flatten_cases>>=
let flatten_cases size cases =
  List.map (function (pat :: _, act) -> (flatten_pattern size pat, act)
                   | _ -> assert false)
           cases
@

<<function Matching.for_tupled_function>>=
let for_tupled_function loc paraml pats_act_list =
  let pm =
    { cases = pats_act_list;
      args = List.map (fun id -> (Lvar id, Strict)) paraml } in
  let (lambda, total) = compile_match None pm in
  if total then lambda else Lcatch(lambda, partial_function loc ())
@

<<function Matching.for_multiple_match>>=
let for_multiple_match loc paraml pat_act_list =
  let pm1 =
    { cases = List.map (fun (pat, act) -> ([pat], act)) pat_act_list;
      args = [Lprim(Pmakeblock(0, Immutable), paraml), Strict] } in
  let pm2 =
    simplify_matching pm1 in
  let pm3 =
    try
      { cases = flatten_cases (List.length paraml) pm2.cases;
        args = List.map (fun lam -> (lam, Strict)) paraml }
    with Cannot_flatten ->
      pm2 in
  let (lambda, total) = compile_match None pm3 in
  if total then lambda else Lcatch(lambda, partial_function loc ())
@


%-------------------------------------------------------------

<<./bytecomp/matching.ml>>=
<<copyright header>>

(* Compilation of pattern matching *)

open Misc
open Location
open Asttypes
open Primitive
open Types
open Typedtree
open Lambda

<<type Matching.pattern_matching>>

<<function Matching.add_line>>

<<function Matching.add>>

<<function Matching.name_pattern>>

<<constant Matching.any_pat>>

<<function Matching.simplify_matching>>

<<constant Matching.make_constant_matching>>

<<function Matching.divide_constant>>

<<function Matching.make_constr_matching>>

<<function Matching.divide_constructor>>

<<function Matching.divide_var>>

<<function Matching.make_tuple_matching>>

<<function Matching.divide_tuple>>

<<function Matching.make_record_matching>>

<<function Matching.divide_record>>

<<function Matching.flatten_orpat_match>>

<<constant Matching.divide_orpat>>

<<function Matching.combine_var>>

<<function Matching.make_test_sequence>>

<<function Matching.make_switch_or_test_sequence>>

<<function Matching.make_bitvect_check>>

<<constant Matching.prim_string_equal>>

<<function Matching.combine_constant>>

<<function Matching.combine_constructor>>

<<function Matching.combine_orpat>>

<<function Matching.event_branch>>

<<function Matching.compile_match>>

<<function Matching.compile_matching>>

<<function Matching.partial_function>>

<<function Matching.for_function>>

<<function Matching.for_trywith>>

<<function Matching.for_let>>

<<exception Matching.Cannot_flatten (./bytecomp/matching.ml)>>

<<function Matching.flatten_pattern>>

<<function Matching.flatten_cases>>

<<function Matching.for_tupled_function>>

<<function Matching.for_multiple_match>>
@


\subsection*{[[./bytecomp/translcore.mli]]}

<<signature Translcore.name_pattern>>=
val name_pattern: string -> (pattern * 'a) list -> Ident.t
@

<<signature Translcore.maybe_pointer>>=
val maybe_pointer: expression -> bool
@




%-------------------------------------------------------------

<<./bytecomp/translcore.mli>>=
<<copyright header>>

(* Translation from typed abstract syntax to lambda terms,
   for the core language *)

open Asttypes
open Types
open Typedtree
open Lambda

<<signature Translcore.name_pattern>>
<<signature Translcore.maybe_pointer>>

<<signature Translcore.transl_exp>>
<<signature Translcore.transl_let>>
<<signature Translcore.transl_primitive>>
<<signature Translcore.transl_exception>>

<<type Translcore.error>>

<<exception Translcore.Error>>

<<signature Translcore.report_error>>
@


\subsection*{[[./bytecomp/translcore.ml]]}


<<function Translcore.has_base_type>>=
(*
let has_base_type exp base_ty =
  let exp_ty =
    Ctype.expand_head exp.exp_env (Ctype.correct_levels exp.exp_type) in
  match (Ctype.repr exp_ty, Ctype.repr base_ty) with
    {desc = Tconstr(p1, _, _)}, {desc = Tconstr(p2, _, _)} -> Path.same p1 p2
  | (_, _) -> false
*)
@

<<function Translcore.maybe_pointer>>=
(*
let maybe_pointer arg =
  not(has_base_type arg Predef.type_int or has_base_type arg Predef.type_char)
*)
@

<<function Translcore.array_element_kind>>=
(*
let array_element_kind env ty =
  let ty = Ctype.repr (Ctype.expand_head env ty) in
  match ty.desc with
    Tvar ->
      Pgenarray
  | Tconstr(p, args, abbrev) ->
      if Path.same p Predef.path_int || Path.same p Predef.path_char then
        Pintarray
      else if Path.same p Predef.path_float then
        Pfloatarray
      else if Path.same p Predef.path_string
           || Path.same p Predef.path_array then
        Paddrarray
      else begin
        try
          match Env.find_type p env with
            {type_kind = Type_abstract} ->
              Pgenarray
          | {type_kind = Type_variant cstrs}
            when List.for_all (fun (name, args) -> args = []) cstrs ->
              Pintarray
          | {type_kind = _} ->
              Paddrarray
        with Not_found ->
          (* This can happen due to e.g. missing -I options,
             causing some .cmi files to be unavailable.
             Maybe we should emit a warning. *)
          Pgenarray
      end
  | _ ->
      Paddrarray
*)
@

<<function Translcore.array_kind>>=
(*
let array_kind arg =
  let ty = Ctype.correct_levels arg.exp_type in
  let array_ty = Ctype.expand_head arg.exp_env ty in
  match (Ctype.repr array_ty).desc with
    Tconstr(p, [elt_ty], _) when Path.same p Predef.path_array ->
      array_element_kind arg.exp_env elt_ty
  | _ ->
    fatal_error "Translcore.array_kind"
*)
@

<<constant Translcore.prim_makearray>>=
let prim_makearray =
  { prim_name = "make_vect"; prim_arity = 2; prim_alloc = true;
    prim_native_name = ""; prim_native_float = false }
@

<<function Translcore.transl_prim>>=
let transl_prim prim args =
  try
    let (gencomp, intcomp, floatcomp, stringcomp) =
      Hashtbl.find comparisons_table prim.prim_name in
    begin match args with
      [arg1; {exp_desc = Texp_construct({cstr_tag = Cstr_constant _}, _)}] ->
        intcomp
    | [{exp_desc = Texp_construct({cstr_tag = Cstr_constant _}, _)}; arg2] ->
        intcomp
    | [arg1; arg2] when has_base_type arg1 Predef.type_int
                     or has_base_type arg1 Predef.type_char ->
        intcomp
    | [arg1; arg2] when has_base_type arg1 Predef.type_float ->
        floatcomp
    | [arg1; arg2] when has_base_type arg1 Predef.type_string ->
        stringcomp
    | _ ->
        gencomp
    end
  with Not_found ->
  try
    let p = Hashtbl.find primitives_table prim.prim_name in
    (* Try strength reduction based on the type of the argument *)
    begin match (p, args) with
        (Psetfield(n, _), [arg1; arg2]) -> Psetfield(n, maybe_pointer arg2)
      | (Parraylength Pgenarray, [arg])   -> Parraylength(array_kind arg)
      | (Parrayrefu Pgenarray, arg1 :: _) -> Parrayrefu(array_kind arg1)
      | (Parraysetu Pgenarray, arg1 :: _) -> Parraysetu(array_kind arg1)
      | (Parrayrefs Pgenarray, arg1 :: _) -> Parrayrefs(array_kind arg1)
      | (Parraysets Pgenarray, arg1 :: _) -> Parraysets(array_kind arg1)
      | _ -> p
    end
  with Not_found ->
    Pccall prim
@

<<function Translcore.transl_primitive>>=
(* Eta-expand a primitive without knowing the types of its arguments *)

let transl_primitive p =
  let prim =
    try
      let (gencomp, intcomp, floatcomp, stringcomp) =
        Hashtbl.find comparisons_table p.prim_name in
      gencomp
    with Not_found ->
    try
      Hashtbl.find primitives_table p.prim_name
    with Not_found ->
      Pccall p in
  let rec make_params n =
    if n <= 0 then [] else Ident.create "prim" :: make_params (n-1) in
  let params = make_params p.prim_arity in
  Lfunction(Curried, params, Lprim(prim, List.map (fun id -> Lvar id) params))
@

<<function Translcore.check_recursive_lambda>>=
let check_recursive_lambda idlist lam =
  let rec check_top = function
      Lfunction(kind, params, body) as funct -> true
    | Lprim(Pmakeblock(tag, mut), args) -> List.for_all check args
    | Lprim(Pmakearray kind, args) -> List.for_all check args
    | Llet(str, id, arg, body) -> check arg & check_top body
    | Lletrec(bindings, body) ->
        List.for_all (fun (id, arg) -> check arg) bindings & check_top body
    | Levent (lam, _) -> check_top lam
    | _ -> false
  and check = function
      Lvar _ -> true
    | Lconst cst -> true
    | Lfunction(kind, params, body) -> true
    | Llet(str, id, arg, body) -> check arg & check body
    | Lletrec(bindings, body) ->
        List.for_all (fun (id, arg) -> check arg) bindings & check body
    | Lprim(Pmakeblock(tag, mut), args) -> List.for_all check args
    | Lprim(Pmakearray kind, args) -> List.for_all check args
    | Levent (lam, _) -> check lam
    | lam ->
        let fv = free_variables lam in
        List.for_all (fun id -> not(IdentSet.mem id fv)) idlist
  in check_top lam
@

<<exception Translcore.Not_constant>>=
(* To propagate structured constants *)

exception Not_constant
@

<<constant Translcore.extract_constant>>=
let extract_constant = function
    Lconst sc -> sc
  | _ -> raise Not_constant
@

<<constant Translcore.extract_float>>=
let extract_float = function
    Const_base(Const_float f) -> f
  | _ -> fatal_error "Translcore.extract_float"
@

<<function Translcore.name_pattern>>=
(* To find reasonable names for let-bound and lambda-bound idents *)

let rec name_pattern default = function
    [] -> Ident.create default
  | (p, e) :: rem ->
      match p.pat_desc with
        Tpat_var id -> id
      | Tpat_alias(p, id) -> id
      | _ -> name_pattern default rem
@

<<function Translcore.event_before>>=
(* Insertion of debugging events *)

let event_before exp lam =
  if !Clflags.debug && lam <> Lstaticfail
  then Levent(lam, {lev_loc = exp.exp_loc.Location.loc_start;
                    lev_kind = Lev_before;
                    lev_repr = None;
                    lev_env =  ()(* Env.summary exp.exp_env*)})
  else lam
@

<<function Translcore.event_after>>=
let event_after exp lam =
  if !Clflags.debug
  then Levent(lam, {lev_loc = exp.exp_loc.Location.loc_end;
                    lev_kind = Lev_after exp.exp_type;
                    lev_repr = None;
                    lev_env = () (* Env.summary exp.exp_env*)})
  else lam
@

<<function Translcore.event_function>>=
let event_function exp lam =
  if !Clflags.debug then
    let repr = Some (ref 0) in
    let (info, body) = lam repr in
    (info,
     Levent(body, {lev_loc = exp.exp_loc.Location.loc_start;
                   lev_kind = Lev_function;
                   lev_repr = repr;
                   lev_env = () (* Env.summary  exp.exp_env*)}))
  else
    lam None
@

<<function Translcore.transl_exception>>=
(* Compile an exception definition *)

let transl_exception id decl =
    Lprim(Pmakeblock(0, Immutable),
          [Lconst(Const_base(Const_string(Ident.name id)))])
@



%-------------------------------------------------------------

<<./bytecomp/translcore.ml>>=
<<copyright header>>

(* Translation from typed abstract syntax to lambda terms,
   for the core language *)

open Misc
open Asttypes
open Primitive
open Path
open Types
open Typedtree
open Lambda

<<type Translcore.error>>

<<exception Translcore.Error>>

<<constant Translcore.comparisons_table>>

<<constant Translcore.primitives_table>>

let same_base_type ty1 ty2 =
  match (Ctype.repr ty1, Ctype.repr ty2) with
    (Tconstr(p1, []), Tconstr(p2, [])) -> Path.same p1 p2
  | (_, _) -> false

let maybe_pointer arg =
  not(same_base_type arg.exp_type Predef.type_int or
      same_base_type arg.exp_type Predef.type_char)


let array_kind arg =
  match Ctype.repr arg.exp_type with
    Tconstr(p, [ty]) when Path.same p Predef.path_array ->
      begin match Ctype.repr ty with
        Tvar v -> Pgenarray
      | Tconstr(p, _) ->
          if Path.same p Predef.path_int or Path.same p Predef.path_char then
            Pintarray
          else if Path.same p Predef.path_float then
            Pfloatarray
          else
            Paddrarray
      | _ -> Paddrarray
      end
  | _ -> Pgenarray (* This can happen with abbreviations that we can't expand
                      here because the typing environment is lost *)

let has_base_type exp base_ty = 
  same_base_type exp.exp_type base_ty

<<function Translcore.has_base_type>>

<<function Translcore.maybe_pointer>>

<<function Translcore.array_element_kind>>

<<function Translcore.array_kind>>

<<constant Translcore.prim_makearray>>

<<function Translcore.transl_prim>>

<<function Translcore.transl_primitive>>

(* To check the well-formedness of r.h.s. of "let rec" definitions *)

module IdentSet = Set

<<function Translcore.check_recursive_lambda>>

<<exception Translcore.Not_constant>>

<<constant Translcore.extract_constant>>

<<constant Translcore.extract_float>>

<<function Translcore.name_pattern>>

<<function Translcore.event_before>>

<<function Translcore.event_after>>

<<function Translcore.event_function>>

(* Translation of expressions *)

let rec transl_exp e =
  match e.exp_desc with
    Texp_ident(path, {val_prim = Some p}) ->
      transl_primitive p
  | Texp_ident(path, desc) ->
      transl_path path
  | Texp_constant cst ->
      Lconst(Const_base cst)
  | Texp_let(rec_flag, pat_expr_list, body) ->
      transl_let rec_flag pat_expr_list (event_before body (transl_exp body))
  | Texp_function pat_expr_list ->
      let ((kind, params), body) =
        event_function e
          (function repr ->
             transl_function e.exp_loc !Clflags.native_code repr pat_expr_list)
      in
      Lfunction(kind, params, body)
  | Texp_apply({exp_desc = Texp_ident(path, {val_prim = Some p})}, args)
    when List.length args = p.prim_arity ->
      let prim = transl_prim p args in
      let lam = Lprim(prim, transl_list args) in
      begin match prim with Pccall _ -> event_after e lam | _ -> lam end
  | Texp_apply(funct, args) ->
      let lam =
        match transl_exp funct with
         lexp ->
            Lapply(lexp, transl_list args) in
      event_after e lam
  | Texp_match({exp_desc = Texp_tuple argl} as arg, pat_expr_list) ->
      Matching.for_multiple_match e.exp_loc
        (transl_list argl) (transl_cases pat_expr_list)
  | Texp_match(arg, pat_expr_list) ->
      Matching.for_function e.exp_loc None
        (transl_exp arg) (transl_cases pat_expr_list)
  | Texp_try(body, pat_expr_list) ->
      let id = name_pattern "exn" pat_expr_list in
      Ltrywith(transl_exp body, id,
               Matching.for_trywith (Lvar id) (transl_cases pat_expr_list))
  | Texp_tuple el ->
      let ll = transl_list el in
      begin try
        Lconst(Const_block(0, List.map extract_constant ll))
      with Not_constant ->
        Lprim(Pmakeblock(0, Immutable), ll)
      end
  | Texp_construct(cstr, args) ->
      let ll = transl_list args in
      begin match cstr.cstr_tag with
        Cstr_constant n ->
          Lconst(Const_pointer n)
      | Cstr_block n ->
          begin try
            Lconst(Const_block(n, List.map extract_constant ll))
          with Not_constant ->
            Lprim(Pmakeblock(n, Immutable), ll)
          end
      | Cstr_exception path ->
          Lprim(Pmakeblock(0, Immutable), transl_path path :: ll)
      end
  | Texp_record ((lbl1, _) :: _ as lbl_expr_list) ->
      let lv = Array.create (Array.length lbl1.lbl_all) Lstaticfail in
      List.iter
        (fun (lbl, expr) -> lv.(lbl.lbl_pos) <- transl_exp expr)
        lbl_expr_list;
      let ll = Array.to_list lv in
      if List.exists (fun (lbl, expr) -> lbl.lbl_mut = Mutable) lbl_expr_list
      then begin
        match lbl1.lbl_repres with
          Record_regular -> Lprim(Pmakeblock(0, Mutable), ll)
        | Record_float -> Lprim(Pmakearray Pfloatarray, ll)
      end else begin
        try
          let cl = List.map extract_constant ll in
          match lbl1.lbl_repres with
            Record_regular -> Lconst(Const_block(0, cl))
          | Record_float ->
              Lconst(Const_float_array(List.map extract_float cl))
        with Not_constant ->
          match lbl1.lbl_repres with
            Record_regular -> Lprim(Pmakeblock(0, Immutable), ll)
          | Record_float -> Lprim(Pmakearray Pfloatarray, ll)
      end
  | Texp_field(arg, lbl) ->
      let access =
        match lbl.lbl_repres with
          Record_regular -> Pfield lbl.lbl_pos
        | Record_float -> Pfloatfield lbl.lbl_pos in
      Lprim(access, [transl_exp arg])
  | Texp_setfield(arg, lbl, newval) ->
      let access =
        match lbl.lbl_repres with
          Record_regular -> Psetfield(lbl.lbl_pos, maybe_pointer newval)
        | Record_float -> Psetfloatfield lbl.lbl_pos in
      Lprim(access, [transl_exp arg; transl_exp newval])
  | Texp_array expr_list ->
      let kind = array_kind e in
      let len = List.length expr_list in
      if len <= Config.max_young_wosize then
        Lprim(Pmakearray kind, transl_list expr_list)
      else begin
        let v = Ident.create "makearray" in
        let rec fill_fields pos = function
          [] ->
            Lvar v
        | arg :: rem ->
            Lsequence(Lprim(Parraysetu kind,
                            [Lvar v;
                             Lconst(Const_base(Const_int pos));
                             transl_exp arg]),
                      fill_fields (pos+1) rem) in
        Llet(Strict, v,
             Lprim(Pccall prim_makearray,
                   [Lconst(Const_base(Const_int len));
                    transl_exp (List.hd expr_list)]),
             fill_fields 1 (List.tl expr_list))
      end
  | Texp_ifthenelse(cond, ifso, Some ifnot) ->
      Lifthenelse(transl_exp cond,
                  event_before ifso (transl_exp ifso),
                  event_before ifnot (transl_exp ifnot))
  | Texp_ifthenelse(cond, ifso, None) ->
      Lifthenelse(transl_exp cond,
                  event_before ifso (transl_exp ifso),
                  lambda_unit)
  | Texp_sequence(expr1, expr2) ->
      Lsequence(transl_exp expr1, event_before expr2 (transl_exp expr2))
  | Texp_while(cond, body) ->
      Lwhile(transl_exp cond, event_before body (transl_exp body))
  | Texp_for(param, low, high, dir, body) ->
      Lfor(param, transl_exp low, transl_exp high, dir,
           event_before body (transl_exp body))
  | Texp_when(cond, body) ->
      event_before cond
        (Lifthenelse(transl_exp cond, event_before body (transl_exp body),
                     Lstaticfail))
  | _ ->
      fatal_error "Translcore.transl"

and transl_list expr_list =
  List.map transl_exp expr_list

and transl_cases pat_expr_list =
  List.map
    (fun (pat, expr) -> (pat, event_before expr (transl_exp expr)))
    pat_expr_list

and transl_tupled_cases patl_expr_list =
  List.map (fun (patl, expr) -> (patl, transl_exp expr)) patl_expr_list

and transl_function loc untuplify_fn repr pat_expr_list =
  match pat_expr_list with
    [pat, ({exp_desc = Texp_function pl} as exp)] ->
      let param = name_pattern "param" pat_expr_list in
      let ((_, params), body) = transl_function exp.exp_loc false repr pl in
      ((Curried, param :: params),
       Matching.for_function loc None (Lvar param) [pat, body])
  | ({pat_desc = Tpat_tuple pl}, _) :: _ when untuplify_fn ->
      begin try
        let size = List.length pl in
        let pats_expr_list =
          List.map
            (fun (pat, expr) -> (Matching.flatten_pattern size pat, expr))
            pat_expr_list in
        let params = List.map (fun p -> Ident.create "param") pl in
        ((Tupled, params),
         Matching.for_tupled_function loc params
                                      (transl_tupled_cases pats_expr_list))
      with Matching.Cannot_flatten ->
        let param = name_pattern "param" pat_expr_list in
        ((Curried, [param]),
         Matching.for_function loc repr (Lvar param)
           (transl_cases pat_expr_list))
      end
  | _ ->
      let param = name_pattern "param" pat_expr_list in
      ((Curried, [param]),
       Matching.for_function loc repr (Lvar param)
         (transl_cases pat_expr_list))

and transl_let rec_flag pat_expr_list body =
  match rec_flag with
    Nonrecursive ->
      let rec transl = function
        [] ->
          body
      | (pat, expr) :: rem ->
          Matching.for_let pat.pat_loc (transl_exp expr) pat (transl rem)
      in transl pat_expr_list
  | Recursive ->
      let idlist =
        List.map
          (fun (pat, expr) -> 
            match pat.pat_desc with
              Tpat_var id -> id
            | _ -> raise(Error(pat.pat_loc, Illegal_letrec_pat)))
        pat_expr_list in
      let transl_case (pat, expr) id =
        let lam = transl_exp expr in
        if not (check_recursive_lambda idlist lam) then
          raise(Error(expr.exp_loc, Illegal_letrec_expr));
        (id, lam) in
      Lletrec(List.map2 transl_case pat_expr_list idlist, body)

<<function Translcore.transl_exception>>

(* Error report *)

open Format

<<constant Translcore.report_error>>
@


\subsection*{[[./bytecomp/bytegen.mli]]}


<<signature Bytegen.compile_phrase>>=
val compile_phrase: lambda -> instruction list * instruction list
@


%-------------------------------------------------------------

<<./bytecomp/bytegen.mli>>=
<<copyright header>>

(* Generation of bytecode from lambda terms *)

open Lambda
open Instruct

<<signature Bytegen.compile_implementation>>
<<signature Bytegen.compile_phrase>>
@


\subsection*{[[./bytecomp/bytegen.ml]]}

<<constant Bytegen.label_counter>>=
(**** Label generation ****)

let label_counter = ref 0
@

<<function Bytegen.new_label>>=
let new_label () =
  incr label_counter; !label_counter
@

<<constant Bytegen.empty_env>>=
(**** Operations on compilation environments. ****)

let empty_env =
  { ce_stack = Ident.empty; ce_heap = Ident.empty }
@

<<function Bytegen.add_var>>=
(* Add a stack-allocated variable *)

let add_var id pos env =
  { ce_stack = Ident.add id pos env.ce_stack;
    ce_heap = env.ce_heap }
@

<<constant Bytegen.label_code>>=
(* Return a label to the beginning of the given continuation.
   If the sequence starts with a branch, use the target of that branch
   as the label, thus avoiding a jump to a jump. *)

let label_code = function
    Kbranch lbl :: _ as cont -> (lbl, cont)
  | Klabel lbl :: _ as cont -> (lbl, cont)
  | cont -> let lbl = new_label() in (lbl, Klabel lbl :: cont)
@

<<function Bytegen.make_branch>>=
(* Return a branch to the continuation. That is, an instruction that,
   when executed, branches to the continuation or performs what the
   continuation performs. We avoid generating branches to branches and
   branches to returns. *)

let make_branch cont =
  match cont with
    (Kbranch _ as branch) :: _ -> (branch, cont)
  | (Kreturn _ as return) :: _ -> (return, cont)
  | Kraise :: _ -> (Kraise, cont)
  | Klabel lbl :: _ -> (Kbranch lbl, cont)
  | _ -> let lbl = new_label() in (Kbranch lbl, Klabel lbl :: cont)
@

<<constant Bytegen.discard_dead_code>>=
(* Discard all instructions up to the next label.
   This function is to be applied to the continuation before adding a
   non-terminating instruction (branch, raise, return) in front of it. *)

let rec discard_dead_code = function
    [] -> []
  | (Klabel _ | Krestart | Ksetglobal _) :: _ as cont -> cont
  | _ :: cont -> discard_dead_code cont
@

<<constant Bytegen.is_tailcall>>=
(* Check if we're in tailcall position *)

let rec is_tailcall = function
    Kreturn _ :: _ -> true
  | Klabel _ :: c -> is_tailcall c
  | Kpop _ :: c -> is_tailcall c
  | _ -> false
@

<<function Bytegen.add_pop>>=
(* Add a Kpop N instruction in front of a continuation *)

let rec add_pop n cont =
  if n = 0 then cont else
    match cont with
      Kpop m :: cont -> add_pop (n + m) cont
    | Kreturn m :: cont -> Kreturn(n + m) :: cont
    | Kraise :: _ -> cont
    | _ -> Kpop n :: cont
@

<<constant Bytegen.add_const_unit>>=
(* Add the constant "unit" in front of a continuation *)

let add_const_unit = function
    (Kacc _ | Kconst _ | Kgetglobal _ | Kpush_retaddr _) :: _ as cont -> cont
  | cont -> Kconst const_unit :: cont
@

<<constant Bytegen.size_of_lambda>>=
let rec size_of_lambda = function
  | Lfunction(kind, params, body) as funct ->
      1 + IdentSet.cardinal(free_variables funct)
  | Lprim(Pmakeblock(tag, mut), args) -> List.length args
  | Lprim(Pmakearray kind, args) -> List.length args
  | Llet(str, id, arg, body) -> size_of_lambda body
  | Lletrec(bindings, body) -> size_of_lambda body
  | Levent (lam, _) -> size_of_lambda lam
  | _ -> fatal_error "Bytegen.size_of_lambda"
@

<<function Bytegen.copy_event>>=
(**** Merging consecutive events ****)

let copy_event ev kind info repr =
  { ev_pos = 0;                   (* patched in emitcode *)
    ev_module = ev.ev_module;
    ev_char = ev.ev_char;
    ev_kind = kind;
    ev_info = info;
    ev_typenv = ev.ev_typenv;
    ev_compenv = ev.ev_compenv;
    ev_stacksize = ev.ev_stacksize;
    ev_repr = repr }
@

<<function Bytegen.merge_infos>>=
let merge_infos ev ev' =
  match ev.ev_info, ev'.ev_info with
    Event_other, info -> info
  | info, Event_other -> info
  | _                 -> fatal_error "Bytegen.merge_infos"
@

<<function Bytegen.merge_repr>>=
let merge_repr ev ev' =
  match ev.ev_repr, ev'.ev_repr with
    Event_none, x -> x
  | x, Event_none -> x
  | Event_parent r, Event_child r' when r == r' && !r = 1 -> Event_none
  | _, _          -> fatal_error "Bytegen.merge_repr"
@

<<function Bytegen.merge_events>>=
let merge_events ev ev' =
  let (maj, min) =
    match ev.ev_kind, ev'.ev_kind with
    (* Discard pseudo-events *)    
      Event_pseudo,  _                              -> ev', ev
    | _,             Event_pseudo                   -> ev,  ev'
    (* Keep following event, supposedly more informative *)
    | Event_before,  (Event_after _ | Event_before) -> ev',  ev
    (* Discard following events, supposedly less informative *)
    | Event_after _, (Event_after _ | Event_before) -> ev, ev'
  in
  copy_event maj maj.ev_kind (merge_infos maj min) (merge_repr maj min)
@

<<function Bytegen.weaken_event>>=
let weaken_event ev cont =
  match ev.ev_kind with
    Event_after _ ->
      begin match cont with
        Kpush :: Kevent ({ev_repr = Event_none} as ev') :: c ->
          begin match ev.ev_info with
            Event_return _ ->
              (* Weaken event *)
              let repr = ref 1 in
              let ev =
                copy_event ev Event_pseudo ev.ev_info (Event_parent repr)
              and ev' =
                copy_event ev' ev'.ev_kind ev'.ev_info (Event_child repr)
              in
              Kevent ev :: Kpush :: Kevent ev' :: c
          | _ ->
              (* Only keep following event, equivalent *)
              cont
          end
      | _ ->
          Kevent ev :: cont
      end
  | _ ->
      Kevent ev :: cont
@

<<function Bytegen.add_event>>=
let add_event ev =
  function
    Kevent ev' :: cont -> weaken_event (merge_events ev ev') cont
  | cont               -> weaken_event ev cont
@

<<constant Bytegen.functions_to_compile>>=
(* Function bodies that remain to be compiled *)

let functions_to_compile  =
@

<<constant Bytegen.compunit_name>>=
(* Name of current compilation unit (for debugging events) *)

let compunit_name = ref ""
@

<<function Bytegen.comp_function>>=
(**** Compilation of functions ****)

let comp_function (params, fun_body, entry_lbl, free_vars) cont =
  let arity = List.length params in
  let rec pos_args pos delta = function
      [] -> Ident.empty
    | id :: rem -> Ident.add id pos (pos_args (pos+delta) delta rem) in
  let env =
    { ce_stack = pos_args arity (-1) params;
      ce_heap = pos_args 0 1 free_vars } in
  let cont1 =
    comp_expr env fun_body arity (Kreturn arity :: cont) in
  if arity > 1 then
    Krestart :: Klabel entry_lbl :: Kgrab(arity - 1) :: cont1
  else
    Klabel entry_lbl :: cont1
@

<<function Bytegen.comp_remainder>>=
let comp_remainder cont =
  let c = ref cont in
  begin try
    while true do
      c := comp_function (Stack.pop functions_to_compile) !c
    done
  with Stack.Empty ->
    ()
  end;
  !c
@

<<function Bytegen.compile_implementation>>=
(**** Compilation of a lambda phrase ****)

let compile_implementation modulename expr =
  Stack.clear functions_to_compile;
  label_counter := 0;
  lbl_staticfail := 0;
  sz_staticfail := 0;
  compunit_name := modulename;
  let init_code = comp_expr empty_env expr 0 [] in
  if Stack.length functions_to_compile > 0 then begin
    let lbl_init = new_label() in
    Kbranch lbl_init :: comp_remainder (Klabel lbl_init :: init_code)
  end else
    init_code
@

<<function Bytegen.compile_phrase>>=
let compile_phrase expr =
  Stack.clear functions_to_compile;
  label_counter := 0;
  lbl_staticfail := 0;
  sz_staticfail := 0;
  let init_code = comp_expr empty_env expr 1 [Kreturn 1] in
  let fun_code = comp_remainder [] in
  (init_code, fun_code)
@


%-------------------------------------------------------------

<<./bytecomp/bytegen.ml>>=
<<copyright header>>

(*  bytegen.ml : translation of lambda terms to lists of instructions. *)

open Misc
open Asttypes
open Primitive
open Types
open Lambda
open Instruct

<<constant Bytegen.label_counter>>

<<function Bytegen.new_label>>

<<constant Bytegen.empty_env>>

<<function Bytegen.add_var>>

(**** Examination of the continuation ****)

<<constant Bytegen.label_code>>

<<function Bytegen.make_branch>>

<<constant Bytegen.discard_dead_code>>

<<constant Bytegen.is_tailcall>>

<<function Bytegen.add_pop>>

<<constant Bytegen.add_const_unit>>

(**** Auxiliary for compiling "let rec" ****)

module IdentSet = Set

<<constant Bytegen.size_of_lambda>>

<<function Bytegen.copy_event>>

<<function Bytegen.merge_infos>>

<<function Bytegen.merge_repr>>

<<function Bytegen.merge_events>>

<<function Bytegen.weaken_event>>
  
<<function Bytegen.add_event>>

(**** Compilation of a lambda expression ****)

(* The label to which Lstaticfail branches, and the stack size at that point.*)

let lbl_staticfail = ref 0
and sz_staticfail = ref 0

<<constant Bytegen.functions_to_compile>>
  (Stack.create () : (Ident.t list * lambda * label * Ident.t list) Stack.t)

<<constant Bytegen.compunit_name>>

(* Compile an expression.
   The value of the expression is left in the accumulator.
   env = compilation environment
   exp = the lambda expression to compile
   sz = current size of the stack frame
   cont = list of instructions to execute afterwards
   Result = list of instructions that evaluate exp, then perform cont. *)

let rec comp_expr env exp sz cont =
  match exp with
    Lvar id ->
      begin try
        let pos = Ident.find_same id env.ce_stack in
        Kacc(sz - pos) :: cont
      with Not_found ->
      try
        let pos = Ident.find_same id env.ce_heap in
        Kenvacc(pos) :: cont
      with Not_found ->
        Ident.print id; print_newline();
        fatal_error "Bytegen.comp_expr: var"
      end
  | Lconst cst ->
      Kconst cst :: cont
  | Lapply(func, args) ->
      let nargs = List.length args in
      if is_tailcall cont then
        comp_args env args sz
          (Kpush :: comp_expr env func (sz + nargs)
            (Kappterm(nargs, sz + nargs) :: discard_dead_code cont))
      else
        if nargs < 4 then
          comp_args env args sz
            (Kpush :: comp_expr env func (sz + nargs) (Kapply nargs :: cont))
        else begin
          let (lbl, cont1) = label_code cont in
          Kpush_retaddr lbl ::
          comp_args env args (sz + 3)
            (Kpush :: comp_expr env func (sz + 3 + nargs)
                      (Kapply nargs :: cont1))
        end
  | Lfunction(kind, params, body) -> (* assume kind = Curried *)
      let lbl = new_label() in
      let fv = IdentSet.elements(free_variables exp) in
      Stack.push (params, body, lbl, fv) functions_to_compile;
      comp_args env (List.map (fun n -> Lvar n) fv) sz
        (Kclosure(lbl, List.length fv) :: cont)
  | Llet(str, id, arg, body) ->
      comp_expr env arg sz
        (Kpush :: comp_expr (add_var id (sz+1) env) body (sz+1)
          (add_pop 1 cont))
  | Lletrec(([id, Lfunction(kind, params, funct_body)] as decl), let_body) ->
      let lbl = new_label() in
      let fv =
        IdentSet.elements (free_variables (Lletrec(decl, lambda_unit))) in
      Stack.push (params, funct_body, lbl, id :: fv) functions_to_compile;
      comp_args env (List.map (fun n -> Lvar n) fv) sz
        (Kclosurerec(lbl, List.length fv) :: Kpush ::
          (comp_expr (add_var id (sz+1) env) let_body (sz+1)
                     (add_pop 1 cont)))
  | Lletrec(decl, body) ->
      let ndecl = List.length decl in
      let decl_size =
        List.map (fun (id, exp) -> (id, exp, size_of_lambda exp)) decl in
      let rec comp_decl new_env sz i = function
          [] ->
            comp_expr new_env body sz (add_pop ndecl cont)
        | (id, exp, blocksize) :: rem ->
            comp_expr new_env exp sz
              (Kpush :: Kacc i :: Kupdate blocksize ::
               comp_decl new_env sz (i-1) rem) in
      let rec comp_init new_env sz = function
          [] ->
            comp_decl new_env sz ndecl decl_size
        | (id, exp, blocksize) :: rem ->
            Kdummy blocksize :: Kpush ::
            comp_init (add_var id (sz+1) new_env) (sz+1) rem in
      comp_init env sz decl_size
  | Lprim(Pidentity, [arg]) ->
      comp_expr env arg sz cont
  | Lprim(Pnot, [arg]) ->
      let newcont =
        match cont with
          Kbranchif lbl :: cont1 -> Kbranchifnot lbl :: cont1
        | Kbranchifnot lbl :: cont1 -> Kbranchif lbl :: cont1
        | _ -> Kboolnot :: cont in
      comp_expr env arg sz newcont
  | Lprim(Psequand, [exp1; exp2]) ->
      begin match cont with
        Kbranchifnot lbl :: _ ->
          comp_expr env exp1 sz (Kbranchifnot lbl ::
            comp_expr env exp2 sz cont)
      | Kbranchif lbl :: cont1 ->
          let (lbl2, cont2) = label_code cont1 in
          comp_expr env exp1 sz (Kbranchifnot lbl2 ::
            comp_expr env exp2 sz (Kbranchif lbl :: cont2))
      | _ ->
          let (lbl, cont1) = label_code cont in
          comp_expr env exp1 sz (Kstrictbranchifnot lbl ::
            comp_expr env exp2 sz cont1)
      end
  | Lprim(Psequor, [exp1; exp2]) ->
      begin match cont with
        Kbranchif lbl :: _ ->
          comp_expr env exp1 sz (Kbranchif lbl ::
            comp_expr env exp2 sz cont)
      | Kbranchifnot lbl :: cont1 ->
          let (lbl2, cont2) = label_code cont1 in
          comp_expr env exp1 sz (Kbranchif lbl2 ::
            comp_expr env exp2 sz (Kbranchifnot lbl :: cont2))
      | _ ->
          let (lbl, cont1) = label_code cont in
          comp_expr env exp1 sz (Kstrictbranchif lbl ::
            comp_expr env exp2 sz cont1)
      end
  | Lprim(Praise, [arg]) ->
      comp_expr env arg sz (Kraise :: discard_dead_code cont)
  | Lprim((Paddint | Psubint as prim), [arg; Lconst(Const_base(Const_int n))])
    when n >= immed_min & n <= immed_max ->
      let ofs = if prim == Paddint then n else -n in
      comp_expr env arg sz (Koffsetint ofs :: cont)
  | Lprim(p, args) ->
      let instr =
        match p with
          Pgetglobal id -> Kgetglobal id
        | Psetglobal id -> Ksetglobal id
        | Pintcomp cmp -> Kintcomp cmp
        | Pmakeblock(tag, mut) -> Kmakeblock(List.length args, tag)
        | Pfield n -> Kgetfield n
        | Psetfield(n, ptr) -> Ksetfield n
        | Pfloatfield n -> Kgetfield n
        | Psetfloatfield n -> Ksetfield n
        | Pccall p -> Kccall(p.prim_name, p.prim_arity)
        | Pnegint -> Knegint
        | Paddint -> Kaddint
        | Psubint -> Ksubint
        | Pmulint -> Kmulint
        | Pdivint -> Kdivint
        | Pmodint -> Kmodint
        | Pandint -> Kandint
        | Porint -> Korint
        | Pxorint -> Kxorint
        | Plslint -> Klslint
        | Plsrint -> Klsrint
        | Pasrint -> Kasrint
        | Poffsetint n -> Koffsetint n
        | Poffsetref n -> Koffsetref n
        | Pintoffloat -> Kccall("int_of_float", 1)
        | Pfloatofint -> Kccall("float_of_int", 1)
        | Pnegfloat -> Kccall("neg_float", 1)
        | Pabsfloat -> Kccall("abs_float", 1)
        | Paddfloat -> Kccall("add_float", 2)
        | Psubfloat -> Kccall("sub_float", 2)
        | Pmulfloat -> Kccall("mul_float", 2)
        | Pdivfloat -> Kccall("div_float", 2)
        | Pfloatcomp Ceq -> Kccall("eq_float", 2)
        | Pfloatcomp Cneq -> Kccall("neq_float", 2)
        | Pfloatcomp Clt -> Kccall("lt_float", 2)
        | Pfloatcomp Cgt -> Kccall("gt_float", 2)
        | Pfloatcomp Cle -> Kccall("le_float", 2)
        | Pfloatcomp Cge -> Kccall("ge_float", 2)
        | Pstringlength -> Kccall("ml_string_length", 1)
        | Pstringrefs -> Kccall("string_get", 2)
        | Pstringsets -> Kccall("string_set", 3)
        | Pstringrefu -> Kgetstringchar
        | Pstringsetu -> Ksetstringchar
        | Pmakearray kind -> Kmakeblock(List.length args, 0)
        | Parraylength kind -> Kvectlength
        | Parrayrefs kind -> Kccall("array_get", 2)
        | Parraysets kind -> Kccall("array_set", 3)
        | Parrayrefu kind -> Kgetvectitem
        | Parraysetu kind -> Ksetvectitem
        | Pbittest -> Kccall("bitvect_test", 2)
        | _ -> fatal_error "Bytegen.comp_expr: prim" in
      comp_args env args sz (instr :: cont)
  | Lcatch(body, Lstaticfail) ->
      comp_expr env body sz cont
  | Lcatch(body, handler) ->
      let (branch1, cont1) = make_branch cont in
      let (lbl_handler, cont2) = label_code (comp_expr env handler sz cont1) in
      let saved_lbl_staticfail = !lbl_staticfail
      and saved_sz_staticfail = !sz_staticfail in
      lbl_staticfail := lbl_handler;
      sz_staticfail := sz;
      let cont3 = comp_expr env body sz (branch1 :: cont2) in
      lbl_staticfail := saved_lbl_staticfail;
      sz_staticfail := saved_sz_staticfail;
      cont3
  | Lstaticfail ->
      add_pop (sz - !sz_staticfail)
              (Kbranch !lbl_staticfail :: discard_dead_code cont)
  | Ltrywith(body, id, handler) ->
      let (branch1, cont1) = make_branch cont in
      let lbl_handler = new_label() in
      Kpushtrap lbl_handler :: 
        comp_expr env body (sz+4) (Kpoptrap :: branch1 :: 
          Klabel lbl_handler :: Kpush ::
            comp_expr (add_var id (sz+1) env) handler (sz+1) (add_pop 1 cont1))
  | Lifthenelse(cond, ifso, ifnot) ->
      comp_binary_test env cond ifso ifnot sz cont
  | Lsequence(exp1, exp2) ->
      comp_expr env exp1 sz (comp_expr env exp2 sz cont)
  | Lwhile(cond, body) ->
      let lbl_loop = new_label() in
      let lbl_test = new_label() in
      Kbranch lbl_test :: Klabel lbl_loop :: Kcheck_signals ::
        comp_expr env body sz
          (Klabel lbl_test ::
            comp_expr env cond sz (Kbranchif lbl_loop :: add_const_unit cont))
  | Lfor(param, start, stop, dir, body) ->
      let lbl_loop = new_label() in
      let lbl_test = new_label() in
      let offset = match dir with Upto -> 1 | Downto -> -1 in
      let comp = match dir with Upto -> Cle | Downto -> Cge in
      comp_expr env start sz
        (Kpush :: comp_expr env stop (sz+1)
          (Kpush :: Kbranch lbl_test ::
           Klabel lbl_loop :: Kcheck_signals ::
           comp_expr (add_var param (sz+1) env) body (sz+2)
             (Kacc 1 :: Koffsetint offset :: Kassign 1 ::
              Klabel lbl_test ::
              Kacc 0 :: Kpush :: Kacc 2 :: Kintcomp comp ::
              Kbranchif lbl_loop ::
              add_const_unit (add_pop 2 cont))))
  | Lswitch(arg, sw) ->
      let (branch, cont1) = make_branch cont in
      let c = ref (discard_dead_code cont1) in
      let act_consts = Array.create sw.sw_numconsts Lstaticfail in
      List.iter (fun (n, act) -> act_consts.(n) <- act) sw.sw_consts;
      let act_blocks = Array.create sw.sw_numblocks Lstaticfail in
      List.iter (fun (n, act) -> act_blocks.(n) <- act) sw.sw_blocks;
      let lbl_consts = Array.create sw.sw_numconsts 0 in
      let lbl_blocks = Array.create sw.sw_numblocks 0 in
      for i = sw.sw_numblocks - 1 downto 0 do
        let (lbl, c1) =
          label_code(comp_expr env act_blocks.(i) sz (branch :: !c)) in
        lbl_blocks.(i) <- lbl;
        c := discard_dead_code c1
      done;
      for i = sw.sw_numconsts - 1 downto 0 do
        let (lbl, c1) =
          label_code(comp_expr env act_consts.(i) sz (branch :: !c)) in
        lbl_consts.(i) <- lbl;
        c := discard_dead_code c1
      done;
      if sw.sw_checked then c := comp_expr env Lstaticfail sz !c;        
      comp_expr env arg sz (Kswitch(lbl_consts, lbl_blocks) :: !c)
  | Lassign(id, expr) ->
      begin try
        let pos = Ident.find_same id env.ce_stack in
        comp_expr env expr sz (Kassign(sz - pos) :: cont)
      with Not_found ->
        fatal_error "Bytegen.comp_expr: assign"
      end
  | Levent(lam, lev) ->
      let event kind info =
        { ev_pos = 0;                   (* patched in emitcode *)
          ev_module = !compunit_name;
          ev_char = lev.lev_loc;
          ev_kind = kind;
          ev_info = info;
          ev_typenv = lev.lev_env;
          ev_compenv = env;
          ev_stacksize = sz;
          ev_repr =
            begin match lev.lev_repr with
              None ->
                Event_none
            | Some ({contents = 1} as repr) when lev.lev_kind = Lev_function ->
                Event_child repr
            | Some ({contents = 1} as repr) ->
                Event_parent repr
            | Some repr when lev.lev_kind = Lev_function ->
                Event_parent repr
            | Some repr ->
                Event_child repr
            end }
      in
      begin match lev.lev_kind with
        Lev_before ->
          let c = comp_expr env lam sz cont in
          let ev = event Event_before Event_other in
          add_event ev c
      | Lev_function ->
          let c = comp_expr env lam sz cont in
          let ev = event Event_pseudo Event_function in
          add_event ev c
      | Lev_after _ when is_tailcall cont -> (* don't destroy tail call opt *)
          comp_expr env lam sz cont
      | Lev_after ty ->
          let info =
            match lam with
              Lapply(_, args)   -> Event_return (List.length args)
            | _                 -> Event_other
          in
          let ev = event (Event_after ty) info in
          let cont1 = add_event ev cont in
          comp_expr env lam sz cont1
      end

(* Compile a list of arguments [e1; ...; eN] to a primitive operation.
   The values of eN ... e2 are pushed on the stack, e2 at top of stack,
   then e3, then ... The value of e1 is left in the accumulator. *)

and comp_args env argl sz cont =
  comp_expr_list env (List.rev argl) sz cont

and comp_expr_list env exprl sz cont =
  match exprl with
    [] -> cont
  | [exp] -> comp_expr env exp sz cont
  | exp :: rem ->
      comp_expr env exp sz (Kpush :: comp_expr_list env rem (sz+1) cont)

(* Compile an if-then-else test. *)

and comp_binary_test env cond ifso ifnot sz cont =
  let cont_cond =
    if ifnot = Lconst const_unit then begin
      let (lbl_end, cont1) = label_code cont in
      Kstrictbranchifnot lbl_end :: comp_expr env ifso sz cont1
    end else
    if ifso = Lstaticfail & sz = !sz_staticfail then
      Kbranchif !lbl_staticfail :: comp_expr env ifnot sz cont
    else
    if ifnot = Lstaticfail & sz = !sz_staticfail then
      Kbranchifnot !lbl_staticfail :: comp_expr env ifso sz cont
    else begin
      let (branch_end, cont1) = make_branch cont in
      let (lbl_not, cont2) = label_code(comp_expr env ifnot sz cont1) in
      Kbranchifnot lbl_not :: comp_expr env ifso sz (branch_end :: cont2)
    end in
  comp_expr env cond sz cont_cond

<<function Bytegen.comp_function>>

<<function Bytegen.comp_remainder>>

<<function Bytegen.compile_implementation>>

<<function Bytegen.compile_phrase>>

@


\subsection*{[[./bytecomp/translmod.mli]]}




%-------------------------------------------------------------

<<./bytecomp/translmod.mli>>=
<<copyright header>>

(* Translation from typed abstract syntax to lambda terms,
   for the module language *)

open Typedtree
open Lambda

<<signature Translmod.transl_implementation>>
<<signature Translmod.transl_store_implementation>>
<<signature Translmod.transl_toplevel_definition>>

<<signature Translmod.primitive_declarations>>
@


\subsection*{[[./bytecomp/translmod.ml]]}

<<function Translmod.reset_labels>>=
let reset_labels () =
  ()
@
% (*  used_methods := [] *)

<<function Translmod.transl_label_init>>=
let transl_label_init expr =
  expr
@
%(*
%  if !used_methods = [] then
%    expr
%  else
%    let init = Ident.create "new_method" in
%    let expr' =
%      Llet(StrictOpt, init, oo_prim "new_method",
%      List.fold_right
%        (fun (lab, id) expr ->
%           Llet(StrictOpt, id, Lapply(Lvar init, [string lab]), expr))
%        !used_methods
%        expr)
%    in
%    reset_labels ();
%    expr'
%*)

<<function Translmod.compose_coercions>>=
(* Compose two coercions
   apply_coercion c1 (apply_coercion c2 e) behaves like
   apply_coercion (compose_coercions c1 c2) e. *)

let rec compose_coercions c1 c2 =
  match (c1, c2) with
    (Tcoerce_none, c2) -> c2
  | (c1, Tcoerce_none) -> c1
  | (Tcoerce_structure pc1, Tcoerce_structure pc2) ->
      let v2 = Array.of_list pc2 in
      Tcoerce_structure
        (List.map (fun (p1, c1) ->
                let (p2, c2) = v2.(p1) in (p2, compose_coercions c1 c2))
             pc1)
  | (_, _) ->
      fatal_error "Translmod.compose_coercions"
@

<<constant Translmod.primitive_declarations>>=
(* Record the primitive declarations occuring in the module compiled *)

let primitive_declarations = ref ([] : string list)
@

<<function Translmod.transl_implementation>>=
(* Compile an implementation *)

let transl_implementation module_name str cc =
  reset_labels ();
  primitive_declarations := [];
  let module_id = Ident.create_persistent module_name in
  Lprim(Psetglobal module_id, [transl_label_init (transl_structure [] cc str)])
@

<<function Translmod.transl_store_structure>>=
(* A variant of transl_structure used to compile toplevel structure definitions
   for the native-code compiler. Store the defined values in the fields
   of the global as soon as they are defined, in order to reduce register
   pressure.
   "map" is a table from idents to (position in global block, coercion).
   "prim" is a list of (position in global block, primitive declaration). *)

let transl_store_structure glob map prims str =
  let rec transl_store = function
    [] ->
      lambda_unit
  | Tstr_eval expr :: rem ->
      Lsequence(transl_exp expr, transl_store rem)
  | Tstr_value(rec_flag, pat_expr_list) :: rem ->
      transl_let rec_flag pat_expr_list
        (store_idents glob map (let_bound_idents pat_expr_list)
          (transl_store rem))
  | Tstr_primitive(id, descr) :: rem ->
      begin match descr.val_prim with
        Some p -> primitive_declarations :=
                        p.Primitive.prim_name :: !primitive_declarations
      | _ -> ()
      end;
      transl_store rem
  | Tstr_type(decls) :: rem ->
      transl_store rem
  | Tstr_exception(id, decl) :: rem ->
      Llet(Strict, id, transl_exception id decl,
           store_ident glob map id (transl_store rem))
  | Tstr_module(id, modl) :: rem ->
      Llet(Strict, id, transl_module Tcoerce_none modl,
           store_ident glob map id (transl_store rem))
  | Tstr_open path :: rem ->
      transl_store rem

  and store_ident glob map id cont =
    try
      let (pos, cc) = Ident.find_same id map in
      let init_val = apply_coercion cc (Lvar id) in
      Lsequence
       (Lprim(Psetfield(pos, false), [Lprim(Pgetglobal glob, []); init_val]),
        cont)
    with Not_found ->
      cont

  and store_idents glob map idlist cont =
    List.fold_right (store_ident glob map) idlist cont

  and store_primitive (pos, prim) cont =
    Lsequence(Lprim(Psetfield(pos, false),
                    [Lprim(Pgetglobal glob, []); transl_primitive prim]),
              cont)
  in
    List.fold_right store_primitive prims (transl_store str)
@

<<constant Translmod.defined_idents>>=
(* Build the list of value identifiers defined by a toplevel structure *)

let rec defined_idents = function
    [] -> []
  | Tstr_eval expr :: rem -> defined_idents rem
  | Tstr_value(rec_flag, pat_expr_list) :: rem ->
      let_bound_idents pat_expr_list @ defined_idents rem
  | Tstr_primitive(id, descr) :: rem -> defined_idents rem
  | Tstr_type decls :: rem -> defined_idents rem
  | Tstr_exception(id, decl) :: rem -> id :: defined_idents rem
  | Tstr_module(id, modl) :: rem -> id :: defined_idents rem
  | Tstr_open path :: rem -> defined_idents rem
@

<<function Translmod.build_ident_map>>=
(* Transform a coercion and the list of value identifiers built above
   into a table id -> (pos, coercion), with [pos] being the position
   in the global block where the value of [id] must be stored,
   and [coercion] the coercion to be applied to it.
   A given identifier may appear several times
   in the coercion (if it occurs several times in the signature); remember
   to assign it the position of its last occurrence.
   Also buid a list of primitives and their positions in the global block,
   and the total size of the global block. *)

let build_ident_map restr idlist =
  match restr with
    Tcoerce_none ->
      let rec build_map pos map = function
        [] ->
          (map, [], pos)
      | id :: rem ->
          build_map (pos+1) (Ident.add id (pos, Tcoerce_none) map) rem
      in build_map 0 Ident.empty idlist
  | Tcoerce_structure pos_cc_list ->
      let idarray = Array.of_list idlist in
      let rec build_map pos map prims = function
        [] ->
          (map, prims, pos)
      | (source_pos, Tcoerce_primitive p) :: rem ->
          build_map (pos+1) map ((pos, p) :: prims) rem
      | (source_pos, cc) :: rem ->
          build_map (pos+1) (Ident.add idarray.(source_pos) (pos, cc) map)
                    prims rem
      in build_map 0 Ident.empty [] pos_cc_list
  | _ ->
      fatal_error "Translmod.build_ident_map"
@

<<function Translmod.transl_store_implementation>>=
(* Compile an implementation using transl_store_structure 
   (for the native-code compiler). *)

let transl_store_implementation module_name str restr =
  reset_labels ();
  primitive_declarations := [];
  let module_id = Ident.create_persistent module_name in
  let (map, prims, size) = build_ident_map restr (defined_idents str) in
  (size, transl_label_init (transl_store_structure module_id map prims str))
@

<<function Translmod.make_sequence>>=
(* Compile a sequence of expressions *)

let rec make_sequence fn = function
    [] -> lambda_unit
  | [x] -> fn x
  | x::rem ->
      let lam = fn x in Lsequence(lam, make_sequence fn rem)
@

<<constant Translmod.transl_toplevel_item>>=
(* Compile a toplevel phrase *)

let transl_toplevel_item = function
    Tstr_eval expr ->
      transl_exp expr
  | Tstr_value(rec_flag, pat_expr_list) ->
      let idents = let_bound_idents pat_expr_list in
      let lam =
        transl_let rec_flag pat_expr_list
          (make_sequence (fun id -> Lprim(Psetglobal id, [Lvar id])) idents) in
      List.iter Ident.make_global idents;
      lam
  | Tstr_primitive(id, descr) ->
      lambda_unit
  | Tstr_type(decls) ->
      lambda_unit
  | Tstr_exception(id, decl) ->
      Ident.make_global id;
      Lprim(Psetglobal id, [transl_exception id decl])
  | Tstr_module(id, modl) ->
      Ident.make_global id;
      Lprim(Psetglobal id, [transl_module Tcoerce_none modl])
  | Tstr_open path ->
      lambda_unit
@

<<function Translmod.transl_toplevel_definition>>=
let transl_toplevel_definition str =
  reset_labels ();
  transl_label_init (make_sequence transl_toplevel_item str)
@


%-------------------------------------------------------------

<<./bytecomp/translmod.ml>>=
<<copyright header>>

(* Translation from typed abstract syntax to lambda terms,
   for the module language *)

open Misc
open Asttypes
open Types
open Typedtree
open Lambda
open Translcore

<<function Translmod.reset_labels>>

<<function Translmod.transl_label_init>>

(* Compile a coercion *)

let rec apply_coercion restr arg =
  match restr with
    Tcoerce_none ->
      arg
  | Tcoerce_structure pos_cc_list ->
      name_lambda arg (fun id ->
        Lprim(Pmakeblock(0, Immutable),
              List.map (apply_coercion_field id) pos_cc_list))
  | Tcoerce_primitive p ->
      fatal_error "Translmod.apply_coercion"

and apply_coercion_field id (pos, cc) =
  match cc with
    Tcoerce_primitive p -> transl_primitive p
  | _ -> apply_coercion cc (Lprim(Pfield pos, [Lvar id]))

<<function Translmod.compose_coercions>>

<<constant Translmod.primitive_declarations>>

(* Compile a module expression *)

let rec transl_module cc mexp =
  match mexp.mod_desc with
    Tmod_ident path ->
      apply_coercion cc (transl_path path)
  | Tmod_structure str ->
      transl_structure [] cc str
  | Tmod_constraint(arg, mty, ccarg) ->
      transl_module (compose_coercions cc ccarg) arg

and transl_structure fields cc = function
    [] ->
      begin match cc with
        Tcoerce_none ->
          Lprim(Pmakeblock(0, Immutable),
                List.map (fun id -> Lvar id) (List.rev fields))
      | Tcoerce_structure pos_cc_list ->
          let v = Array.of_list (List.rev fields) in
          Lprim(Pmakeblock(0, Immutable),
                List.map
                  (fun (pos, cc) ->
                    match cc with
                      Tcoerce_primitive p -> transl_primitive p
                    | _ -> apply_coercion cc (Lvar v.(pos)))
                  pos_cc_list)
      | _ ->
          fatal_error "Translmod.transl_structure"
      end
  | Tstr_eval expr :: rem ->
      Lsequence(transl_exp expr, transl_structure fields cc rem)
  | Tstr_value(rec_flag, pat_expr_list) :: rem ->
      let ext_fields = rev_let_bound_idents pat_expr_list @ fields in
      transl_let rec_flag pat_expr_list (transl_structure ext_fields cc rem)
  | Tstr_primitive(id, descr) :: rem ->
      begin match descr.val_prim with
        Some p -> primitive_declarations :=
                        p.Primitive.prim_name :: !primitive_declarations
      | _ -> ()
      end;
      transl_structure fields cc rem
  | Tstr_type(decls) :: rem ->
      transl_structure fields cc rem
  | Tstr_exception(id, decl) :: rem ->
      Llet(Strict, id, transl_exception id decl,
           transl_structure (id :: fields) cc rem)
  | Tstr_module(id, modl) :: rem ->
      Llet(Strict, id, transl_module Tcoerce_none modl,
           transl_structure (id :: fields) cc rem)
  | Tstr_open path :: rem ->
      transl_structure fields cc rem

<<function Translmod.transl_implementation>>

<<function Translmod.transl_store_structure>>

<<constant Translmod.defined_idents>>

<<function Translmod.build_ident_map>>
        
<<function Translmod.transl_store_implementation>>

<<function Translmod.make_sequence>>

<<constant Translmod.transl_toplevel_item>>

<<function Translmod.transl_toplevel_definition>>
@


\subsection*{[[./bytecomp/emitcode.mli]]}


<<signature Emitcode.to_memory>>=
val to_memory: instruction list -> instruction list ->
                    string * int * (reloc_info * int) list
        (* Arguments:
             initialization code (terminated by STOP)
             function code
           Results:
             block of relocatable bytecode
             size of this block
             relocation information *)
@


%-------------------------------------------------------------

<<./bytecomp/emitcode.mli>>=
<<copyright header>>

(* Generation of bytecode for .cmo files *)

open Lambda
open Instruct

<<type Emitcode.reloc_info>>

<<type Emitcode.compilation_unit>>

<<signature Emitcode.to_file>>
<<signature Emitcode.to_memory>>

@


\subsection*{[[./bytecomp/emitcode.ml]]}



<<function Emitcode.out_word>>=
let out_word b1 b2 b3 b4 =
  let p = !out_position in
  if p >= String.length !out_buffer then begin
    let len = String.length !out_buffer in
    let new_buffer = String.create (2 * len) in
    String.blit !out_buffer 0 new_buffer 0 len;
    out_buffer := new_buffer
  end;
  String.unsafe_set !out_buffer p (Char.unsafe_chr b1);
  String.unsafe_set !out_buffer (p+1) (Char.unsafe_chr b2);
  String.unsafe_set !out_buffer (p+2) (Char.unsafe_chr b3);
  String.unsafe_set !out_buffer (p+3) (Char.unsafe_chr b4);
  out_position := p + 4
@

<<function Emitcode.out>>=
let out opcode =
  out_word opcode 0 0 0
@

<<function Emitcode.out_int>>=
let out_int n =
  out_word n (n asr 8) (n asr 16) (n asr 24)
@

<<type Emitcode.label_definition>>=
(* Handling of local labels and backpatching *)

type label_definition =
    Label_defined of int
  | Label_undefined of (int * int) list
@

<<constant Emitcode.label_table>>=
let label_table  = ref ([| |] : label_definition array)
@

<<function Emitcode.extend_label_table>>=
let extend_label_table needed =
  let new_size = ref(Array.length !label_table) in
  while needed >= !new_size do new_size := 2 * !new_size done;
  let new_table = Array.create !new_size (Label_undefined []) in
  Array.blit !label_table 0 new_table 0 (Array.length !label_table);
  label_table := new_table
@

<<function Emitcode.backpatch>>=
let backpatch (pos, orig) =
  let displ = (!out_position - orig) asr 2 in
  !out_buffer.[pos] <- Char.unsafe_chr displ;
  !out_buffer.[pos+1] <- Char.unsafe_chr (displ asr 8);
  !out_buffer.[pos+2] <- Char.unsafe_chr (displ asr 16);
  !out_buffer.[pos+3] <- Char.unsafe_chr (displ asr 24)
@

<<function Emitcode.define_label>>=
let define_label lbl =
  if lbl >= Array.length !label_table then extend_label_table lbl;
  match (!label_table).(lbl) with
    Label_defined _ ->
      fatal_error "Emitcode.define_label"
  | Label_undefined patchlist ->
      List.iter backpatch patchlist;
      (!label_table).(lbl) <- Label_defined !out_position
@

<<function Emitcode.out_label_with_orig>>=
let out_label_with_orig orig lbl =
  if lbl >= Array.length !label_table then extend_label_table lbl;
  match (!label_table).(lbl) with
    Label_defined def ->
      out_int((def - orig) asr 2)
  | Label_undefined patchlist ->
      (!label_table).(lbl) <-
         Label_undefined((!out_position, orig) :: patchlist);
      out_int 0
@

<<function Emitcode.out_label>>=
let out_label l = out_label_with_orig !out_position l
@

<<constant Emitcode.reloc_info>>=
(* Relocation information *)

let reloc_info = ref ([] : (reloc_info * int) list)
@

<<function Emitcode.enter>>=
let enter info =
  reloc_info := (info, !out_position) :: !reloc_info
@


<<function Emitcode.init>>=
(* Initialization *)

let init () =
  out_position := 0;
  label_table := Array.create 16 (Label_undefined []);
  reloc_info := [];
  events := []
@

<<constant Emitcode.emit_instr>>=
(* Emission of one instruction *)

let emit_instr = function
    Klabel lbl -> define_label lbl
  | Kacc n ->
      if n < 8 then out(opACC0 + n) else (out opACC; out_int n)
  | Kenvacc n ->
      if n < 4 then out(opENVACC1 + n) else (out opENVACC; out_int (n+1))
  | Kpush ->
      out opPUSH
  | Kpop n ->
      out opPOP; out_int n
  | Kassign n ->
      out opASSIGN; out_int n
  | Kpush_retaddr lbl -> out opPUSH_RETADDR; out_label lbl
  | Kapply n ->
      if n < 4 then out(opAPPLY1 + n - 1) else (out opAPPLY; out_int n)
  | Kappterm(n, sz) ->
      if n < 4 then (out(opAPPTERM1 + n - 1); out_int sz)
               else (out opAPPTERM; out_int n; out_int sz)
  | Kreturn n -> out opRETURN; out_int n
  | Krestart -> out opRESTART
  | Kgrab n -> out opGRAB; out_int n
  | Kclosure(lbl, n) -> out opCLOSURE; out_int n; out_label lbl
  | Kclosurerec(lbl, n) -> out opCLOSUREREC; out_int n; out_label lbl
  | Kgetglobal q -> out opGETGLOBAL; slot_for_getglobal q
  | Ksetglobal q -> out opSETGLOBAL; slot_for_setglobal q
  | Kconst sc ->
      begin match sc with
        Const_base(Const_int i) when i >= immed_min & i <= immed_max ->
          if i >= 0 & i <= 3
          then out (opCONST0 + i)
          else (out opCONSTINT; out_int i)
      | Const_base(Const_char c) ->
          out opCONSTINT; out_int (Char.code c)
      | Const_pointer i ->
          if i >= 0 & i <= 3
          then out (opCONST0 + i)
          else (out opCONSTINT; out_int i)
      | Const_block(t, []) ->
          if t = 0 then out opATOM0 else (out opATOM; out_int t)
      | _ ->
          out opGETGLOBAL; slot_for_literal sc
      end
  | Kmakeblock(n, t) ->
      if n = 0 then
        if t < 4 then out (opATOM0 + t) else (out opATOM; out_int t)
      else if n < 4 then (out(opMAKEBLOCK1 + n - 1); out_int t)
      else (out opMAKEBLOCK; out_int n; out_int t)
  | Kgetfield n ->
      if n < 4 then out(opGETFIELD0 + n) else (out opGETFIELD; out_int n)
  | Ksetfield n ->
      if n < 4 then out(opSETFIELD0 + n) else (out opSETFIELD; out_int n)
  | Kdummy n ->
      if n = 0 then out opATOM0 else (out opDUMMY; out_int n)
  | Kupdate n -> out opUPDATE
  | Kvectlength -> out opVECTLENGTH
  | Kgetvectitem -> out opGETVECTITEM
  | Ksetvectitem -> out opSETVECTITEM
  | Kgetstringchar -> out opGETSTRINGCHAR
  | Ksetstringchar -> out opSETSTRINGCHAR
  | Kbranch lbl -> out opBRANCH; out_label lbl
  | Kbranchif lbl -> out opBRANCHIF; out_label lbl
  | Kbranchifnot lbl -> out opBRANCHIFNOT; out_label lbl
  | Kstrictbranchif lbl -> out opBRANCHIF; out_label lbl
  | Kstrictbranchifnot lbl -> out opBRANCHIFNOT; out_label lbl
  | Kswitch(tbl_const, tbl_block) ->
      out opSWITCH;
      out_int (Array.length tbl_const + (Array.length tbl_block lsl 16));
      let org = !out_position in
      Array.iter (out_label_with_orig org) tbl_const;
      Array.iter (out_label_with_orig org) tbl_block
  | Kboolnot -> out opBOOLNOT
  | Kpushtrap lbl -> out opPUSHTRAP; out_label lbl
  | Kpoptrap -> out opPOPTRAP
  | Kraise -> out opRAISE
  | Kcheck_signals -> out opCHECK_SIGNALS
  | Kccall(name, n) ->
      if n <= 5
      then (out (opC_CALL1 + n - 1); slot_for_c_prim name)
      else (out opC_CALLN; out_int n; slot_for_c_prim name)
  | Knegint -> out opNEGINT  | Kaddint -> out opADDINT
  | Ksubint -> out opSUBINT  | Kmulint -> out opMULINT
  | Kdivint -> out opDIVINT  | Kmodint -> out opMODINT
  | Kandint -> out opANDINT  | Korint -> out opORINT
  | Kxorint -> out opXORINT  | Klslint -> out opLSLINT
  | Klsrint -> out opLSRINT  | Kasrint -> out opASRINT
  | Kintcomp Ceq -> out opEQ         | Kintcomp Cneq -> out opNEQ
  | Kintcomp Clt -> out opLTINT      | Kintcomp Cle -> out opLEINT
  | Kintcomp Cgt -> out opGTINT      | Kintcomp Cge -> out opGEINT
  | Koffsetint n -> out opOFFSETINT; out_int n
  | Koffsetref n -> out opOFFSETREF; out_int n
  | Kevent ev -> record_event ev
  | Kstop -> out opSTOP
@

<<constant Emitcode.emit>>=
(* Emission of a list of instructions. Include some peephole optimization. *)

let rec emit = function
    [] -> ()
  (* Peephole optimizations *)
  | Kpush :: Kacc n :: c ->
      if n < 8 then out(opPUSHACC0 + n) else (out opPUSHACC; out_int n);
      emit c
  | Kpush :: Kenvacc n :: c ->
      if n < 4 then out(opPUSHENVACC1 + n)
               else (out opPUSHENVACC; out_int (n+1));
      emit c
  | Kpush :: Kgetglobal id :: Kgetfield n :: c ->
      out opPUSHGETGLOBALFIELD; slot_for_getglobal id; out_int n; emit c
  | Kpush :: Kgetglobal id :: c ->
      out opPUSHGETGLOBAL; slot_for_getglobal id; emit c
  | Kpush :: Kconst sc :: c ->
      begin match sc with
        Const_base(Const_int i) when i >= immed_min & i <= immed_max ->
          if i >= 0 & i <= 3
          then out (opPUSHCONST0 + i)
          else (out opPUSHCONSTINT; out_int i)
      | Const_base(Const_char c) ->
          out opPUSHCONSTINT; out_int(Char.code c)
      | Const_pointer i ->
          if i >= 0 & i <= 3
          then out (opPUSHCONST0 + i)
          else (out opPUSHCONSTINT; out_int i)
      | Const_block(t, []) ->
          if t = 0 then out opPUSHATOM0 else (out opPUSHATOM; out_int t)
      | _ ->
          out opPUSHGETGLOBAL; slot_for_literal sc
      end;
      emit c
  | Kpush :: (Kevent {ev_kind = Event_before} as ev) ::
    (Kgetglobal _ as instr1) :: (Kgetfield _ as instr2) :: c ->
      emit (Kpush :: instr1 :: instr2 :: ev :: c)
  | Kpush :: (Kevent {ev_kind = Event_before} as ev) ::
    (Kacc _ | Kenvacc _ | Kgetglobal _ | Kconst _ as instr) :: c ->
      emit (Kpush :: instr :: ev :: c)
  | Kgetglobal id :: Kgetfield n :: c ->
      out opGETGLOBALFIELD; slot_for_getglobal id; out_int n; emit c
  (* Default case *)
  | instr :: c ->
      emit_instr instr; emit c
@


<<function Emitcode.to_memory>>=
(* Emission to a memory block *)

let to_memory init_code fun_code =
  init();
  emit init_code;
  emit fun_code;
  let code = Meta.static_alloc !out_position in
  String.unsafe_blit !out_buffer 0 code 0 !out_position;
  let reloc = List.rev !reloc_info
  and code_size = !out_position in
  init();
  (code, code_size, reloc)
@


%-------------------------------------------------------------

<<./bytecomp/emitcode.ml>>=
<<copyright header>>

(* Generation of bytecode + relocation information *)

open Config
open Misc
open Asttypes
open Lambda
open Instruct
open Opcodes


<<type Emitcode.reloc_info>>

<<type Emitcode.compilation_unit>>

(* Format of a .cmo file:
     magic number (Config.cmo_magic_number)
     absolute offset of compilation unit descriptor
     block of relocatable bytecode
     compilation unit descriptor *)

(* Buffering of bytecode *)

let out_buffer = ref(String.create 1024)
and out_position = ref 0

<<function Emitcode.out_word>>

<<function Emitcode.out>>

<<function Emitcode.out_int>>

<<type Emitcode.label_definition>>

<<constant Emitcode.label_table>>

<<function Emitcode.extend_label_table>>

<<function Emitcode.backpatch>>

<<function Emitcode.define_label>>

<<function Emitcode.out_label_with_orig>>

<<function Emitcode.out_label>>

<<constant Emitcode.reloc_info>>

<<function Emitcode.enter>>

let slot_for_literal sc =
  enter (Reloc_literal sc);
  out_int 0
and slot_for_getglobal id =
  enter (Reloc_getglobal id);
  out_int 0
and slot_for_setglobal id =
  enter (Reloc_setglobal id);
  out_int 0
and slot_for_c_prim name =
  enter (Reloc_primitive name);
  out_int 0

<<constant Emitcode.events>>

<<function Emitcode.record_event>>

<<function Emitcode.init>>

<<constant Emitcode.emit_instr>>

<<constant Emitcode.emit>>

<<function Emitcode.to_file>>

<<function Emitcode.to_memory>>
@


\subsection*{[[./bytecomp/bytelibrarian.mli]]}




%-------------------------------------------------------------

<<./bytecomp/bytelibrarian.mli>>=
<<copyright header>>

(* Build libraries of .cmo files *)

<<signature Bytelibrarian.create_archive>>

<<type Bytelibrarian.error>>

<<exception Bytelibrarian.Error>>

<<signature Bytelibrarian.report_error>>
@


\subsection*{[[./bytecomp/bytelibrarian.ml]]}

<<function Bytelibrarian.copy_compunit>>=
let copy_compunit ic oc compunit =
  seek_in ic compunit.cu_pos;
  compunit.cu_pos <- pos_out oc;
  compunit.cu_force_link <- !Clflags.link_everything;
  copy_file_chunk ic oc compunit.cu_codesize;
  if compunit.cu_debug > 0 then begin
    seek_in ic compunit.cu_debug;
    compunit.cu_debug <- pos_out oc;
    copy_file_chunk ic oc compunit.cu_debugsize
  end
@

<<function Bytelibrarian.copy_object_file>>=
let copy_object_file oc name =
  let file_name =
    try
      find_in_path !load_path name
    with Not_found ->
      raise(Error(File_not_found name)) in
  let ic = open_in_bin file_name in
  try
    let buffer = String.create (String.length cmo_magic_number) in
    really_input ic buffer 0 (String.length cmo_magic_number);
    if buffer = cmo_magic_number then begin
      let compunit_pos = input_binary_int ic in
      seek_in ic compunit_pos;
      let compunit = (input_value ic : compilation_unit) in
      copy_compunit ic oc compunit;
      close_in ic;
      [compunit]
    end else
    if buffer = cma_magic_number then begin
      let toc_pos = input_binary_int ic in
      seek_in ic toc_pos;
      let toc = (input_value ic : compilation_unit list) in
      List.iter (copy_compunit ic oc) toc;
      close_in ic;
      toc
    end else
      raise(Error(Not_an_object_file file_name))
  with x ->
    close_in ic;
    raise x
@

<<function Bytelibrarian.create_archive>>=
let create_archive file_list lib_name =
  let outchan = open_out_bin lib_name in
  try
    output_string outchan cma_magic_number;
    let ofs_pos_toc = pos_out outchan in
    output_binary_int outchan 0;
    let toc = List.flatten(List.map (copy_object_file outchan) file_list) in
    let pos_toc = pos_out outchan in
    output_value outchan toc;
    seek_out outchan ofs_pos_toc;
    output_binary_int outchan pos_toc;
    close_out outchan
  with x ->
    close_out outchan;
    remove_file lib_name;
    raise x
@


%-------------------------------------------------------------

<<./bytecomp/bytelibrarian.ml>>=
<<copyright header>>

(* Build libraries of .cmo files *)

open Misc
open Config
open Emitcode

<<type Bytelibrarian.error>>

<<exception Bytelibrarian.Error>>

<<function Bytelibrarian.copy_compunit>>

<<function Bytelibrarian.copy_object_file>>

<<function Bytelibrarian.create_archive>>

open Format

<<constant Bytelibrarian.report_error>>

@


\subsection*{[[./bytecomp/symtable.mli]]}

<<signature Symtable.init>>=
(* Functions for batch linking *)

val init: unit -> unit
@

<<signature Symtable.patch_object>>=
val patch_object: string -> (reloc_info * int) list -> unit
@

<<signature Symtable.require_primitive>>=
val require_primitive: string -> unit
@

<<signature Symtable.initial_global_table>>=
val initial_global_table: unit -> Obj.t array
@

<<signature Symtable.output_global_map>>=
val output_global_map: out_channel -> unit
@

<<signature Symtable.output_primitive_names>>=
val output_primitive_names: out_channel -> unit
@

<<signature Symtable.output_primitive_table>>=
val output_primitive_table: out_channel -> unit
@

<<signature Symtable.init_toplevel>>=
(* Functions for the toplevel *)

val init_toplevel: unit -> unit
@

<<signature Symtable.update_global_table>>=
val update_global_table: unit -> unit
@

<<signature Symtable.get_global_value>>=
val get_global_value: Ident.t -> Obj.t
@

<<signature Symtable.get_global_position>>=
val get_global_position: Ident.t -> int
@

<<signature Symtable.current_state>>=
val current_state: unit -> global_map
@

<<signature Symtable.restore_state>>=
val restore_state: global_map -> unit
@

<<signature Symtable.hide_additions>>=
val hide_additions: global_map -> unit
@

<<signature Symtable.filter_global_map>>=
val filter_global_map: (Ident.t -> bool) -> global_map -> global_map
@

<<type Symtable.error>>=
(* Error report *)

type error =
    Undefined_global of string
  | Unavailable_primitive of string
@

<<exception Symtable.Error>>=
exception Error of error
@

<<signature Symtable.report_error>>=
val report_error: error -> unit
@


%-------------------------------------------------------------

<<./bytecomp/symtable.mli>>=
<<copyright header>>

(* Assign locations and numbers to globals and primitives *)

open Emitcode

<<signature Symtable.init>>
<<signature Symtable.patch_object>>
<<signature Symtable.require_primitive>>
<<signature Symtable.initial_global_table>>
<<signature Symtable.output_global_map>>
<<signature Symtable.output_primitive_names>>
<<signature Symtable.output_primitive_table>>

<<signature Symtable.init_toplevel>>
<<signature Symtable.update_global_table>>
<<signature Symtable.get_global_value>>
<<signature Symtable.get_global_position>>

type global_map

<<signature Symtable.current_state>>
<<signature Symtable.restore_state>>
<<signature Symtable.hide_additions>>
<<signature Symtable.filter_global_map>>

<<type Symtable.error>>

<<exception Symtable.Error>>

<<signature Symtable.report_error>>
@


\subsection*{[[./bytecomp/symtable.ml]]}

<<type Symtable.numtable>>=
(* Tables for numbering objects *)

type 'a numtable =
  { num_cnt: int;               (* The next number *)
    num_tbl: ('a, int) Tbl.t } (* The table of already numbered objects *)
@

<<constant Symtable.empty_numtable>>=
let empty_numtable = { num_cnt = 0; num_tbl = Tbl.empty }
@

<<function Symtable.find_numtable>>=
let find_numtable nt key =
  Tbl.find key nt.num_tbl
@

<<function Symtable.enter_numtable>>=
let enter_numtable nt key =
  let n = !nt.num_cnt in
  nt := { num_cnt = n + 1; num_tbl = Tbl.add key n !nt.num_tbl };
  n
@

<<function Symtable.incr_numtable>>=
let incr_numtable nt =
  let n = !nt.num_cnt in
  nt := { num_cnt = n + 1; num_tbl = !nt.num_tbl };
  n
@

<<function Symtable.slot_for_getglobal>>=
let slot_for_getglobal id =
  try
    find_numtable !global_table id
  with Not_found ->
    raise(Error(Undefined_global(Ident.name id)))
@

<<function Symtable.slot_for_setglobal>>=
let slot_for_setglobal id =
  enter_numtable global_table id
@

<<function Symtable.slot_for_literal>>=
let slot_for_literal cst =
  let n = incr_numtable global_table in
  literal_table := (n, cst) :: !literal_table;
  n
@

<<constant Symtable.c_prim_table>>=
(* The C primitives *)

let c_prim_table = ref(empty_numtable : string numtable)
@

<<function Symtable.num_of_prim>>=
let num_of_prim name =
  try
    find_numtable !c_prim_table name
  with Not_found ->
    if !Clflags.custom_runtime
    then enter_numtable c_prim_table name
    else raise(Error(Unavailable_primitive name))
@

<<function Symtable.require_primitive>>=
let require_primitive name =
  if name.[0] <> '%' then begin num_of_prim name; () end
@

<<function Symtable.all_primitives>>=
let all_primitives () =
  let prim = Array.create !c_prim_table.num_cnt "" in
  Tbl.iter (fun name number -> prim.(number) <- name) !c_prim_table.num_tbl;
  prim
@

<<function Symtable.output_primitive_names>>=
let output_primitive_names outchan =
  let prim = all_primitives() in
  for i = 0 to Array.length prim - 1 do
    output_string outchan prim.(i); output_char outchan '\000'
  done
@

<<function Symtable.output_primitive_table>>=
let output_primitive_table outchan =
  let prim = all_primitives() in
  for i = 0 to Array.length prim - 1 do
    fprintf outchan "extern long %s();\n" prim.(i)
  done;
  fprintf outchan "typedef long (*primitive)();\n";
  fprintf outchan "primitive cprim[] = {\n";
  for i = 0 to Array.length prim - 1 do
    fprintf outchan "  %s,\n" prim.(i)
  done;
  fprintf outchan "  (primitive) 0 };\n";
  fprintf outchan "char * names_of_cprim[] = {\n";
  for i = 0 to Array.length prim - 1 do
    fprintf outchan "  \"%s\",\n" prim.(i)
  done;
  fprintf outchan "  (char *) 0 };\n"
@

<<function Symtable.init>>=
(* Initialization for batch linking *)

let init () =
  (* Enter the predefined exceptions *)
  Array.iter 
    (fun name -> 
      let id =
        try List.assoc name Predef.builtin_values
        with Not_found -> fatal_error "Symtable.init" in
      let c = slot_for_setglobal id in
      let cst = Const_block(0, [Const_base(Const_string name)]) in
      literal_table := (c, cst) :: !literal_table)
    Runtimedef.builtin_exceptions;
  (* Enter the known C primitives *)
  Array.iter (fun x -> enter_numtable c_prim_table x; ())
             Runtimedef.builtin_primitives
@

<<function Symtable.patch_int>>=
(* Must use the unsafe String.set here because the block may be
   a "fake" string as returned by Meta.static_alloc. *)

let patch_int buff pos n =
  String.unsafe_set buff pos (Char.unsafe_chr n);
  String.unsafe_set buff (pos + 1) (Char.unsafe_chr (n asr 8));
  String.unsafe_set buff (pos + 2) (Char.unsafe_chr (n asr 16));
  String.unsafe_set buff (pos + 3) (Char.unsafe_chr (n asr 24))
@

<<function Symtable.patch_object>>=
let patch_object buff patchlist = 
  List.iter
    (function
        (Reloc_literal sc, pos) ->
          patch_int buff pos (slot_for_literal sc)
      | (Reloc_getglobal id, pos) ->
          patch_int buff pos (slot_for_getglobal id)
      | (Reloc_setglobal id, pos) ->
          patch_int buff pos (slot_for_setglobal id)
      | (Reloc_primitive name, pos) ->
          patch_int buff pos (num_of_prim name))
    patchlist
@

<<constant Symtable.transl_const>>=
(* Translate structured constants *)

let rec transl_const = function
    Const_base(Const_int i) -> Obj.repr i
  | Const_base(Const_char c) -> Obj.repr c
  | Const_base(Const_string s) -> Obj.repr s
  | Const_base(Const_float f) -> Obj.repr(float_of_string f)
  | Const_pointer i -> Obj.repr i
  | Const_block(tag, fields) ->
      let block = Obj.new_block tag (List.length fields) in
      let pos = ref 0 in
      List.iter
        (fun c -> Obj.set_field block !pos (transl_const c); incr pos)
        fields;
      block
  | Const_float_array fields ->
      transl_const
        (Const_block(0, List.map (fun f -> Const_base(Const_float f)) fields))
@

<<function Symtable.initial_global_table>>=
(* Build the initial table of globals *)

let initial_global_table () =
  let glob = Array.create !global_table.num_cnt (Obj.repr 0) in
  List.iter
    (fun (slot, cst) -> glob.(slot) <- transl_const cst)
    !literal_table;
  literal_table := [];
  glob
@

<<function Symtable.output_global_map>>=
(* Save the table of globals *)

let output_global_map oc =
  output_value oc !global_table
@

<<function Symtable.update_global_table>>=
(* Update the in-core table of globals *)

let update_global_table () =
  let ng = !global_table.num_cnt in
  if ng > Array.length(Meta.global_data()) then Meta.realloc_global_data ng;
  let glob = Meta.global_data() in
  List.iter
    (fun (slot, cst) -> glob.(slot) <- transl_const cst)
    !literal_table;
  literal_table := []
@

<<function Symtable.init_toplevel>>=
(* Initialize the linker for toplevel use *)

let init_toplevel () =
  (* Read back the known global symbols from the executable file *)
  let ic = open_in_bin Sys.argv.(0) in
  let pos_trailer =
    in_channel_length ic - 20 - String.length Config.exec_magic_number in
  seek_in ic pos_trailer;
  let code_size = input_binary_int ic in
  let prim_size = input_binary_int ic in
  let data_size = input_binary_int ic in
  let symbol_size = input_binary_int ic in
  let debug_size = input_binary_int ic in
  seek_in ic (pos_trailer - debug_size - symbol_size);
  global_table := (input_value ic : Ident.t numtable);
  close_in ic;
  (* Enter the known C primitives *)
  Array.iter (fun x -> enter_numtable c_prim_table x; ())
             (Meta.available_primitives())
@

<<function Symtable.get_global_position>>=
(* @Scheck: used by the debugger *)
let get_global_position id = slot_for_getglobal id
@

<<function Symtable.get_global_value>>=
let get_global_value id =
@

<<type Symtable.global_map>>=
(* Save and restore the current state *)

type global_map = Ident.t numtable
@

<<function Symtable.current_state>>=
let current_state () = !global_table
@

<<function Symtable.restore_state>>=
let restore_state st = global_table := st
@

<<function Symtable.hide_additions>>=
(* @Scheck: used by dynlink *)
let hide_additions st =
  if st.num_cnt > !global_table.num_cnt then
    fatal_error "Symtable.hide_additions";
  global_table :=
    { num_cnt = !global_table.num_cnt;
      num_tbl = st.num_tbl }
@

<<function Symtable.filter_global_map>>=
(* "Filter" the global map according to some predicate.
   Used to expunge the global map for the toplevel. *)

let filter_global_map p gmap =
  let newtbl = ref Tbl.empty in
  Tbl.iter
    (fun id num -> if p id then newtbl := Tbl.add id num !newtbl)
    gmap.num_tbl;
  {num_cnt = gmap.num_cnt; num_tbl = !newtbl}
@

<<constant Symtable.report_error>>=
let report_error = function
    Undefined_global s ->
      print_string "Reference to undefined global `"; print_string s;
      print_string "'"
  | Unavailable_primitive s ->
      print_string "The external function `"; print_string s;
      print_string "' is not available"
@


%-------------------------------------------------------------

<<./bytecomp/symtable.ml>>=
<<copyright header>>

(* To assign numbers to globals and primitives *)

open Misc
open Asttypes
open Lambda
open Emitcode


<<type Symtable.error>>

<<exception Symtable.Error>>

<<type Symtable.numtable>>

<<constant Symtable.empty_numtable>>

<<function Symtable.find_numtable>>

<<function Symtable.enter_numtable>>

<<function Symtable.incr_numtable>>

(* Global variables *)

let global_table = ref(empty_numtable : Ident.t numtable)
and literal_table = ref([] : (int * structured_constant) list)

<<function Symtable.slot_for_getglobal>>

<<function Symtable.slot_for_setglobal>>

<<function Symtable.slot_for_literal>>

<<constant Symtable.c_prim_table>>

<<function Symtable.num_of_prim>>

<<function Symtable.require_primitive>>

<<function Symtable.all_primitives>>

<<function Symtable.output_primitive_names>>

open Printf

<<function Symtable.output_primitive_table>>

<<function Symtable.init>>

(* Relocate a block of object bytecode *)

<<function Symtable.patch_int>>

<<function Symtable.patch_object>>

<<constant Symtable.transl_const>>

<<function Symtable.initial_global_table>>

<<function Symtable.output_global_map>>

(* Functions for toplevel use *)

<<function Symtable.update_global_table>>

<<function Symtable.init_toplevel>>

(* Find the value of a global identifier *)

<<function Symtable.get_global_position>>

<<function Symtable.get_global_value>>
  (Meta.global_data()).(slot_for_getglobal id)

<<type Symtable.global_map>>

<<function Symtable.current_state>>

<<function Symtable.restore_state>>

<<function Symtable.hide_additions>>

<<function Symtable.filter_global_map>>

(* Error report *)

open Format

<<constant Symtable.report_error>>
@


\subsection*{[[./bytecomp/bytelink.mli]]}





%-------------------------------------------------------------

<<./bytecomp/bytelink.mli>>=
<<copyright header>>

<<signature Bytelink.link>>

<<signature Bytelink.check_consistency>>

<<type Bytelink.error>>

<<exception Bytelink.Error>>

<<signature Bytelink.report_error>>
@


\subsection*{[[./bytecomp/bytelink.ml]]}


<<constant Bytelink.missing_globals>>=
let missing_globals = ref IdentSet.empty
@

<<function Bytelink.is_required>>=
let is_required (rel, pos) =
  match rel with
    Reloc_setglobal id ->
      IdentSet.mem id !missing_globals
  | _ -> false
@

<<function Bytelink.add_required>>=
let add_required (rel, pos) =
  match rel with
    Reloc_getglobal id ->
      missing_globals := IdentSet.add id !missing_globals
  | _ -> ()
@

<<function Bytelink.remove_required>>=
let remove_required (rel, pos) =
  match rel with
    Reloc_setglobal id ->
      missing_globals := IdentSet.remove id !missing_globals
  | _ -> ()
@

<<function Bytelink.scan_file>>=
let scan_file obj_name tolink =
  let file_name =
    try
      find_in_path !load_path obj_name
    with Not_found ->
      raise(Error(File_not_found obj_name)) in
  let ic = open_in_bin file_name in
  try
    let buffer = String.create (String.length cmo_magic_number) in
    really_input ic buffer 0 (String.length cmo_magic_number);
    if buffer = cmo_magic_number then begin
      (* This is a .cmo file. It must be linked in any case.
         Read the relocation information to see which modules it
         requires. *)
      let compunit_pos = input_binary_int ic in  (* Go to descriptor *)
      seek_in ic compunit_pos;
      let compunit = (input_value ic : compilation_unit) in
      close_in ic;
      List.iter add_required compunit.cu_reloc;
      Link_object(file_name, compunit) :: tolink
    end
    else if buffer = cma_magic_number then begin
      (* This is an archive file. Each unit contained in it will be linked
         in only if needed. *)
      let pos_toc = input_binary_int ic in    (* Go to table of contents *)
      seek_in ic pos_toc;
      let toc = (input_value ic : compilation_unit list) in
      close_in ic;
      let required =
        List.fold_right
          (fun compunit reqd ->
            if compunit.cu_force_link
            or !Clflags.link_everything
            or List.exists is_required compunit.cu_reloc
            then begin
              List.iter remove_required compunit.cu_reloc;
              List.iter add_required compunit.cu_reloc;
              compunit :: reqd
            end else
              reqd)
          toc [] in
      Link_archive(file_name, required) :: tolink
    end
    else raise(Error(Not_an_object_file file_name))
  with x ->
    close_in ic; raise x
@


<<function Bytelink.link_compunit>>=
(* Link in a compilation unit *)

let link_compunit output_fun currpos_fun inchan file_name compunit =
  check_consistency file_name compunit;
  seek_in inchan compunit.cu_pos;
  let code_block = String.create compunit.cu_codesize in
  really_input inchan code_block 0 compunit.cu_codesize;
  Symtable.patch_object code_block compunit.cu_reloc;
  if !Clflags.debug && compunit.cu_debug > 0 then begin
    seek_in inchan compunit.cu_debug;
    record_events (currpos_fun()) (input_value inchan : debug_event list)
  end;
  output_fun code_block;
  if !Clflags.link_everything then
    List.iter Symtable.require_primitive compunit.cu_primitives
@

<<function Bytelink.link_object>>=
(* Link in a .cmo file *)

let link_object output_fun currpos_fun file_name compunit =
  let inchan = open_in_bin file_name in
  try
    link_compunit output_fun currpos_fun inchan file_name compunit;
    close_in inchan
  with
    Symtable.Error msg ->
      close_in inchan; raise(Error(Symbol_error(file_name, msg)))
  | x ->
      close_in inchan; raise x
@

<<function Bytelink.link_archive>>=
(* Link in a .cma file *)

let link_archive output_fun currpos_fun file_name units_required =
  let inchan = open_in_bin file_name in
  try
    List.iter
      (fun cu ->
         let name = file_name ^ "(" ^ cu.cu_name ^ ")" in
         try
           link_compunit output_fun currpos_fun inchan name cu
         with Symtable.Error msg ->
           raise(Error(Symbol_error(name, msg))))
      units_required;
    close_in inchan
  with x -> close_in inchan; raise x
@

<<function Bytelink.link_file>>=
(* Link in a .cmo or .cma file *)

let link_file output_fun currpos_fun = function
    Link_object(file_name, unit) ->
      link_object output_fun currpos_fun file_name unit
  | Link_archive(file_name, units) ->
      link_archive output_fun currpos_fun file_name units
@

<<function Bytelink.link_bytecode>>=
(* Create a bytecode executable file *)

let link_bytecode objfiles exec_name copy_header =
  let tolink = List.fold_right scan_file objfiles [] in
  if Sys.os_type = "MacOS" then begin
    (* Create it as a text file for bytecode scripts *)
    let c = open_out_gen [Open_wronly; Open_creat] 0o777 exec_name in
    close_out c
  end;
  let outchan = open_out_gen [Open_wronly; Open_trunc; Open_creat; Open_binary]
                             0o777 exec_name in
  try
    (* Copy the header *)
    if copy_header then begin
      try
        let inchan = open_in_bin (find_in_path !load_path "camlheader") in
        copy_file inchan outchan;
        close_in inchan
      with Not_found | Sys_error _ -> ()
    end;
    (* The bytecode *)
    let pos1 = pos_out outchan in
    Symtable.init();
    Hashtbl.clear crc_interfaces;
    let output_fun = output_string outchan
    and currpos_fun () = pos_out outchan - pos1 in
    List.iter (link_file output_fun currpos_fun) tolink;
    (* The final STOP instruction *)
    output_byte outchan Opcodes.opSTOP;
    output_byte outchan 0; output_byte outchan 0; output_byte outchan 0;
    (* The names of all primitives *)
    let pos2 = pos_out outchan in
    Symtable.output_primitive_names outchan;
    (* The table of global data *)
    let pos3 = pos_out outchan in
    output_value outchan (Symtable.initial_global_table());
    (* The map of global identifiers *)
    let pos4 = pos_out outchan in
    Symtable.output_global_map outchan;
    (* Debug info *)
    let pos5 = pos_out outchan in
    if !Clflags.debug then output_value outchan !debug_info;
    (* The trailer *)
    let pos6 = pos_out outchan in
    output_binary_int outchan (pos2 - pos1);
    output_binary_int outchan (pos3 - pos2);
    output_binary_int outchan (pos4 - pos3);
    output_binary_int outchan (pos5 - pos4);
    output_binary_int outchan (pos6 - pos5);
    output_string outchan exec_magic_number;
    close_out outchan
  with x ->
    close_out outchan;
    remove_file exec_name;
    raise x
@

<<constant Bytelink.output_code_string_counter>>=
(* Output a string as a C array of unsigned ints *)

let output_code_string_counter = ref 0
@

<<function Bytelink.output_code_string>>=
let output_code_string outchan code =
  let pos = ref 0 in
  let len = String.length code in
  while !pos < len do
    let c1 = Char.code(code.[!pos]) in
    let c2 = Char.code(code.[!pos + 1]) in
    let c3 = Char.code(code.[!pos + 2]) in
    let c4 = Char.code(code.[!pos + 3]) in
    pos := !pos + 4;
    Printf.fprintf outchan "0x%02x%02x%02x%02x, " c4 c3 c2 c1;
    incr output_code_string_counter;
    if !output_code_string_counter >= 6 then begin
      output_char outchan '\n';
      output_code_string_counter := 0
    end
  done
@

<<function Bytelink.output_data_string>>=
(* Output a string as a C string *)

let output_data_string outchan data =
  let counter = ref 0 in
  output_string outchan "\"";
  for i = 0 to String.length data - 1 do
    Printf.fprintf outchan "\\%03o" (Char.code(data.[i]));
    incr counter;
    if !counter >= 16 then begin
      output_string outchan "\\\n";
      counter := 0
    end
  done;
  output_string outchan "\";\n\n"
@

<<function Bytelink.link_bytecode_as_c>>=
(* Output a bytecode executable as a C file *)

let link_bytecode_as_c objfiles outfile =
  let tolink = List.fold_right scan_file objfiles [] in
  let outchan = open_out outfile in
  try
    (* The bytecode *)
    output_string outchan "static int caml_code[] = {\n";
    Symtable.init();
    Hashtbl.clear crc_interfaces;
    let output_fun = output_code_string outchan
    and currpos_fun () = fatal_error "Bytelink.link_bytecode_as_c" in
    List.iter (link_file output_fun currpos_fun) tolink;
    (* The final STOP instruction *)
    Printf.fprintf outchan "\n0x%x};\n\n" Opcodes.opSTOP;
    (* The table of global data *)
    output_string outchan "static char * caml_data =\n";
    output_data_string outchan
      (Marshal.to_string (Symtable.initial_global_table()) []);
    (* The table of primitives *)
    Symtable.output_primitive_table outchan;
    (* The entry point *)
    output_string outchan "\n
void caml_startup(argv)
        char ** argv;
{
  caml_startup_code(caml_code, sizeof(caml_code), caml_data, argv);
}\n";
    close_out outchan
  with x ->
    close_out outchan;
    raise x
@

<<function Bytelink.extract>>=
(* Build a custom runtime *)

let rec extract suffix l =
  match l with
  | [] -> []
  | h::t when Filename.check_suffix h suffix -> h :: (extract suffix t)
  | h::t -> extract suffix t
@

<<function Bytelink.build_custom_runtime>>=
let build_custom_runtime prim_name exec_name =
  let libname = "libcamlrun" ^ ext_lib in
  let runtime_lib =
    try
      find_in_path !load_path libname
    with Not_found ->
      raise(Error(File_not_found libname)) in
  match Sys.os_type with
    "Unix" ->
      Ccomp.command
       (Printf.sprintf
          "%s -o %s -I%s %s %s -L%s %s %s %s"
          Config.bytecomp_c_compiler
          exec_name
          Config.standard_library
          (String.concat " " (List.rev !Clflags.ccopts))
          prim_name
          Config.standard_library
          (String.concat " " (List.rev !Clflags.ccobjs))
          runtime_lib
          Config.c_libraries)
  | _ ->
    fatal_error "Bytelink.build_custom_runtime"
@

<<function Bytelink.append_bytecode_and_cleanup>>=
let append_bytecode_and_cleanup bytecode_name exec_name prim_name =
  match Sys.os_type with
  | _ ->
      let oc =
        open_out_gen [Open_wronly; Open_append; Open_binary] 0
                                 !Clflags.exec_name in
      let ic = open_in_bin bytecode_name in
      copy_file ic oc;
      close_in ic;
      close_out oc;
      remove_file bytecode_name;
      remove_file prim_name
@

<<function Bytelink.fix_exec_name>>=
(* Fix the name of the output file, if the C compiler changes it behind
   our back. *)

let fix_exec_name name =
  match Sys.os_type with
  | _ -> name
@

<<function Bytelink.link>>=
(* Main entry point (build a custom runtime if needed) *)

let link objfiles =
  let objfiles = "stdlib.cma" :: (objfiles @ ["std_exit.cmo"]) in
  if not !Clflags.custom_runtime then
    link_bytecode objfiles !Clflags.exec_name true
  else if not !Clflags.output_c_object then begin
    let bytecode_name = Filename.temp_file "camlcode" "" in
    let prim_name = Filename.temp_file "camlprim" ".c" in
    try
      link_bytecode objfiles bytecode_name false;
      let poc = open_out prim_name in
      Symtable.output_primitive_table poc;
      close_out poc;
      let exec_name = fix_exec_name !Clflags.exec_name in
      if build_custom_runtime prim_name exec_name <> 0
      then raise(Error Custom_runtime);
      append_bytecode_and_cleanup bytecode_name exec_name prim_name
    with x ->
      remove_file bytecode_name;
      remove_file prim_name;
      raise x
  end else begin
    let c_file =
      Filename.chop_suffix !Clflags.object_name Config.ext_obj ^ ".c" in
    if Sys.file_exists c_file then raise(Error(File_exists c_file));
    try
      link_bytecode_as_c objfiles c_file;
      if Ccomp.compile_file_bytecode c_file <> 0
      then raise(Error Custom_runtime);
      remove_file c_file
    with x ->
      remove_file c_file;
      remove_file !Clflags.object_name;
      raise x
  end
@


%-------------------------------------------------------------

<<./bytecomp/bytelink.ml>>=
<<copyright header>>

(* Link a set of .cmo files and produce a bytecode executable. *)

open Sys
open Misc
open Config
open Instruct
open Emitcode

<<type Bytelink.error>>

<<exception Bytelink.Error>>

<<type Bytelink.link_action>>

(* First pass: determine which units are needed *)

module IdentSet = Set

<<constant Bytelink.missing_globals>>

<<function Bytelink.is_required>>

<<function Bytelink.add_required>>

<<function Bytelink.remove_required>>

<<function Bytelink.scan_file>>

<<constant Bytelink.debug_info>>

<<constant Bytelink.crc_interfaces>>

<<function Bytelink.check_consistency>>

<<constant Bytelink.debug_info (./bytecomp/bytelink.ml)>>

<<function Bytelink.record_events>>

<<function Bytelink.link_compunit>>

<<function Bytelink.link_object>>

<<function Bytelink.link_archive>>

<<function Bytelink.link_file>>

<<function Bytelink.link_bytecode>>

<<constant Bytelink.output_code_string_counter>>

<<function Bytelink.output_code_string>>

<<function Bytelink.output_data_string>>

<<function Bytelink.link_bytecode_as_c>>

<<function Bytelink.extract>>
;;

<<function Bytelink.build_custom_runtime>>

<<function Bytelink.append_bytecode_and_cleanup>>

<<function Bytelink.fix_exec_name>>

<<function Bytelink.link>>

(* Error report *)

open Format

<<constant Bytelink.report_error>>
@


\section{[[./driver/]]}

\subsection*{[[./driver/compile.mli]]}


%-------------------------------------------------------------

<<./driver/compile.mli>>=
<<copyright header>>

(* Compile a .ml or .mli file *)

<<signature Compile.interface>>
<<signature Compile.implementation>>
<<signature Compile.c_file>>

<<signature Compile.initial_env>>
<<signature Compile.init_path>>
@


\subsection*{[[./driver/compile.ml]]}

<<function Compile.init_path>>=
(* Initialize the search path.
   The current directory is always searched first,
   then the directories specified with the -I option (in command-line order),
   then the standard library directory. *)

let init_path () =
  let dirs =
    if !Clflags.thread_safe then
     Filename.concat Config.standard_library "threads" :: !Clflags.include_dirs
    else
     !Clflags.include_dirs in
  load_path := "" :: List.rev (Config.standard_library :: dirs);
  Env.reset_cache()
@

<<function Compile.initial_env>>=
(* Return the initial environment in which compilation proceeds. *)

let initial_env () =
  try
    if !Clflags.nopervasives
    then Env.initial
    else Env.open_pers_signature "Pervasives" Env.initial
  with Not_found ->
    fatal_error "cannot open Pervasives.cmi"
@


<<exception Compile.Outdated_version>>=
(* Parse a file or get a dumped syntax tree in it *)

exception Outdated_version
@

<<function Compile.parse_file>>=
let parse_file inputfile parse_fun ast_magic =
  let ic = open_in_bin inputfile in
  let is_ast_file =
    try
      let buffer = String.create (String.length ast_magic) in
      really_input ic buffer 0 (String.length ast_magic);
      if buffer = ast_magic then true
      else if String.sub buffer 0 9 = String.sub ast_magic 0 9 then
        raise Outdated_version
      else false
    with
      Outdated_version ->
        fatal_error "Ocaml and preprocessor have incompatible versions"
    | _ -> false
  in
  let ast =
    try
      if is_ast_file then begin
        Location.input_name := input_value ic;
        input_value ic
      end else begin
        seek_in ic 0;
        Location.input_name := inputfile;
        parse_fun (Lexing.from_channel ic)
      end
    with x -> close_in ic; raise x
  in
  close_in ic;
  ast
@


<<function Compile.print_if>>=
(* Compile a .ml file *)

let print_if flag printer arg =
  if !flag then begin printer arg; print_newline() end;
  arg
@




%-------------------------------------------------------------

<<./driver/compile.ml>>=
<<copyright header>>

(* The batch compiler *)

open Misc
open Config
open Format
open Typedtree

<<function Compile.init_path>>

<<function Compile.initial_env>>

<<function Compile.preprocess>>

<<function Compile.remove_preprocessed>>

<<exception Compile.Outdated_version>>

<<function Compile.parse_file>>

<<function Compile.interface>>

<<function Compile.print_if>>

<<function Compile.implementation>>

<<function Compile.c_file>>
@


\subsection*{[[./driver/errors.mli]]}



%-------------------------------------------------------------

<<./driver/errors.mli>>=
<<copyright header>>

<<signature Errors.report_error>>
@


\subsection*{[[./driver/errors.ml]]}

%-------------------------------------------------------------

<<./driver/errors.ml>>=
<<copyright header>>

(* Error report *)

open Format
open Location

<<function Errors.report_error>>
@


\subsection*{[[./driver/main.ml]]}


%-------------------------------------------------------------

<<./driver/main.ml>>=
<<copyright header>>

open Config
open Clflags

<<function Main.process_interface_file>>

<<function Main.process_implementation_file>>

<<function Main.process_file>>

<<function Main.print_version_number>>

<<constant Main.usage>>

<<function Main.main>>

<<toplevel Main._1>>
@


\section{NATIVE CODE START}

\section{[[asmcomp/arm/]]}

\subsection*{[[asmcomp/arm/arch.ml]]}

<<type Arch.addressing_mode>>=
(* Addressing modes *)

type addressing_mode =
    Iindexed of int                     (* reg + displ *)
@

<<type Arch.specific_operation>>=
type specific_operation =
    Ishiftarith of arith_operation * int
  | Ishiftcheckbound of int
  | Irevsubimm of int
@

<<type Arch.arith_operation>>=
and arith_operation =
    Ishiftadd
  | Ishiftsub
  | Ishiftsubrev
@

<<type Arch.float_operation>>=
type float_operation = unit
@

<<constant Arch.big_endian>>=
(* Sizes, endianness *)

let big_endian = false
@

<<constant Arch.size_addr>>=
let size_addr = 4
@

<<constant Arch.size_int>>=
let size_int = 4
@

<<constant Arch.size_float>>=
let size_float = 8
@

<<constant Arch.identity_addressing>>=
(* Operations on addressing modes *)

let identity_addressing = Iindexed 0
@

<<function Arch.offset_addressing>>=
let offset_addressing (Iindexed n) delta = Iindexed(n + delta)
@

<<function Arch.num_args_addressing>>=
let num_args_addressing (Iindexed n) = 1
@

<<function Arch.print_addressing>>=
(* Printing operations and addressing modes *)

let print_addressing printreg addr arg =
  match addr with
    Iindexed n ->
      printreg arg.(0);
      if n <> 0 then begin print_string " + "; print_int n end
@

<<function Arch.print_specific_operation>>=
let print_specific_operation printreg op arg =
  match op with
    Ishiftarith(op, shift) ->
      printreg arg.(0);
      begin match op with
        Ishiftadd -> print_string " + "
      | Ishiftsub -> print_string " - "
      | Ishiftsubrev -> print_string " -rev "
      end;
      printreg arg.(1);
      if shift >= 0
      then begin print_string " << "; print_int shift end
      else begin print_string " >> "; print_int (-shift) end
  | Ishiftcheckbound n ->
      print_string "check ";
      printreg arg.(0);
      print_string " >> "; print_int n; print_string " > ";
      printreg arg.(1)
  | Irevsubimm n ->
      print_int n; print_string " - "; printreg arg.(0)
@


%-------------------------------------------------------------

<<asmcomp/arm/arch.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1998 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)


(* Specific operations for the ARM processor *)

open Misc
open Format

<<type Arch.addressing_mode>>

(* We do not support the reg + shifted reg addressing mode, because
   what we really need is reg + shifted reg + displ,
   and this is decomposed in two instructions (reg + shifted reg -> tmp,
   then addressing tmp + displ). *)

(* Specific operations *)

<<type Arch.specific_operation>>

<<type Arch.arith_operation>>

<<type Arch.float_operation>>

<<constant Arch.big_endian>>

<<constant Arch.size_addr>>
<<constant Arch.size_int>>
<<constant Arch.size_float>>

<<constant Arch.identity_addressing>>

<<function Arch.offset_addressing>>

<<function Arch.num_args_addressing>>

<<function Arch.print_addressing>>

<<function Arch.print_specific_operation>>
@


\section{[[asmcomp/]]}

\subsection*{[[asmcomp/clambda.mli]]}

<<type Clambda.function_label>>=
type function_label = string
@

<<type Clambda.ulambda>>=
type ulambda =
    Uvar of Ident.t
  | Uconst of structured_constant
  | Udirect_apply of function_label * ulambda list
  | Ugeneric_apply of ulambda * ulambda list
  | Uclosure of (function_label * int * Ident.t list * ulambda) list
              * ulambda list
  | Uoffset of ulambda * int
  | Ulet of Ident.t * ulambda * ulambda
  | Uletrec of (Ident.t * ulambda) list * ulambda
  | Uprim of primitive * ulambda list
  | Uswitch of ulambda * ulambda_switch
  | Ustaticfail
  | Ucatch of ulambda * ulambda
  | Utrywith of ulambda * Ident.t * ulambda
  | Uifthenelse of ulambda * ulambda * ulambda
  | Usequence of ulambda * ulambda
  | Uwhile of ulambda * ulambda
  | Ufor of Ident.t * ulambda * ulambda * direction_flag * ulambda
  | Uassign of Ident.t * ulambda
@

<<type Clambda.ulambda_switch>>=
and ulambda_switch =
  { us_index_consts: int array;
    us_cases_consts: ulambda array;
    us_index_blocks: int array;
    us_cases_blocks: ulambda array;
    us_checked: bool }
@

<<type Clambda.function_description>>=
(* Description of known functions *)

type function_description =
  { fun_label: function_label;          (* Label of direct entry point *)
    fun_arity: int;                     (* Number of arguments *)
    mutable fun_closed: bool;           (* True if environment not used *)
    mutable fun_inline: (Ident.t list * ulambda) option }
@

<<type Clambda.value_approximation>>=
(* Approximation of values *)

type value_approximation =
    Value_closure of function_description * value_approximation
  | Value_tuple of value_approximation array
  | Value_unknown
@


%-------------------------------------------------------------

<<asmcomp/clambda.mli>>=
<<copyright header>>

(* A variant of the "lambda" code with direct / indirect calls explicit
   and closures explicit too *)

open Asttypes
open Lambda

<<type Clambda.function_label>>

<<type Clambda.ulambda>>

<<type Clambda.ulambda_switch>>

<<type Clambda.function_description>>

<<type Clambda.value_approximation>>
@


\subsection*{[[asmcomp/clambda.ml]]}

<<type Clambda.function_label (asmcomp/clambda.ml)>>=
type function_label = string
@

<<type Clambda.ulambda (asmcomp/clambda.ml)>>=
type ulambda =
    Uvar of Ident.t
  | Uconst of structured_constant
  | Udirect_apply of function_label * ulambda list
  | Ugeneric_apply of ulambda * ulambda list
  | Uclosure of (function_label * int * Ident.t list * ulambda) list
              * ulambda list
  | Uoffset of ulambda * int
  | Ulet of Ident.t * ulambda * ulambda
  | Uletrec of (Ident.t * ulambda) list * ulambda
  | Uprim of primitive * ulambda list
  | Uswitch of ulambda * ulambda_switch
  | Ustaticfail
  | Ucatch of ulambda * ulambda
  | Utrywith of ulambda * Ident.t * ulambda
  | Uifthenelse of ulambda * ulambda * ulambda
  | Usequence of ulambda * ulambda
  | Uwhile of ulambda * ulambda
  | Ufor of Ident.t * ulambda * ulambda * direction_flag * ulambda
  | Uassign of Ident.t * ulambda
@

<<type Clambda.ulambda_switch (asmcomp/clambda.ml)>>=
and ulambda_switch =
  { us_index_consts: int array;
    us_cases_consts: ulambda array;
    us_index_blocks: int array;
    us_cases_blocks: ulambda array;
    us_checked: bool }
@

<<type Clambda.function_description (asmcomp/clambda.ml)>>=
(* Description of known functions *)

type function_description =
  { fun_label: function_label;          (* Label of direct entry point *)
    fun_arity: int;                     (* Number of arguments *)
    mutable fun_closed: bool;           (* True if environment not used *)
    mutable fun_inline: (Ident.t list * ulambda) option }
@

<<type Clambda.value_approximation (asmcomp/clambda.ml)>>=
(* Approximation of values *)

type value_approximation =
    Value_closure of function_description * value_approximation
  | Value_tuple of value_approximation array
  | Value_unknown
@


%-------------------------------------------------------------

<<asmcomp/clambda.ml>>=
<<copyright header>>

(* A variant of the "lambda" code with direct / indirect calls explicit
   and closures explicit too *)

open Asttypes
open Lambda

<<type Clambda.function_label (asmcomp/clambda.ml)>>

<<type Clambda.ulambda (asmcomp/clambda.ml)>>

<<type Clambda.ulambda_switch (asmcomp/clambda.ml)>>

<<type Clambda.function_description (asmcomp/clambda.ml)>>

<<type Clambda.value_approximation (asmcomp/clambda.ml)>>
@


\subsection*{[[asmcomp/emitaux.mli]]}

<<signature Emitaux.output_channel>>=
(* Common functions for emitting assembly code *)

val output_channel: out_channel ref
@

<<signature Emitaux.emit_string>>=
val emit_string: string -> unit
@

<<signature Emitaux.emit_int>>=
val emit_int: int -> unit
@

<<signature Emitaux.emit_nativeint>>=
val emit_nativeint: Nativeint.t -> unit
@

<<signature Emitaux.emit_symbol>>=
val emit_symbol: char -> string -> unit
@

<<signature Emitaux.emit_printf>>=
val emit_printf: ('a, out_channel, unit) format -> 'a
@

<<signature Emitaux.emit_char>>=
val emit_char: char -> unit
@

<<signature Emitaux.emit_string_literal>>=
val emit_string_literal: string -> unit
@

<<signature Emitaux.emit_string_directive>>=
val emit_string_directive: string -> string -> unit
@

<<signature Emitaux.emit_bytes_directive>>=
val emit_bytes_directive: string -> string -> unit
@


%-------------------------------------------------------------

<<asmcomp/emitaux.mli>>=
<<copyright header>>

<<signature Emitaux.output_channel>>
<<signature Emitaux.emit_string>>
<<signature Emitaux.emit_int>>
<<signature Emitaux.emit_nativeint>>
<<signature Emitaux.emit_symbol>>
<<signature Emitaux.emit_printf>>
<<signature Emitaux.emit_char>>
<<signature Emitaux.emit_string_literal>>
<<signature Emitaux.emit_string_directive>>
<<signature Emitaux.emit_bytes_directive>>
@


\subsection*{[[asmcomp/emitaux.ml]]}

<<constant Emitaux.output_channel>>=
(* Common functions for emitting assembly code *)

let output_channel = ref stdout
@

<<function Emitaux.emit_string>>=
let emit_string s = output_string !output_channel s
@

<<function Emitaux.emit_int>>=
let emit_int n = output_string !output_channel (string_of_int n)
@

<<function Emitaux.emit_char>>=
let emit_char c = output_char !output_channel c
@

<<function Emitaux.emit_nativeint>>=
let emit_nativeint n = output_string !output_channel (Nativeint.to_string n)
@

<<function Emitaux.emit_printf>>=
(* @Scheck: used by mips backend *)
let emit_printf fmt =
  Printf.fprintf !output_channel fmt
@

<<function Emitaux.emit_symbol>>=
let emit_symbol esc s =
  for i = 0 to String.length s - 1 do
    let c = s.[i] in
    match c with
      'A'..'Z' | 'a'..'z' | '0'..'9' | '_' ->
        output_char !output_channel c
    | _ ->
        Printf.fprintf !output_channel "%c%02x" esc (Char.code c)
  done
@

<<function Emitaux.emit_string_literal>>=
let emit_string_literal s =
  let last_was_escape = ref false in
  emit_string "\"";
  for i = 0 to String.length s - 1 do
    let c = s.[i] in
    if c >= '0' && c <= '9' then
      if !last_was_escape
      then Printf.fprintf !output_channel "\\%o" (Char.code c)
      else output_char !output_channel c
    else if c >= ' ' && c <= '~' && c <> '"' (* '"' *) && c <> '\\' then begin
      output_char !output_channel c;
      last_was_escape := false
    end else begin
      Printf.fprintf !output_channel "\\%o" (Char.code c);
      last_was_escape := true
    end
  done;
  emit_string "\""
@

<<function Emitaux.emit_string_directive>>=
let emit_string_directive directive s =
  let l = String.length s in
  if l = 0 then ()
  else if l < 80 then begin
    emit_string directive;
    emit_string_literal s;
    emit_char '\n'
  end else begin
    let i = ref 0 in
    while !i < l do
      let n = min (l - !i) 80 in
      emit_string directive;
      emit_string_literal (String.sub s !i n);
      emit_char '\n';
      i := !i + n
    done
  end
@

<<function Emitaux.emit_bytes_directive>>=
let emit_bytes_directive directive s =
   let pos = ref 0 in
   for i = 0 to String.length s - 1 do
     if !pos = 0
     then emit_string directive
     else emit_char ',';
     emit_int(Char.code s.[i]);
     incr pos;
     if !pos >= 16 then begin emit_char '\n'; pos := 0 end
   done;
   if !pos > 0 then emit_char '\n'
@


%-------------------------------------------------------------

<<asmcomp/emitaux.ml>>=
<<copyright header>>

<<constant Emitaux.output_channel>>

<<function Emitaux.emit_string>>

<<function Emitaux.emit_int>>

<<function Emitaux.emit_char>>

<<function Emitaux.emit_nativeint>>

<<function Emitaux.emit_printf>>

<<function Emitaux.emit_symbol>>

<<function Emitaux.emit_string_literal>>

<<function Emitaux.emit_string_directive>>

<<function Emitaux.emit_bytes_directive>>

@


\subsection*{[[asmcomp/scheduling.mli]]}

<<signature Scheduling.fundecl>>=
(* Instruction scheduling *)

val fundecl: Linearize.fundecl -> Linearize.fundecl
@


%-------------------------------------------------------------

<<asmcomp/scheduling.mli>>=
<<copyright header>>

<<signature Scheduling.fundecl>>
@


\section{[[asmcomp/arm/]]}

\subsection*{[[asmcomp/arm/scheduling.ml]]}

<<function Scheduling.scheduler>>=
(* Instruction scheduling for the Sparc *)

let scheduler () = 

  let super = Schedgen.scheduler_generic () in
  {

  oper_in_basic_block = super.oper_in_basic_block;
  schedule_fundecl = super.schedule_fundecl;
  instr_in_basic_block = super.instr_in_basic_block;
  instr_latency = super.instr_latency;
  instr_issue_cycles = super.instr_issue_cycles;
  add_instruction = super.add_instruction;
  ready_instruction = super.ready_instruction;
  reschedule = super.reschedule;

(* Scheduling -- based roughly on the Strong ARM *)

 oper_latency = (function
    Ireload -> 2
  | Iload(_, _) -> 2
  | Iconst_symbol _ -> 2                (* turned into a load *)
  | Iconst_float _ -> 2                 (* turned into a load *)
  | Iintop(Imul) -> 3
  | Iintop_imm(Imul, _) -> 3
  (* No data available for floatops, let's make educated guesses *)
  | Iaddf -> 3
  | Isubf -> 3
  | Imulf -> 5
  | Idivf -> 15
  | _ -> 1
 );

(* Issue cycles.  Rough approximations *)

 oper_issue_cycles = (function
    Ialloc _ -> 4
  | Iintop(Icomp _) -> 3
  | Iintop(Icheckbound) -> 2
  | Iintop_imm(Idiv, _) -> 4
  | Iintop_imm(Imod, _) -> 6
  | Iintop_imm(Icomp _, _) -> 3
  | Iintop_imm(Icheckbound, _) -> 2
  | _ -> 1
 );
  }
@

<<function Scheduling.fundecl>>=
let fundecl f = 
  let s = scheduler () in
  s.schedule_fundecl s f
@


%-------------------------------------------------------------

<<asmcomp/arm/scheduling.ml>>=
<<copyright header>>
open Mach

open Schedgen

<<function Scheduling.scheduler>>

<<function Scheduling.fundecl>>
@


\section{[[asmcomp/]]}

\subsection*{[[asmcomp/cmm.mli]]}

<<type Cmm.machtype_component>>=
(* Second intermediate language (machine independent) *)

type machtype_component =
    Addr
  | Int
  | Float
@

<<type Cmm.machtype>>=
type machtype = machtype_component array
@

<<signature Cmm.typ_void>>=
val typ_void: machtype
@

<<signature Cmm.typ_addr>>=
val typ_addr: machtype
@

<<signature Cmm.typ_int>>=
val typ_int: machtype
@

<<signature Cmm.typ_float>>=
val typ_float: machtype
@

<<signature Cmm.size_component>>=
val size_component: machtype_component -> int
@

<<signature Cmm.size_machtype>>=
val size_machtype: machtype -> int
@

<<type Cmm.comparison>>=
type comparison =
    Ceq
  | Cne
  | Clt
  | Cle
  | Cgt
  | Cge
@

<<signature Cmm.negate_comparison>>=
val negate_comparison: comparison -> comparison
@

<<signature Cmm.swap_comparison>>=
val swap_comparison: comparison -> comparison
@

<<type Cmm.memory_chunk>>=
type memory_chunk =
    Byte_unsigned
  | Byte_signed
  | Sixteen_unsigned
  | Sixteen_signed
  | Word
@

<<type Cmm.operation>>=
type operation =
    Capply of machtype
  | Cextcall of string * machtype * bool
  | Cproj of int * int
  | Cload of machtype
  | Cloadchunk of memory_chunk
  | Calloc
  | Cstore
  | Cstorechunk of memory_chunk
  | Caddi | Csubi | Cmuli | Cdivi | Cmodi
  | Cand | Cor | Cxor | Clsl | Clsr | Casr
  | Ccmpi of comparison
  | Cadda | Csuba
  | Ccmpa of comparison
  | Cnegf | Cabsf
  | Caddf | Csubf | Cmulf | Cdivf
  | Cfloatofint | Cintoffloat
  | Ccmpf of comparison
  | Craise
  | Ccheckbound
@

<<type Cmm.expression>>=
type expression =
    Cconst_int of int
  | Cconst_natint of Nativeint.t
  | Cconst_float of string
  | Cconst_symbol of string
  | Cconst_pointer of int
  | Cvar of Ident.t
  | Clet of Ident.t * expression * expression
  | Cassign of Ident.t * expression
  | Ctuple of expression list
  | Cop of operation * expression list
  | Csequence of expression * expression
  | Cifthenelse of expression * expression * expression
  | Cswitch of expression * int array * expression array
  | Cloop of expression
  | Ccatch of expression * expression
  | Cexit
  | Ctrywith of expression * Ident.t * expression
@

<<type Cmm.fundecl>>=
type fundecl =
  { fun_name: string;
    fun_args: (Ident.t * machtype) list;
    fun_body: expression;
    fun_fast: bool }
@

<<type Cmm.data_item>>=
type data_item =
    Cdefine_symbol of string
  | Cdefine_label of int
  | Cint8 of int
  | Cint16 of int
  | Cint of Nativeint.t
  | Cfloat of string
  | Csymbol_address of string
  | Clabel_address of int
  | Cstring of string
  | Cskip of int
  | Calign of int
@

<<type Cmm.phrase>>=
type phrase =
    Cfunction of fundecl
  | Cdata of data_item list
@


%-------------------------------------------------------------

<<asmcomp/cmm.mli>>=
<<copyright header>>

<<type Cmm.machtype_component>>

<<type Cmm.machtype>>

<<signature Cmm.typ_void>>
<<signature Cmm.typ_addr>>
<<signature Cmm.typ_int>>
<<signature Cmm.typ_float>>

<<signature Cmm.size_component>>
<<signature Cmm.size_machtype>>

<<type Cmm.comparison>>

<<signature Cmm.negate_comparison>>
<<signature Cmm.swap_comparison>>

<<type Cmm.memory_chunk>>

<<type Cmm.operation>>

<<type Cmm.expression>>

<<type Cmm.fundecl>>

<<type Cmm.data_item>>

<<type Cmm.phrase>>

@


\subsection*{[[asmcomp/cmm.ml]]}

<<type Cmm.machtype_component (asmcomp/cmm.ml)>>=

type machtype_component =
    Addr
  | Int
  | Float
@

<<type Cmm.machtype (asmcomp/cmm.ml)>>=
type machtype = machtype_component array
@

<<constant Cmm.typ_void>>=
let typ_void = ([||] : machtype_component array)
@

<<constant Cmm.typ_addr>>=
let typ_addr = [|Addr|]
@

<<constant Cmm.typ_int>>=
let typ_int = [|Int|]
@

<<constant Cmm.typ_float>>=
let typ_float = [|Float|]
@

<<function Cmm.size_component>>=
let size_component = function
    Addr -> Arch.size_addr
  | Int -> Arch.size_int
  | Float -> Arch.size_float
@

<<function Cmm.size_machtype>>=
let size_machtype mty =
  let size = ref 0 in
  for i = 0 to Array.length mty - 1 do
    size := !size + size_component mty.(i)
  done;
  !size
@

<<type Cmm.comparison (asmcomp/cmm.ml)>>=
type comparison =
    Ceq
  | Cne
  | Clt
  | Cle
  | Cgt
  | Cge
@

<<function Cmm.negate_comparison>>=
let negate_comparison = function
    Ceq -> Cne | Cne -> Ceq
  | Clt -> Cge | Cle -> Cgt
  | Cgt -> Cle | Cge -> Clt
@

<<function Cmm.swap_comparison>>=
let swap_comparison = function
    Ceq -> Ceq | Cne -> Cne
  | Clt -> Cgt | Cle -> Cge
  | Cgt -> Clt | Cge -> Cle
@

<<type Cmm.memory_chunk (asmcomp/cmm.ml)>>=
type memory_chunk =
    Byte_unsigned
  | Byte_signed
  | Sixteen_unsigned
  | Sixteen_signed
  | Word
@

<<type Cmm.operation (asmcomp/cmm.ml)>>=
type operation =
    Capply of machtype
  | Cextcall of string * machtype * bool
  | Cproj of int * int
  | Cload of machtype
  | Cloadchunk of memory_chunk
  | Calloc
  | Cstore
  | Cstorechunk of memory_chunk
  | Caddi | Csubi | Cmuli | Cdivi | Cmodi
  | Cand | Cor | Cxor | Clsl | Clsr | Casr
  | Ccmpi of comparison
  | Cadda | Csuba
  | Ccmpa of comparison
  | Cnegf | Cabsf
  | Caddf | Csubf | Cmulf | Cdivf
  | Cfloatofint | Cintoffloat
  | Ccmpf of comparison
  | Craise
  | Ccheckbound
@

<<type Cmm.expression (asmcomp/cmm.ml)>>=
type expression =
    Cconst_int of int
  | Cconst_natint of Nativeint.t
  | Cconst_float of string
  | Cconst_symbol of string
  | Cconst_pointer of int
  | Cvar of Ident.t
  | Clet of Ident.t * expression * expression
  | Cassign of Ident.t * expression
  | Ctuple of expression list
  | Cop of operation * expression list
  | Csequence of expression * expression
  | Cifthenelse of expression * expression * expression
  | Cswitch of expression * int array * expression array
  | Cloop of expression
  | Ccatch of expression * expression
  | Cexit
  | Ctrywith of expression * Ident.t * expression
@

<<type Cmm.fundecl (asmcomp/cmm.ml)>>=
type fundecl =
  { fun_name: string;
    fun_args: (Ident.t * machtype) list;
    fun_body: expression;
    fun_fast: bool }
@

<<type Cmm.data_item (asmcomp/cmm.ml)>>=
type data_item =
    Cdefine_symbol of string
  | Cdefine_label of int
  | Cint8 of int
  | Cint16 of int
  | Cint of Nativeint.t
  | Cfloat of string
  | Csymbol_address of string
  | Clabel_address of int
  | Cstring of string
  | Cskip of int
  | Calign of int
@

<<type Cmm.phrase (asmcomp/cmm.ml)>>=
type phrase =
    Cfunction of fundecl
  | Cdata of data_item list
@


%-------------------------------------------------------------

<<asmcomp/cmm.ml>>=
<<copyright header>>
<<type Cmm.machtype_component (asmcomp/cmm.ml)>>

<<type Cmm.machtype (asmcomp/cmm.ml)>>

<<constant Cmm.typ_void>>
<<constant Cmm.typ_addr>>
<<constant Cmm.typ_int>>
<<constant Cmm.typ_float>>

<<function Cmm.size_component>>

<<function Cmm.size_machtype>>

<<type Cmm.comparison (asmcomp/cmm.ml)>>

<<function Cmm.negate_comparison>>

<<function Cmm.swap_comparison>>

<<type Cmm.memory_chunk (asmcomp/cmm.ml)>>

<<type Cmm.operation (asmcomp/cmm.ml)>>

<<type Cmm.expression (asmcomp/cmm.ml)>>

<<type Cmm.fundecl (asmcomp/cmm.ml)>>

<<type Cmm.data_item (asmcomp/cmm.ml)>>

<<type Cmm.phrase (asmcomp/cmm.ml)>>

@


\subsection*{[[asmcomp/printcmm.mli]]}

<<signature Printcmm.machtype_component>>=
(* Pretty-printing of C-- code *)

val machtype_component : Cmm.machtype_component -> unit
@

<<signature Printcmm.machtype>>=
val machtype : Cmm.machtype_component array -> unit
@

<<signature Printcmm.comparison>>=
val comparison : Cmm.comparison -> unit
@

<<signature Printcmm.chunk>>=
val chunk : Cmm.memory_chunk -> unit
@

<<signature Printcmm.operation>>=
val operation : Cmm.operation -> unit
@

<<signature Printcmm.expression>>=
val expression : Cmm.expression -> unit
@

<<signature Printcmm.fundecl>>=
val fundecl : Cmm.fundecl -> unit
@

<<signature Printcmm.data>>=
val data : Cmm.data_item list -> unit
@

<<signature Printcmm.phrase>>=
val phrase : Cmm.phrase -> unit
@


%-------------------------------------------------------------

<<asmcomp/printcmm.mli>>=
<<copyright header>>

<<signature Printcmm.machtype_component>>
<<signature Printcmm.machtype>>
<<signature Printcmm.comparison>>
<<signature Printcmm.chunk>>
<<signature Printcmm.operation>>
<<signature Printcmm.expression>>
<<signature Printcmm.fundecl>>
<<signature Printcmm.data>>
<<signature Printcmm.phrase>>
@


\subsection*{[[asmcomp/printcmm.ml]]}

<<function Printcmm.machtype_component>>=
let machtype_component = function
    Addr -> print_string "addr"
  | Int -> print_string "int"
  | Float -> print_string "float"
@

<<function Printcmm.machtype>>=
let machtype mty =
  match Array.length mty with
    0 -> print_string "unit"
  | n -> machtype_component mty.(0);
         for i = 1 to n-1 do
           print_string "*"; machtype_component mty.(i)
         done
@

<<function Printcmm.comparison>>=
let comparison = function
    Ceq -> print_string "=="
  | Cne -> print_string "!="
  | Clt -> print_string "<"
  | Cle -> print_string "<="
  | Cgt -> print_string ">"
  | Cge -> print_string ">="
@

<<function Printcmm.chunk>>=
let chunk = function
    Byte_unsigned -> print_string "unsigned byte"
  | Byte_signed -> print_string "signed byte"
  | Sixteen_unsigned -> print_string "unsigned half"
  | Sixteen_signed -> print_string "signed half"
  | Word -> ()
@

<<function Printcmm.operation>>=
let operation = function
    Capply ty -> print_string "app"
  | Cextcall(lbl, ty, alloc) ->
      print_string "extcall \""; print_string lbl; print_string "\""
  | Cproj(ofs, len) ->
      print_string "proj "; print_int ofs;
      if len > 1 then begin print_string "-"; print_int (ofs + len - 1) end
  | Cload mty -> print_string "load"
  | Cloadchunk c -> print_string "load "; chunk c
  | Calloc -> print_string "alloc"
  | Cstore -> print_string "store"
  | Cstorechunk c -> print_string "store "; chunk c
  | Caddi -> print_string "+"
  | Csubi -> print_string "-"
  | Cmuli -> print_string "*"
  | Cdivi -> print_string "/"
  | Cmodi -> print_string "mod"
  | Cand -> print_string "and"
  | Cor -> print_string "or"
  | Cxor -> print_string "xor"
  | Clsl -> print_string "<<"
  | Clsr -> print_string ">>u"
  | Casr -> print_string ">>s"
  | Ccmpi c -> comparison c
  | Cadda -> print_string "+a"
  | Csuba -> print_string "-a"
  | Ccmpa c -> comparison c; print_string "a"
  | Cnegf -> print_string "~f"
  | Cabsf -> print_string "absf"
  | Caddf -> print_string "+f"
  | Csubf -> print_string "-f"
  | Cmulf -> print_string "*f"
  | Cdivf -> print_string "/f"
  | Cfloatofint -> print_string "floatofint"
  | Cintoffloat -> print_string "intoffloat"
  | Ccmpf c -> comparison c; print_string "f"
  | Craise -> print_string "raise"
  | Ccheckbound -> print_string "checkbound"
@

<<function Printcmm.fundecl>>=
let fundecl f =
  open_box 1;
  print_string "(function "; print_string f.fun_name; print_break 1 4;
  open_box 1;
  print_string "(";
  let first = ref true in
  List.iter
    (fun (id, ty) -> 
      if !first then first := false else print_space();
      Ident.print id; print_string ": "; machtype ty)
    f.fun_args;
  print_string ")"; close_box(); print_space();
  open_box 0;
  sequence f.fun_body;
  print_string ")";
  close_box(); close_box(); print_newline()
@

<<function Printcmm.data_item>>=
let data_item = function
    Cdefine_symbol s -> print_string "\""; print_string s; print_string "\":"
  | Cdefine_label l -> print_string "L"; print_int l; print_string ":"
  | Cint8 n -> print_string "byte "; print_int n
  | Cint16 n -> print_string "half "; print_int n
  | Cint n -> print_string "int "; print_string(Nativeint.to_string n)
  | Cfloat f -> print_string "float "; print_string f
  | Csymbol_address s ->
      print_string "addr \""; print_string s; print_string "\""
  | Clabel_address l -> print_string "addr L"; print_int l
  | Cstring s -> print_string "string \""; print_string s; print_string "\""
  | Cskip n -> print_string "skip "; print_int n
  | Calign n -> print_string "align "; print_int n
@

<<function Printcmm.data>>=
let data dl =
  open_hvbox 1;
  print_string "(data";
  List.iter (fun d -> print_space(); data_item d) dl;
  print_string ")"; close_box()
@

<<function Printcmm.phrase>>=
let phrase = function
    Cfunction f -> fundecl f
  | Cdata dl -> data dl
@


%-------------------------------------------------------------

<<asmcomp/printcmm.ml>>=
<<copyright header>>

(* Pretty-printing of C-- code *)

open Format
open Cmm

<<function Printcmm.machtype_component>>

<<function Printcmm.machtype>>

<<function Printcmm.comparison>>

<<function Printcmm.chunk>>

<<function Printcmm.operation>>

let rec expression = function
    Cconst_int n -> print_int n
  | Cconst_natint n -> print_string(Nativeint.to_string n)
  | Cconst_float s -> print_string s
  | Cconst_symbol s -> print_string "\""; print_string s; print_string "\""
  | Cconst_pointer n -> print_int n; print_string "a"
  | Cvar id -> Ident.print id
  | Clet(id, def, (Clet(_, _, _) as body)) ->
      open_box 2;
      print_string "(let"; print_space();
      open_box 1;
      print_string "(";
      open_box 2;
      Ident.print id; print_space(); expression def;
      close_box();
      let rec letdef = function
        Clet(id, def, body) ->
          print_space();
          open_box 2;
          Ident.print id; print_space(); expression def;
          close_box();
          letdef body
      | exp ->
          print_string ")"; close_box();
          print_space(); sequence exp
      in letdef body;
      print_string ")"; close_box()
  | Clet(id, def, body) ->
      open_box 2;
      print_string "(let"; print_space();
      open_box 2;
      Ident.print id; print_space(); expression def;
      close_box(); print_space();
      sequence body;
      print_string ")"; close_box()
  | Cassign(id, exp) ->
      open_box 2;
      print_string "(assign ";
      open_box 2;
      Ident.print id; print_space(); expression exp;
      close_box();
      print_string ")"; close_box()
  | Ctuple el ->
      open_box 1;
      print_string "[";
      let first = ref true in
      List.iter
        (fun e ->
          if !first then first := false else print_space();
          expression e)
        el;
      print_string "]";
      close_box()
  | Cop(op, el) ->
      open_box 2;
      print_string "("; operation op;
      List.iter (fun e -> print_space(); expression e) el;
      begin match op with
        Capply mty -> print_space(); machtype mty
      | Cextcall(_, mty, _) -> print_space(); machtype mty
      | Cload mty -> print_space(); machtype mty
      | _ -> ()
      end;
      print_string ")";
      close_box()
  | Csequence(e1, e2) ->
      open_box 2;
      print_string "(seq "; print_space();
      sequence e1; print_space();
      sequence e2; print_string ")"; close_box()
  | Cifthenelse(e1, e2, e3) ->
      open_box 2;
      print_string "(if";
      print_space(); expression e1;
      print_space(); expression e2;
      print_space(); expression e3;
      print_string ")"; close_box()
  | Cswitch(e1, index, cases) ->
      open_vbox 0;
      open_box 2;
      print_string "(switch"; print_space(); expression e1; print_space();
      close_box();
      for i = 0 to Array.length cases - 1 do
        print_space();
        open_box 2;
        for j = 0 to Array.length index - 1 do
          if index.(j) = i then begin
            print_string "case "; print_int j; print_string ":"; print_space()
          end
        done;
        sequence cases.(i);
        close_box()
      done;
      close_box()
  | Cloop e ->
      open_box 2;
      print_string "(loop";
      print_space(); sequence e;
      print_string ")"; close_box()
  | Ccatch(e1, e2) ->
      open_box 2;
      print_string "(catch";
      print_space(); sequence e1;
      print_break 1 (-2); print_string "with";
      print_space(); sequence e2;
      print_string ")"; close_box()
  | Cexit ->
      print_string "exit"
  | Ctrywith(e1, id, e2) ->
      open_box 2;
      print_string "(try";
      print_space(); sequence e1;
      print_break 1 (-2); print_string "with "; Ident.print id;
      print_space(); sequence e2;
      print_string ")"; close_box()

and sequence = function
    Csequence(e1, e2) ->
      sequence e1; print_space(); sequence e2
  | e ->
      expression e

<<function Printcmm.fundecl>>

<<function Printcmm.data_item>>

<<function Printcmm.data>>

<<function Printcmm.phrase>>
@


\subsection*{[[asmcomp/compilenv.mli]]}

<<type Compilenv.unit_infos>>=
type unit_infos =
  { mutable ui_name: string;                    (* Name of unit implemented *)
    mutable ui_imports_cmi: (string * Digest.t) list; (* Interfaces imported *)
    mutable ui_imports_cmx: (string * Digest.t) list; (* Infos imported *)
    mutable ui_approx: value_approximation;     (* Approx of the structure *)
    mutable ui_curry_fun: int list;             (* Currying functions needed *)
    mutable ui_apply_fun: int list;             (* Apply functions needed *)
    mutable ui_force_link: bool }               (* Always linked *)
@

<<signature Compilenv.reset>>=
val reset: string -> unit
        (* Reset the environment and record the name of the unit being
           compiled (arg). *)
@

<<signature Compilenv.current_unit_name>>=
val current_unit_name: unit -> string
        (* Return the name of the unit being compiled *)
@

<<signature Compilenv.global_approx>>=
val global_approx: Ident.t -> Clambda.value_approximation
        (* Return the approximation for the given global identifier *)
@

<<signature Compilenv.set_global_approx>>=
val set_global_approx: Clambda.value_approximation -> unit
        (* Record the approximation of the unit being compiled *)
@

<<signature Compilenv.need_curry_fun>>=
val need_curry_fun: int -> unit
@

<<signature Compilenv.need_apply_fun>>=
val need_apply_fun: int -> unit
        (* Record the need of a currying (resp. application) function
           with the given arity *)
@

<<signature Compilenv.read_unit_info>>=
val read_unit_info: string -> unit_infos * Digest.t
        (* Read infos and CRC from a [.cmx] file. *)
@

<<signature Compilenv.save_unit_info>>=
val save_unit_info: string -> unit
        (* Save the infos for the current unit in the given file *)
@

<<signature Compilenv.cmx_not_found_crc>>=
val cmx_not_found_crc: Digest.t
        (* Special digest used in the [ui_imports_cmx] list to signal
           that no [.cmx] file was found and used for the imported unit *)
@

<<type Compilenv.error>>=
type error =
    Not_a_unit_info of string
  | Corrupted_unit_info of string
  | Illegal_renaming of string * string
@

<<exception Compilenv.Error>>=
exception Error of error
@

<<signature Compilenv.report_error>>=
val report_error: error -> unit
@


%-------------------------------------------------------------

<<asmcomp/compilenv.mli>>=
<<copyright header>>

(* Compilation environments for compilation units *)

open Clambda

<<type Compilenv.unit_infos>>

<<signature Compilenv.reset>>

<<signature Compilenv.current_unit_name>>

<<signature Compilenv.global_approx>>
<<signature Compilenv.set_global_approx>>

<<signature Compilenv.need_curry_fun>>
<<signature Compilenv.need_apply_fun>>

<<signature Compilenv.read_unit_info>>
<<signature Compilenv.save_unit_info>>

<<signature Compilenv.cmx_not_found_crc>>

<<type Compilenv.error>>

<<exception Compilenv.Error>>

<<signature Compilenv.report_error>>
@


\subsection*{[[asmcomp/compilenv.ml]]}

<<type Compilenv.error (asmcomp/compilenv.ml)>>=
type error =
    Not_a_unit_info of string
  | Corrupted_unit_info of string
  | Illegal_renaming of string * string
@

<<exception Compilenv.Error (asmcomp/compilenv.ml)>>=
exception Error of error
@

<<type Compilenv.unit_infos (asmcomp/compilenv.ml)>>=
(* Each .o file has a matching .cmx file that provides the following infos
   on the compilation unit:
     - list of other units imported, with CRCs of their .cmx files
     - approximation of the structure implemented
       (includes descriptions of known functions: arity and direct entry
        points)
     - list of currying functions and application functions needed
   The .cmx file contains these infos (as an externed record) plus a CRC
   of these infos *)

type unit_infos =
  { mutable ui_name: string;                    (* Name of unit implemented *)
    mutable ui_imports_cmi: (string * Digest.t) list; (* Interfaces imported *)
    mutable ui_imports_cmx: (string * Digest.t) list; (* Infos imported *)
    mutable ui_approx: value_approximation;     (* Approx of the structure *)
    mutable ui_curry_fun: int list;             (* Currying functions needed *)
    mutable ui_apply_fun: int list;             (* Apply functions needed *)
    mutable ui_force_link: bool }               (* Always linked *)
@

<<constant Compilenv.global_approx_table>>=
let global_approx_table =
@

<<constant Compilenv.current_unit>>=
let current_unit =
  { ui_name = "";
    ui_imports_cmi = [];
    ui_imports_cmx = [];
    ui_approx = Value_unknown;
    ui_curry_fun = [];
    ui_apply_fun = [];
    ui_force_link = false }
@

<<function Compilenv.reset>>=
let reset name =
  Hashtbl.clear global_approx_table;
  current_unit.ui_name <- name;
  current_unit.ui_imports_cmi <- [];
  current_unit.ui_imports_cmx <- [];
  current_unit.ui_curry_fun <- [];
  current_unit.ui_apply_fun <- [];
  current_unit.ui_force_link <- false
@

<<function Compilenv.current_unit_name>>=
let current_unit_name () =
  current_unit.ui_name
@

<<function Compilenv.read_unit_info>>=
let read_unit_info filename =
  let ic = open_in_bin filename in
  try
    let buffer = String.create (String.length cmx_magic_number) in
    really_input ic buffer 0 (String.length cmx_magic_number);
    if buffer <> cmx_magic_number then begin
      close_in ic;
      raise(Error(Not_a_unit_info filename))
    end;
    let ui = (input_value ic : unit_infos) in
    let crc = Digest.input ic in
    close_in ic;
    (ui, crc)
  with End_of_file | Failure _ ->
    close_in ic;
    raise(Error(Corrupted_unit_info(filename)))
@

<<constant Compilenv.cmx_not_found_crc>>=
(* Return the approximation of a global identifier *)

let cmx_not_found_crc =
  "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
@

<<function Compilenv.global_approx>>=
let global_approx global_ident =
  let modname = Ident.name global_ident in
  try
    Hashtbl.find global_approx_table modname
  with Not_found ->
    let (approx, crc) =
      try
        let filename =
          find_in_path !load_path (String.uncapitalize modname ^ ".cmx") in
        let (ui, crc) = read_unit_info filename in
        if ui.ui_name <> modname then
          raise(Error(Illegal_renaming(modname, filename)));
        (ui.ui_approx, crc)
      with Not_found ->
        (Value_unknown, cmx_not_found_crc) in
    current_unit.ui_imports_cmx <-
      (modname, crc) :: current_unit.ui_imports_cmx;
    Hashtbl.add global_approx_table modname approx;
    approx
@

<<function Compilenv.set_global_approx>>=
(* Register the approximation of the module being compiled *)

let set_global_approx approx =
  current_unit.ui_approx <- approx
@

<<function Compilenv.need_curry_fun>>=
(* Record that a currying function or application function is needed *)

let need_curry_fun n =
  if not (List.mem n current_unit.ui_curry_fun) then
    current_unit.ui_curry_fun <- n :: current_unit.ui_curry_fun
@

<<function Compilenv.need_apply_fun>>=
let need_apply_fun n =
  if not (List.mem n current_unit.ui_apply_fun) then
    current_unit.ui_apply_fun <- n :: current_unit.ui_apply_fun
@

<<function Compilenv.save_unit_info>>=
(* Write the description of the current unit *)

let save_unit_info filename =
  current_unit.ui_imports_cmi <- Env.imported_units();
  let oc = open_out_bin filename in
  output_string oc cmx_magic_number;
  output_value oc current_unit;
  flush oc;
  let crc = Digest.file filename in
  Digest.output oc crc;
  close_out oc
@

<<function Compilenv.report_error>>=
let report_error = function
    Not_a_unit_info filename ->
      print_string filename; print_space();
      print_string "is not a compilation unit description."
  | Corrupted_unit_info filename ->
      print_string "Corrupted compilation unit description"; print_space();
      print_string filename
  | Illegal_renaming(modname, filename) ->
      print_string filename; print_space();
      print_string "contains the description for unit"; print_space();
      print_string modname
@


%-------------------------------------------------------------

<<asmcomp/compilenv.ml>>=
<<copyright header>>

(* Compilation environments for compilation units *)

open Config
open Misc
open Clambda

<<type Compilenv.error (asmcomp/compilenv.ml)>>

<<exception Compilenv.Error (asmcomp/compilenv.ml)>>

<<type Compilenv.unit_infos (asmcomp/compilenv.ml)>>

<<constant Compilenv.global_approx_table>>
  (Hashtbl.create 17 : (string, value_approximation) Hashtbl.t)

<<constant Compilenv.current_unit>>

<<function Compilenv.reset>>

<<function Compilenv.current_unit_name>>

<<function Compilenv.read_unit_info>>

<<constant Compilenv.cmx_not_found_crc>>

<<function Compilenv.global_approx>>

<<function Compilenv.set_global_approx>>

<<function Compilenv.need_curry_fun>>

<<function Compilenv.need_apply_fun>>

<<function Compilenv.save_unit_info>>

(* Error report *)

open Format

<<function Compilenv.report_error>>

@


\subsection*{[[asmcomp/reg.mli]]}

<<type Reg.t>>=
type t =
  { mutable name: string;               (* Name (for printing) *)
    stamp: int;                         (* Unique stamp *)
    typ: Cmm.machtype_component;        (* Type of contents *)
    mutable loc: location;              (* Actual location *)
    mutable spill: bool;                (* "true" to force stack allocation  *)
    mutable interf: t list;             (* Other regs live simultaneously *)
    mutable prefer: (t * int) list;     (* Preferences for other regs *)
    mutable degree: int;                (* Number of other regs live sim. *)
    mutable spill_cost: int;            (* Estimate of spilling cost *)
    mutable visited: bool }             (* For graph walks *)
@

<<type Reg.location>>=
and location =
    Unknown
  | Reg of int
  | Stack of stack_location
@

<<type Reg.stack_location>>=
and stack_location =
    Local of int
  | Incoming of int
  | Outgoing of int
@

<<signature Reg.dummy>>=
val dummy: t
@

<<signature Reg.create>>=
val create: Cmm.machtype_component -> t
@

<<signature Reg.createv>>=
val createv: Cmm.machtype -> t array
@

<<signature Reg.clone>>=
val clone: t -> t
@

<<signature Reg.at_location>>=
val at_location: Cmm.machtype_component -> location -> t
@

<<signature Reg.add_set_array>>=
val add_set_array: t Set.t -> t array -> t Set.t
@

<<signature Reg.diff_set_array>>=
val diff_set_array: t Set.t -> t array -> t Set.t
@

<<signature Reg.inter_set_array>>=
val inter_set_array: t Set.t -> t array -> t Set.t
@

<<signature Reg.set_of_array>>=
val set_of_array: t array -> t Set.t
@

<<signature Reg.reset>>=
val reset: unit -> unit
@

<<signature Reg.all_registers>>=
val all_registers: unit -> t list
@

<<signature Reg.num_registers>>=
val num_registers: unit -> int
@

<<signature Reg.reinit>>=
val reinit: unit -> unit
@


%-------------------------------------------------------------

<<asmcomp/reg.mli>>=
<<copyright header>>

(* Pseudo-registers *)

<<type Reg.t>>

<<type Reg.location>>

<<type Reg.stack_location>>

<<signature Reg.dummy>>
<<signature Reg.create>>
<<signature Reg.createv>>
<<signature Reg.clone>>
<<signature Reg.at_location>>

<<signature Reg.add_set_array>>
<<signature Reg.diff_set_array>>
<<signature Reg.inter_set_array>>
<<signature Reg.set_of_array>>

<<signature Reg.reset>>
<<signature Reg.all_registers>>
<<signature Reg.num_registers>>
<<signature Reg.reinit>>
@


\subsection*{[[asmcomp/reg.ml]]}

<<type Reg.t (asmcomp/reg.ml)>>=
type t =
  { mutable name: string;
    stamp: int;
    typ: Cmm.machtype_component;
    mutable loc: location;
    mutable spill: bool;
    mutable interf: t list;
    mutable prefer: (t * int) list;
    mutable degree: int;
    mutable spill_cost: int;
    mutable visited: bool }
@

<<type Reg.location (asmcomp/reg.ml)>>=
and location =
    Unknown
  | Reg of int
  | Stack of stack_location
@

<<type Reg.stack_location (asmcomp/reg.ml)>>=
and stack_location =
    Local of int
  | Incoming of int
  | Outgoing of int
@

<<type Reg.reg>>=
type reg = t
@

<<constant Reg.dummy>>=
let dummy =
  { name = ""; stamp = 0; typ = Int; loc = Unknown; spill = false;
    interf = []; prefer = []; degree = 0; spill_cost = 0; visited = false }
@

<<constant Reg.currstamp>>=
let currstamp = ref 0
@

<<constant Reg.reg_list>>=
let reg_list = ref([] : t list)
@

<<function Reg.create>>=
let create ty =
  let r = { name = ""; stamp = !currstamp; typ = ty; loc = Unknown;
            spill = false; interf = []; prefer = []; degree = 0;
            spill_cost = 0; visited = false } in
  reg_list := r :: !reg_list;
  incr currstamp;
  r
@

<<function Reg.createv>>=
let createv tyv =
  let n = Array.length tyv in
  let rv = Array.create n dummy in
  for i = 0 to n-1 do rv.(i) <- create tyv.(i) done;
  rv
@

<<function Reg.clone>>=
let clone r =
  let nr = create r.typ in
  nr.name <- r.name;
  nr
@

<<function Reg.at_location>>=
let at_location ty loc =
  let r = { name = "R"; stamp = !currstamp; typ = ty; loc = loc; spill = false;
            interf = []; prefer = []; degree = 0; spill_cost = 0;
            visited = false } in
  incr currstamp;
  r
@

<<function Reg.reset>>=
let reset() = currstamp := 100; reg_list := []
@

<<function Reg.all_registers>>=
let all_registers() = !reg_list
@

<<function Reg.num_registers>>=
let num_registers() = !currstamp
@

<<function Reg.reinit_reg>>=
let reinit_reg r =
  r.loc <- Unknown;
  r.interf <- [];
  r.prefer <- [];
  r.degree <- 0;
  (* Preserve the very high spill costs introduced by the reloading pass *)
  if r.spill_cost >= 100000
  then r.spill_cost <- 100000
  else r.spill_cost <- 0
@

<<function Reg.reinit>>=
let reinit() =
  List.iter reinit_reg !reg_list
@

<<function Reg.add_set_array>>=
(*
TODO good enough?
module RegOrder =
  struct
    type t = reg
    let compare r1 r2 = r1.stamp - r2.stamp
  end
module Set = Set.Make(RegOrder)
module Map = Map.Make(RegOrder)
*)


let add_set_array s v =
  match Array.length v with
    0 -> s
  | 1 -> Set.add v.(0) s
  | n -> let rec add_all i =
           if i >= n then s else Set.add v.(i) (add_all(i+1))
         in add_all 0
@

<<function Reg.diff_set_array>>=
let diff_set_array s v =
  match Array.length v with
    0 -> s
  | 1 -> Set.remove v.(0) s
  | n -> let rec remove_all i =
           if i >= n then s else Set.remove v.(i) (remove_all(i+1))
         in remove_all 0
@

<<function Reg.inter_set_array>>=
let inter_set_array s v =
  match Array.length v with
    0 -> Set.empty
  | 1 -> if Set.mem v.(0) s
         then Set.add v.(0) Set.empty
         else Set.empty
  | n -> let rec inter_all i =
           if i >= n then Set.empty
           else if Set.mem v.(i) s then Set.add v.(i) (inter_all(i+1))
           else inter_all(i+1)
         in inter_all 0
@

<<function Reg.set_of_array>>=
let set_of_array v =
  match Array.length v with
    0 -> Set.empty
  | 1 -> Set.add v.(0) Set.empty
  | n -> let rec add_all i =
           if i >= n then Set.empty else Set.add v.(i) (add_all(i+1))
         in add_all 0
@


%-------------------------------------------------------------

<<asmcomp/reg.ml>>=
<<copyright header>>

open Cmm

<<type Reg.t (asmcomp/reg.ml)>>

<<type Reg.location (asmcomp/reg.ml)>>

<<type Reg.stack_location (asmcomp/reg.ml)>>

<<type Reg.reg>>

<<constant Reg.dummy>>

<<constant Reg.currstamp>>
<<constant Reg.reg_list>>

<<function Reg.create>>

<<function Reg.createv>>

<<function Reg.clone>>

<<function Reg.at_location>>

<<function Reg.reset>>
<<function Reg.all_registers>>
<<function Reg.num_registers>>

<<function Reg.reinit_reg>>

<<function Reg.reinit>>

<<function Reg.add_set_array>>

<<function Reg.diff_set_array>>

<<function Reg.inter_set_array>>

<<function Reg.set_of_array>>
@


\subsection*{[[asmcomp/asmlibrarian.mli]]}

<<signature Asmlibrarian.create_archive>>=
(* Build libraries of .cmx files *)

val create_archive: string list -> string -> unit
@

<<type Asmlibrarian.error>>=
type error =
    File_not_found of string
  | Archiver_error of string
@

<<exception Asmlibrarian.Error>>=
exception Error of error
@

<<signature Asmlibrarian.report_error>>=
val report_error: error -> unit
@


%-------------------------------------------------------------

<<asmcomp/asmlibrarian.mli>>=
<<copyright header>>

<<signature Asmlibrarian.create_archive>>

<<type Asmlibrarian.error>>

<<exception Asmlibrarian.Error>>

<<signature Asmlibrarian.report_error>>
@


\subsection*{[[asmcomp/asmlibrarian.ml]]}

<<type Asmlibrarian.error (asmcomp/asmlibrarian.ml)>>=
type error =
    File_not_found of string
  | Archiver_error of string
@

<<exception Asmlibrarian.Error (asmcomp/asmlibrarian.ml)>>=
exception Error of error
@

<<function Asmlibrarian.read_info>>=
let read_info name =
  let filename =
    try
      find_in_path !load_path name
    with Not_found ->
      raise(Error(File_not_found name)) in
  let (info, crc) = Compilenv.read_unit_info filename in
  info.ui_force_link <- !Clflags.link_everything;
  (* There is no need to keep the approximation in the .cmxa file,
     since the compiler will go looking directly for .cmx files.
     The linker, which is the only one that reads .cmxa files, does not
     need the approximation. *)
  info.ui_approx <- Clambda.Value_unknown;
  (Filename.chop_suffix filename ".cmx" ^ ext_obj, (info, crc))
@

<<function Asmlibrarian.create_archive>>=
let create_archive file_list lib_name =
  let archive_name = Filename.chop_suffix lib_name ".cmxa" ^ ext_lib in
  let outchan = open_out_bin lib_name in
  try
    output_string outchan cmxa_magic_number;
    let (objfile_list, descr_list) =
      List.split (List.map read_info file_list) in
    output_value outchan descr_list;
    if Ccomp.create_archive archive_name objfile_list <> 0
    then raise(Error(Archiver_error archive_name));
    close_out outchan
  with x ->
    close_out outchan;
    remove_file lib_name;
    remove_file archive_name;
    raise x
@

<<function Asmlibrarian.report_error>>=
let report_error = function
    File_not_found name ->
      print_string "Cannot find file "; print_string name
  | Archiver_error name ->
      print_string "Error while creating the library ";
      print_string name
@


%-------------------------------------------------------------

<<asmcomp/asmlibrarian.ml>>=
<<copyright header>>

(* Build libraries of .cmx files *)

open Misc
open Config
open Compilenv

<<type Asmlibrarian.error (asmcomp/asmlibrarian.ml)>>

<<exception Asmlibrarian.Error (asmcomp/asmlibrarian.ml)>>

<<function Asmlibrarian.read_info>>

<<function Asmlibrarian.create_archive>>

open Format

<<function Asmlibrarian.report_error>>

@


\subsection*{[[asmcomp/closure.mli]]}

<<signature Closure.intro>>=
(* Introduction of closures, uncurrying, recognition of direct calls *)

val intro: int -> Lambda.lambda -> Clambda.ulambda
@


%-------------------------------------------------------------

<<asmcomp/closure.mli>>=
<<copyright header>>

<<signature Closure.intro>>

@


\subsection*{[[asmcomp/closure.ml]]}

<<function Closure.split_list>>=
(* Auxiliaries for compiling functions *)

let rec split_list n l =
  if n <= 0 then ([], l) else begin
    match l with
      [] -> fatal_error "Closure.split_list"
    | a::l -> let (l1, l2) = split_list (n-1) l in (a::l1, l2)
  end
@

<<function Closure.build_closure_env>>=
let rec build_closure_env env_param pos = function
    [] -> Tbl.empty
  | id :: rem ->
      Tbl.add id (Uprim(Pfield pos, [Uvar env_param])) 
              (build_closure_env env_param (pos+1) rem)
@

<<function Closure.occurs_var>>=
(* Check if a variable occurs in a [clambda] term. *)

let occurs_var var u =
  let rec occurs = function
      Uvar v -> v = var
    | Uconst cst -> false
    | Udirect_apply(lbl, args) -> List.exists occurs args
    | Ugeneric_apply(funct, args) -> occurs funct or List.exists occurs args
    | Uclosure(fundecls, clos) -> List.exists occurs clos
    | Uoffset(u, ofs) -> occurs u
    | Ulet(id, def, body) -> occurs def or occurs body
    | Uletrec(decls, body) ->
        List.exists (fun (id, u) -> occurs u) decls or occurs body
    | Uprim(p, args) -> List.exists occurs args
    | Uswitch(arg, s) ->
        occurs arg or occurs_array s.us_cases_consts
                   or occurs_array s.us_cases_blocks
    | Ustaticfail -> false
    | Ucatch(body, hdlr) -> occurs body or occurs hdlr
    | Utrywith(body, exn, hdlr) -> occurs body or occurs hdlr
    | Uifthenelse(cond, ifso, ifnot) ->
        occurs cond or occurs ifso or occurs ifnot
    | Usequence(u1, u2) -> occurs u1 or occurs u2
    | Uwhile(cond, body) -> occurs cond or occurs body
    | Ufor(id, lo, hi, dir, body) -> occurs lo or occurs hi or occurs body
    | Uassign(id, u) -> id = var or occurs u
  and occurs_array a =
    try
      for i = 0 to Array.length a - 1 do
        if occurs a.(i) then raise Exit
      done;
      false
    with Exit ->
      true
  in occurs u
@

<<function Closure.prim_size>>=
(* Determine whether the estimated size of a clambda term is below
   some threshold *)

let prim_size prim args =
  match prim with
    Pidentity -> 0
  | Pgetglobal id -> 1
  | Psetglobal id -> 1
  | Pmakeblock(tag, mut) -> 5 + List.length args
  | Pfield f -> 1
  | Psetfield(f, isptr) -> if isptr then 4 else 1
  | Pfloatfield f -> 1
  | Psetfloatfield f -> 1
  | Pccall p -> (if p.prim_alloc then 10 else 4) + List.length args
  | Praise -> 4
  | Pstringlength -> 5
  | Pstringrefs | Pstringsets -> 6
  | Pmakearray kind -> 5 + List.length args
  | Parraylength kind -> if kind = Pgenarray then 6 else 2
  | Parrayrefu kind -> if kind = Pgenarray then 12 else 2
  | Parraysetu kind -> if kind = Pgenarray then 16 else 4
  | Parrayrefs kind -> if kind = Pgenarray then 18 else 8
  | Parraysets kind -> if kind = Pgenarray then 22 else 10
  | Pbittest -> 3
  | _ -> 2 (* arithmetic and comparisons *)
@

<<function Closure.lambda_smaller>>=
let lambda_smaller lam threshold =
  let size = ref 0 in
  let rec lambda_size lam =
    if !size > threshold then raise Exit;
    match lam with
      Uvar v -> ()
    | Uconst(Const_base(Const_int _ | Const_char _ | Const_float _) |
             Const_pointer _) -> incr size
    | Uconst _ ->
        raise Exit (* avoid duplication of structured constants *)
    | Udirect_apply(fn, args) ->
        size := !size + 4; lambda_list_size args
    | Ugeneric_apply(fn, args) ->
        size := !size + 6; lambda_size fn; lambda_list_size args
    | Uclosure(defs, vars) ->
        raise Exit (* inlining would duplicate function definitions *)
    | Uoffset(lam, ofs) ->
        incr size; lambda_size lam
    | Ulet(id, lam, body) ->
        lambda_size lam; lambda_size body
    | Uletrec(bindings, body) ->
        raise Exit (* usually too large *)
    | Uprim(prim, args) ->
        size := !size + prim_size prim args;
        lambda_list_size args
    | Uswitch(lam, cases) ->
        if Array.length cases.us_cases_consts > 0 then size := !size + 5;
        if Array.length cases.us_cases_blocks > 0 then size := !size + 5;
        if cases.us_checked then size := !size + 2;
        lambda_size lam;
        lambda_array_size cases.us_cases_consts;
        lambda_array_size cases.us_cases_blocks
    | Ustaticfail -> ()
    | Ucatch(body, handler) ->
        incr size; lambda_size body; lambda_size handler
    | Utrywith(body, id, handler) ->
        size := !size + 8; lambda_size body; lambda_size handler
    | Uifthenelse(cond, ifso, ifnot) ->
        size := !size + 2;
        lambda_size cond; lambda_size ifso; lambda_size ifnot
    | Usequence(lam1, lam2) ->
        lambda_size lam1; lambda_size lam2
    | Uwhile(cond, body) ->
        size := !size + 2; lambda_size cond; lambda_size body
    | Ufor(id, low, high, dir, body) ->
        size := !size + 4; lambda_size low; lambda_size high; lambda_size body
    | Uassign(id, lam) ->
        incr size;  lambda_size lam
  and lambda_list_size l = List.iter lambda_size l
  and lambda_array_size a = Array.iter lambda_size a in
  try
    lambda_size lam; !size <= threshold
  with Exit ->
    false
@

<<function Closure.is_pure>>=
(* Check if a lambda term denoting a function is ``pure'',
   that is without side-effects *and* not containing function definitions *)

let rec is_pure = function
    Lvar v -> true
  | Lprim(Pgetglobal id, _) -> true
  | Lprim(Pfield n, [arg]) -> is_pure arg
  | _ -> false
@

<<function Closure.direct_apply>>=
(* Generate a direct application *)

let direct_apply fundesc funct ufunct uargs =
  let app_args =
    if fundesc.fun_closed then uargs else uargs @ [ufunct] in
  let app =
    match fundesc.fun_inline with
      None -> Udirect_apply(fundesc.fun_label, app_args)
    | Some(params, body) ->
        List.fold_right2
          (fun param arg body -> Ulet(param, arg, body))
          params app_args body in
  (if is_pure funct then app else Usequence(ufunct, app))
@

<<constant Closure.global_approx>>=
(* Maintain the approximation of the global structure being defined *)

let global_approx = ref([||] : value_approximation array)
@

<<function Closure.close_var>>=
(* Uncurry an expression and explicitate closures.
   Also return the approximation of the expression.
   The approximation environment [fenv] maps idents to approximations.
   Idents not bound in [fenv] approximate to [Value_unknown].
   The closure environment [cenv] maps idents to [ulambda] terms.
   It is used to substitute environment accesses for free identifiers. *)

let close_var cenv id =
  try Tbl.find id cenv with Not_found -> Uvar id
@

<<function Closure.approx_var>>=
let approx_var fenv id =
  try Tbl.find id fenv with Not_found -> Value_unknown 
@

<<function Closure.intro>>=
(* The entry point *)

let intro size lam =
  global_approx := Array.create size Value_unknown;
  let (ulam, approx) = close Tbl.empty Tbl.empty lam in
  Compilenv.set_global_approx(Value_tuple !global_approx);
  global_approx := [||];
  ulam
@


%-------------------------------------------------------------

<<asmcomp/closure.ml>>=
<<copyright header>>

(* Introduction of closures, uncurrying, recognition of direct calls *)

open Misc
open Asttypes
open Primitive
open Lambda
open Clambda

module IdentSet = Set

<<function Closure.split_list>>

<<function Closure.build_closure_env>>

<<function Closure.occurs_var>>

<<function Closure.prim_size>>

<<function Closure.lambda_smaller>>

<<function Closure.is_pure>>

<<function Closure.direct_apply>>

<<constant Closure.global_approx>>

<<function Closure.close_var>>

<<function Closure.approx_var>>

let rec close fenv cenv = function
    Lvar id ->
      (close_var cenv id, approx_var fenv id)
  | Lconst cst ->
      (Uconst cst, Value_unknown)
  | Lfunction(kind, params, body) as funct ->
      close_one_function fenv cenv (Ident.create "fun") funct
  | Lapply(funct, args) ->
      let nargs = List.length args in
      begin match (close fenv cenv funct, close_list fenv cenv args) with
        ((ufunct, Value_closure(fundesc, approx_res)),
         [Uprim(Pmakeblock(_, _), uargs)])
        when List.length uargs = - fundesc.fun_arity ->
          (direct_apply fundesc funct ufunct uargs, approx_res)
      | ((ufunct, Value_closure(fundesc, approx_res)), uargs)
        when nargs = fundesc.fun_arity ->
          (direct_apply fundesc funct ufunct uargs, approx_res)
      | ((ufunct, Value_closure(fundesc, approx_res)), uargs)
        when fundesc.fun_arity > 0 && nargs > fundesc.fun_arity ->
          let (first_args, rem_args) = split_list fundesc.fun_arity uargs in
          (Ugeneric_apply(direct_apply fundesc funct ufunct first_args,
                          rem_args),
           Value_unknown)
      | ((ufunct, _), uargs) ->
          (Ugeneric_apply(ufunct, uargs), Value_unknown)
      end
  | Llet(str, id, lam, body) ->
      let (ulam, alam) = close_named fenv cenv id lam in
      let (ubody, abody) = close (Tbl.add id alam fenv) cenv body in
      (Ulet(id, ulam, ubody), abody)
  | Lletrec(defs, body) ->
      if List.for_all
           (function (id, Lfunction(_, _, _)) -> true | _ -> false)
           defs
      then begin
        (* Simple case: only function definitions *)
        let (clos, infos) = close_functions fenv cenv defs in
        let clos_ident = Ident.create "clos" in
        let fenv_body =
          List.fold_right
            (fun (id, pos, approx) fenv -> Tbl.add id approx fenv)
            infos fenv in
        let (ubody, approx) = close fenv_body cenv body in
        (Ulet(clos_ident, clos,
              List.fold_right
                (fun (id, pos, approx) body ->
                    Ulet(id, Uoffset(Uvar clos_ident, pos), body))
                infos ubody),
         approx)
      end else begin
        (* General case: recursive definition of values *)
        let rec clos_defs = function
          [] -> ([], fenv)
        | (id, lam) :: rem ->
            let (udefs, fenv_body) = clos_defs rem in
            let (ulam, approx) = close fenv cenv lam in
            ((id, ulam) :: udefs, Tbl.add id approx fenv_body) in
        let (udefs, fenv_body) = clos_defs defs in
        let (ubody, approx) = close fenv_body cenv body in
        (Uletrec(udefs, ubody), approx)
      end
  | Lprim(Pgetglobal id, []) ->
      (Uprim(Pgetglobal id, []), Compilenv.global_approx id)
  | Lprim(Pmakeblock(tag, mut) as prim, lams) ->
      let (ulams, approxs) = List.split (List.map (close fenv cenv) lams) in
      (Uprim(prim, ulams),
       begin match mut with
           Immutable -> Value_tuple(Array.of_list approxs)
         | Mutable -> Value_unknown
       end)
  | Lprim(Pfield n, [lam]) ->
      let (ulam, approx) = close fenv cenv lam in
      (Uprim(Pfield n, [ulam]),
       match approx with
           Value_tuple a when n < Array.length a -> a.(n)
         | _ -> Value_unknown)
  | Lprim(Psetfield(n, _), [Lprim(Pgetglobal id, []); lam]) ->
      let (ulam, approx) = close fenv cenv lam in
      (!global_approx).(n) <- approx;
      (Uprim(Psetfield(n, false), [Uprim(Pgetglobal id, []); ulam]),
       Value_unknown)
  | Lprim(p, args) ->
      (Uprim(p, close_list fenv cenv args), Value_unknown)
  | Lswitch(arg, sw) ->
      let (uarg, _) = close fenv cenv arg in
      let (const_index, const_cases) =
        close_switch fenv cenv sw.sw_numconsts sw.sw_consts in
      let (block_index, block_cases) =
        close_switch fenv cenv sw.sw_numblocks sw.sw_blocks in
      (Uswitch(uarg, 
               {us_index_consts = const_index;
                us_cases_consts = const_cases;
                us_index_blocks = block_index;
                us_cases_blocks = block_cases;
                us_checked = sw.sw_checked}),
       Value_unknown)
  | Lstaticfail ->
      (Ustaticfail, Value_unknown)
  | Lcatch(body, handler) ->
      let (ubody, _) = close fenv cenv body in
      let (uhandler, _) = close fenv cenv handler in
      (Ucatch(ubody, uhandler), Value_unknown)
  | Ltrywith(body, id, handler) ->
      let (ubody, _) = close fenv cenv body in
      let (uhandler, _) = close fenv cenv handler in
      (Utrywith(ubody, id, uhandler), Value_unknown)
  | Lifthenelse(arg, ifso, ifnot) ->
      let (uarg, _) = close fenv cenv arg in
      let (uifso, _) = close fenv cenv ifso in
      let (uifnot, _) = close fenv cenv ifnot in
      (Uifthenelse(uarg, uifso, uifnot), Value_unknown)
  | Lsequence(lam1, lam2) ->
      let (ulam1, _) = close fenv cenv lam1 in
      let (ulam2, approx) = close fenv cenv lam2 in
      (Usequence(ulam1, ulam2), approx)
  | Lwhile(cond, body) ->
      let (ucond, _) = close fenv cenv cond in
      let (ubody, _) = close fenv cenv body in
      (Uwhile(ucond, ubody), Value_unknown)
  | Lfor(id, lo, hi, dir, body) ->
      let (ulo, _) = close fenv cenv lo in
      let (uhi, _) = close fenv cenv hi in
      let (ubody, _) = close fenv cenv body in
      (Ufor(id, ulo, uhi, dir, ubody), Value_unknown)
  | Lassign(id, lam) ->
      let (ulam, _) = close fenv cenv lam in
      (Uassign(id, ulam), Value_unknown)
  | Levent _ -> assert false

and close_list fenv cenv = function
    [] -> []
  | lam :: rem ->
      let (ulam, _) = close fenv cenv lam in
      ulam :: close_list fenv cenv rem

and close_named fenv cenv id = function
    Lfunction(kind, params, body) as funct ->
      close_one_function fenv cenv id funct
  | lam ->
      close fenv cenv lam

(* Build a shared closure for a set of mutually recursive functions *)

and close_functions fenv cenv fun_defs =
  (* Determine the free variables of the functions *)
  let fv =
    IdentSet.elements (free_variables (Lletrec(fun_defs, lambda_unit))) in
  (* Build the function descriptors for the functions.
     Initially all functions are assumed not to need their environment
     parameter. *)
  let uncurried_defs =
    List.map
      (function
          (id, (Lfunction(kind, params, body) as def)) ->
            let label =
              Compilenv.current_unit_name() ^ "_" ^ Ident.unique_name id in
            let arity = List.length params in
            let fundesc =
              {fun_label = label;
               fun_arity = (if kind = Tupled then -arity else arity);
               fun_closed = true;
               fun_inline = None } in
            (id, params, body, fundesc)
        | (_, _) -> fatal_error "Closure.close_functions")
      fun_defs in
  (* Build an approximate fenv for compiling the functions *)
  let fenv_rec =
    List.fold_right
      (fun (id, params, body, fundesc) fenv ->
        Tbl.add id (Value_closure(fundesc, Value_unknown)) fenv)
      uncurried_defs fenv in
  (* Determine the offsets of each function's closure in the shared block *)
  let env_pos = ref (-1) in
  let clos_offsets =
    List.map
      (fun (id, params, body, fundesc) ->
        let pos = !env_pos + 1 in
        env_pos := !env_pos + 1 + (if fundesc.fun_arity <> 1 then 3 else 2);
        pos)
      uncurried_defs in
  let fv_pos = !env_pos in
  (* This reference will be set to false if the hypothesis that a function
     does not use its environment parameter is invalidated. *)
  let useless_env = ref true in
  (* Translate each function definition *)
  let clos_fundef (id, params, body, fundesc) env_pos =
    let env_param = Ident.create "env" in
    let cenv_fv =
      build_closure_env env_param (fv_pos - env_pos) fv in
    let cenv_body =
      List.fold_right2
        (fun (id, params, arity, body) pos env ->
          Tbl.add id (Uoffset(Uvar env_param, pos - env_pos)) env)
        uncurried_defs clos_offsets cenv_fv in
    let (ubody, approx) = close fenv_rec cenv_body body in
    if !useless_env & occurs_var env_param ubody then useless_env := false;
    let fun_params = if !useless_env then params else params @ [env_param] in
    ((fundesc.fun_label, fundesc.fun_arity, fun_params, ubody),
     (id, env_pos, Value_closure(fundesc, approx))) in
  (* Translate all function definitions. *)
  let clos_info_list = 
    let cl = List.map2 clos_fundef uncurried_defs clos_offsets in
    (* If the hypothesis that the environment parameters are useless has been
       invalidated, then set [fun_closed] to false in all descriptions and
       recompile *)
    if !useless_env then cl else begin
      List.iter
        (fun (id, params, body, fundesc) -> fundesc.fun_closed <- false)
        uncurried_defs;
      List.map2 clos_fundef uncurried_defs clos_offsets
    end in
  (* Return the Uclosure node and the list of all identifiers defined,
     with offsets and approximations. *)
  let (clos, infos) = List.split clos_info_list in
  (Uclosure(clos, List.map (close_var cenv) fv), infos)

(* Same, for one non-recursive function *)

and close_one_function fenv cenv id funct =
  match close_functions fenv cenv [id, funct] with
      ((Uclosure([_, _, params, body], _) as clos),
       [_, _, (Value_closure(fundesc, _) as approx)]) ->
        (* See if the function can be inlined *)
        if lambda_smaller body (!Clflags.inline_threshold + List.length params)
        then fundesc.fun_inline <- Some(params, body);
        (clos, approx)
    | _ -> fatal_error "Closure.close_one_function"

(* Close a switch *)

and close_switch fenv cenv num_keys cases =
  let index = Array.create num_keys 0 in
  let ucases = ref []
  and num_cases = ref 0 in
  if List.length cases < num_keys then begin
    num_cases := 1;
    ucases := [Ustaticfail]
  end;
  List.iter
    (function (key, lam) ->
        let (ulam, _) = close fenv cenv lam in
        ucases := ulam :: !ucases;
        index.(key) <- !num_cases;
        incr num_cases)
    cases;
  (index, Array.of_list(List.rev !ucases))

<<function Closure.intro>>
@


\subsection*{[[asmcomp/mach.mli]]}

<<type Mach.integer_comparison>>=
(* Representation of machine code by sequences of pseudoinstructions *)

type integer_comparison =
    Isigned of Cmm.comparison
  | Iunsigned of Cmm.comparison
@

<<type Mach.integer_operation>>=
type integer_operation =
    Iadd | Isub | Imul | Idiv | Imod
  | Iand | Ior | Ixor | Ilsl | Ilsr | Iasr
  | Icomp of integer_comparison
  | Icheckbound
@

<<type Mach.test>>=
type test =
    Itruetest
  | Ifalsetest
  | Iinttest of integer_comparison
  | Iinttest_imm of integer_comparison * int
  | Ifloattest of Cmm.comparison * bool
  | Ioddtest
  | Ieventest
@

<<type Mach.operation>>=
type operation =
    Imove
  | Ispill
  | Ireload
  | Iconst_int of Nativeint.t
  | Iconst_float of string
  | Iconst_symbol of string
  | Icall_ind
  | Icall_imm of string
  | Itailcall_ind
  | Itailcall_imm of string
  | Iextcall of string * bool
  | Istackoffset of int
  | Iload of Cmm.memory_chunk * Arch.addressing_mode
  | Istore of Cmm.memory_chunk * Arch.addressing_mode
  | Ialloc of int
  | Iintop of integer_operation
  | Iintop_imm of integer_operation * int
  | Inegf | Iabsf | Iaddf | Isubf | Imulf | Idivf
  | Ifloatofint | Iintoffloat
  | Ispecific of Arch.specific_operation
@

<<type Mach.instruction>>=
type instruction =
  { desc: instruction_desc;
    next: instruction;
    arg: Reg.t array;
    res: Reg.t array;
    mutable live: Reg.t Set.t }
@

<<type Mach.instruction_desc>>=
and instruction_desc =
    Iend
  | Iop of operation
  | Ireturn
  | Iifthenelse of test * instruction * instruction
  | Iswitch of int array * instruction array
  | Iloop of instruction
  | Icatch of instruction * instruction
  | Iexit
  | Itrywith of instruction * instruction
  | Iraise
@

<<type Mach.fundecl>>=
type fundecl =
  { fun_name: string;
    fun_args: Reg.t array;
    fun_body: instruction;
    fun_fast: bool }
@

<<signature Mach.dummy_instr>>=
val dummy_instr: instruction
@

<<signature Mach.end_instr>>=
val end_instr: unit -> instruction
@

<<signature Mach.instr_cons>>=
val instr_cons: 
      instruction_desc -> Reg.t array -> Reg.t array -> instruction ->
        instruction
@

<<signature Mach.instr_cons_live>>=
val instr_cons_live: 
      instruction_desc -> Reg.t array -> Reg.t array -> Reg.t Set.t ->
        instruction -> instruction
@

<<signature Mach.instr_iter>>=
val instr_iter: (instruction -> unit) -> instruction -> unit
@


%-------------------------------------------------------------

<<asmcomp/mach.mli>>=
<<copyright header>>

<<type Mach.integer_comparison>>

<<type Mach.integer_operation>>

<<type Mach.test>>

<<type Mach.operation>>

<<type Mach.instruction>>

<<type Mach.instruction_desc>>

<<type Mach.fundecl>>

<<signature Mach.dummy_instr>>
<<signature Mach.end_instr>>
<<signature Mach.instr_cons>>
<<signature Mach.instr_cons_live>>
<<signature Mach.instr_iter>>

@


\subsection*{[[asmcomp/mach.ml]]}

<<type Mach.integer_comparison (asmcomp/mach.ml)>>=
(* Representation of machine code by sequences of pseudoinstructions *)

type integer_comparison =
    Isigned of Cmm.comparison
  | Iunsigned of Cmm.comparison
@

<<type Mach.integer_operation (asmcomp/mach.ml)>>=
type integer_operation =
    Iadd | Isub | Imul | Idiv | Imod
  | Iand | Ior | Ixor | Ilsl | Ilsr | Iasr
  | Icomp of integer_comparison
  | Icheckbound
@

<<type Mach.test (asmcomp/mach.ml)>>=
type test =
    Itruetest
  | Ifalsetest
  | Iinttest of integer_comparison
  | Iinttest_imm of integer_comparison * int
  | Ifloattest of Cmm.comparison * bool
  | Ioddtest
  | Ieventest
@

<<type Mach.operation (asmcomp/mach.ml)>>=
type operation =
    Imove
  | Ispill
  | Ireload
  | Iconst_int of Nativeint.t
  | Iconst_float of string
  | Iconst_symbol of string
  | Icall_ind
  | Icall_imm of string
  | Itailcall_ind
  | Itailcall_imm of string
  | Iextcall of string * bool
  | Istackoffset of int
  | Iload of Cmm.memory_chunk * Arch.addressing_mode
  | Istore of Cmm.memory_chunk * Arch.addressing_mode
  | Ialloc of int
  | Iintop of integer_operation
  | Iintop_imm of integer_operation * int
  | Inegf | Iabsf | Iaddf | Isubf | Imulf | Idivf
  | Ifloatofint | Iintoffloat
  | Ispecific of Arch.specific_operation
@

<<type Mach.instruction (asmcomp/mach.ml)>>=
type instruction =
  { desc: instruction_desc;
    next: instruction;
    arg: Reg.t array;
    res: Reg.t array;
    mutable live: Reg.t Set.t }
@

<<type Mach.instruction_desc (asmcomp/mach.ml)>>=
and instruction_desc =
    Iend
  | Iop of operation
  | Ireturn
  | Iifthenelse of test * instruction * instruction
  | Iswitch of int array * instruction array
  | Iloop of instruction
  | Icatch of instruction * instruction
  | Iexit
  | Itrywith of instruction * instruction
  | Iraise
@

<<type Mach.fundecl (asmcomp/mach.ml)>>=
type fundecl =
  { fun_name: string;
    fun_args: Reg.t array;
    fun_body: instruction;
    fun_fast: bool }
@

<<constant Mach.dummy_instr>>=
let rec dummy_instr =
  { desc = Iend; 
    next = dummy_instr;
    arg = [||]; 
    res = [||];
    live = (*Reg.*)Set.empty }
@

<<function Mach.end_instr>>=
let end_instr () =
  { desc = Iend; 
    next = dummy_instr;
    arg = [||]; 
    res = [||];
    live = (*Reg.*)Set.empty }
@

<<function Mach.instr_cons>>=
let instr_cons d a r n =
  { desc = d; next = n; arg = a; res = r; live = (*Reg.*)Set.empty }
@

<<function Mach.instr_cons_live>>=
let instr_cons_live d a r l n =
  { desc = d; next = n; arg = a; res = r; live = l }
@

<<function Mach.instr_iter>>=
let rec instr_iter f i =
  match i.desc with
    Iend -> ()
  | _ ->
      f i;
      match i.desc with
        Iend -> ()
      | Ireturn | Iop(Itailcall_ind) | Iop(Itailcall_imm _) -> ()
      | Iifthenelse(tst, ifso, ifnot) ->
          instr_iter f ifso; instr_iter f ifnot; instr_iter f i.next
      | Iswitch(index, cases) ->
          for i = 0 to Array.length cases - 1 do
            instr_iter f cases.(i)
          done;
          instr_iter f i.next
      | Iloop(body) ->
          instr_iter f body; instr_iter f i.next
      | Icatch(body, handler) ->
          instr_iter f body; instr_iter f handler; instr_iter f i.next
      | Iexit -> ()
      | Itrywith(body, handler) ->
          instr_iter f body; instr_iter f handler; instr_iter f i.next
      | Iraise -> ()
      | _ ->
          instr_iter f i.next      
@


%-------------------------------------------------------------

<<asmcomp/mach.ml>>=
<<copyright header>>

<<type Mach.integer_comparison (asmcomp/mach.ml)>>

<<type Mach.integer_operation (asmcomp/mach.ml)>>

<<type Mach.test (asmcomp/mach.ml)>>

<<type Mach.operation (asmcomp/mach.ml)>>

<<type Mach.instruction (asmcomp/mach.ml)>>

<<type Mach.instruction_desc (asmcomp/mach.ml)>>

<<type Mach.fundecl (asmcomp/mach.ml)>>

<<constant Mach.dummy_instr>>

<<function Mach.end_instr>>

<<function Mach.instr_cons>>

<<function Mach.instr_cons_live>>

<<function Mach.instr_iter>>

@


\subsection*{[[asmcomp/printmach.mli]]}

<<signature Printmach.reg>>=
(* Pretty-printing of pseudo machine code *)

val reg: Reg.t -> unit
@

<<signature Printmach.regs>>=
val regs: Reg.t array -> unit
@

<<signature Printmach.regset>>=
val regset: Reg.t Set.t -> unit
@

<<signature Printmach.regsetaddr>>=
val regsetaddr: Reg.t Set.t -> unit
@

<<signature Printmach.operation>>=
val operation: Mach.operation -> Reg.t array -> Reg.t array -> unit
@

<<signature Printmach.test>>=
val test: Mach.test -> Reg.t array -> unit
@

<<signature Printmach.instr>>=
val instr: Mach.instruction -> unit
@

<<signature Printmach.fundecl>>=
val fundecl: Mach.fundecl -> unit
@

<<signature Printmach.phase>>=
val phase: string -> Mach.fundecl -> unit
@

<<signature Printmach.interferences>>=
val interferences: unit -> unit
@

<<signature Printmach.preferences>>=
val preferences: unit -> unit
@

<<signature Printmach.print_live>>=
val print_live: bool ref
@


%-------------------------------------------------------------

<<asmcomp/printmach.mli>>=
<<copyright header>>

<<signature Printmach.reg>>
<<signature Printmach.regs>>
<<signature Printmach.regset>>
<<signature Printmach.regsetaddr>>
<<signature Printmach.operation>>
<<signature Printmach.test>>
<<signature Printmach.instr>>
<<signature Printmach.fundecl>>
<<signature Printmach.phase>>
<<signature Printmach.interferences>>
<<signature Printmach.preferences>>

<<signature Printmach.print_live>>
@


\subsection*{[[asmcomp/printmach.ml]]}

<<function Printmach.reg>>=
let reg r =
  if String.length r.name > 0 then
    print_string r.name
  else
    print_string(match r.typ with Addr -> "A" | Int -> "I" | Float -> "F");
  print_string "/";
  print_int r.stamp;
  begin match r.loc with
    Unknown -> ()
  | Reg r -> 
      print_string "["; print_string(Proc.register_name r); print_string "]"
  | Stack(Local s) ->
      print_string "[s"; print_int s; print_string "]"
  | Stack(Incoming s) ->
      print_string "[si"; print_int s; print_string "]"
  | Stack(Outgoing s) ->
      print_string "[so"; print_int s; print_string "]"
  end
@

<<function Printmach.regs>>=
let regs v =
  match Array.length v with
    0 -> ()
  | 1 -> reg v.(0)
  | n -> reg v.(0);
         for i = 1 to n-1 do print_string " "; reg v.(i) done
@

<<function Printmach.regset>>=
let regset s =
  let first = ref true in
  (*Reg.*)Set.iter
    (fun r ->
      if !first then first := false else print_space();
      reg r)
    s
@

<<function Printmach.regsetaddr>>=
let regsetaddr s =
  let first = ref true in
  (*Reg.*)Set.iter
    (fun r ->
      if !first then first := false else print_space();
      reg r;
      match r.typ with Addr -> print_string "*" | _ -> ())
    s
@

<<function Printmach.intcomp>>=
let intcomp = function
    Isigned c -> print_string " "; Printcmm.comparison c; print_string "s "
  | Iunsigned c -> print_string " "; Printcmm.comparison c; print_string "u "
@

<<function Printmach.floatcomp>>=
let floatcomp c =
    print_string " "; Printcmm.comparison c; print_string "f "
@

<<function Printmach.intop>>=
let intop = function
    Iadd -> print_string " + "
  | Isub -> print_string " - "
  | Imul -> print_string " * "
  | Idiv -> print_string " div "
  | Imod -> print_string " mod "
  | Iand -> print_string " & "
  | Ior -> print_string " | "
  | Ixor -> print_string " ^ "
  | Ilsl -> print_string " << "
  | Ilsr -> print_string " >>u "
  | Iasr -> print_string " >>s "
  | Icomp cmp -> intcomp cmp
  | Icheckbound -> print_string " check > "
@

<<function Printmach.test>>=
let test tst arg =
  match tst with
    Itruetest -> reg arg.(0)
  | Ifalsetest -> print_string "not "; reg arg.(0)
  | Iinttest cmp -> reg arg.(0); intcomp cmp; reg arg.(1)
  | Iinttest_imm(cmp, n) -> reg arg.(0); intcomp cmp; print_int n
  | Ifloattest(cmp, neg) ->
      if neg then print_string "not ";
      reg arg.(0); floatcomp cmp; reg arg.(1)
  | Ieventest -> reg arg.(0); print_string " & 1 == 0"
  | Ioddtest -> reg arg.(0); print_string " & 1 == 1"
@

<<constant Printmach.print_live>>=
let print_live = ref false
@

<<function Printmach.operation>>=
let operation op arg res =
  if Array.length res > 0 then begin regs res; print_string " := " end;
  match op with
    Imove -> regs arg
  | Ispill -> regs arg; print_string " (spill)"
  | Ireload -> regs arg; print_string " (reload)"
  | Iconst_int n -> print_string(Nativeint.to_string n)
  | Iconst_float s -> print_string s
  | Iconst_symbol s -> print_string "\""; print_string s; print_string "\""
  | Icall_ind -> print_string "call "; regs arg
  | Icall_imm lbl ->
      print_string "call \""; print_string lbl;
      print_string "\" "; regs arg
  | Itailcall_ind -> print_string "tailcall "; regs arg
  | Itailcall_imm lbl ->
      print_string "tailcall \""; print_string lbl;
      print_string "\" "; regs arg
  | Iextcall(lbl, alloc) ->
      print_string "extcall \""; print_string lbl;
      print_string "\" "; regs arg;
      if not alloc then print_string " (noalloc)"
  | Istackoffset n ->
      print_string "offset stack "; print_int n
  | Iload(chunk, addr) ->
      Printcmm.chunk chunk;
      print_string "[";
      Arch.print_addressing reg addr arg;
      print_string "]"
  | Istore(chunk, addr) ->
      Printcmm.chunk chunk;
      print_string "[";
      Arch.print_addressing reg addr (Array.sub arg 1 (Array.length arg - 1));
      print_string "] := ";
      reg arg.(0)
  | Ialloc n -> print_string "alloc "; print_int n
  | Iintop(op) -> reg arg.(0); intop op; reg arg.(1)
  | Iintop_imm(op, n) -> reg arg.(0); intop op; print_int n
  | Inegf -> print_string "-f "; reg arg.(0)
  | Iabsf -> print_string "absf "; reg arg.(0)
  | Iaddf -> reg arg.(0); print_string " +f "; reg arg.(1)
  | Isubf -> reg arg.(0); print_string " -f "; reg arg.(1)
  | Imulf -> reg arg.(0); print_string " *f "; reg arg.(1)
  | Idivf -> reg arg.(0); print_string " /f "; reg arg.(1)
  | Ifloatofint -> print_string "floatofint "; reg arg.(0)
  | Iintoffloat -> print_string "intoffloat "; reg arg.(0)
  | Ispecific op ->
      Arch.print_specific_operation reg op arg
@

<<function Printmach.instr>>=
let rec instr i =
  if !print_live then begin
    open_box 1;
    print_string "{";
    regsetaddr i.live;
    if Array.length i.arg > 0 then begin
      print_space(); print_string "+"; print_space(); regs i.arg
    end;
    print_string "}";
    close_box();
    print_cut()
  end;
  begin match i.desc with
    Iend -> ()
  | Iop op ->
      operation op i.arg i.res
  | Ireturn ->
      print_string "return "; regs i.arg
  | Iifthenelse(tst, ifso, ifnot) ->
      open_vbox 2;
      print_string "if "; test tst i.arg; print_string " then"; print_cut();
      instr ifso;
      begin match ifnot.desc with
        Iend -> ()
      | _ -> print_break 0 (-2); print_string "else"; print_cut(); instr ifnot
      end;
      print_break 0 (-2); print_string "endif";
      close_box()
  | Iswitch(index, cases) ->
      print_string "switch "; reg i.arg.(0);
      for i = 0 to Array.length cases - 1 do
        print_cut();
        open_vbox 2;
        open_box 0;
        for j = 0 to Array.length index - 1 do
          if index.(j) = i then begin
            print_string "case "; print_int j; print_string ":";
            print_cut()
          end
        done;
        close_box(); print_cut();
        instr cases.(i);
        close_box()
      done;
      print_cut(); print_string "endswitch"
  | Iloop(body) ->
      open_vbox 2;
      print_string "loop"; print_cut();
      instr body; print_break 0 (-2); 
      print_string "endloop ";
      close_box()
  | Icatch(body, handler) ->
      open_vbox 2;
      print_string "catch"; print_cut();
      instr body;
      print_break 0 (-2);  print_string "with"; print_cut();
      instr handler;
      print_break 0 (-2); print_string "endcatch";
      close_box()
  | Iexit ->
      print_string "exit"
  | Itrywith(body, handler) ->
      open_vbox 2;
      print_string "try"; print_cut();
      instr body;
      print_break 0 (-2);  print_string "with"; print_cut();
      instr handler;
      print_break 0 (-2); print_string "endtry";
      close_box()
  | Iraise ->
      print_string "raise "; reg i.arg.(0)
  end;
  begin match i.next.desc with
    Iend -> ()
  | _ -> print_cut(); instr i.next
  end
@

<<function Printmach.fundecl>>=
let fundecl f =
  open_vbox 2;
  print_string f.fun_name;
  print_string "("; regs f.fun_args; print_string ")";
  print_cut();
  instr f.fun_body;
  close_box()
@

<<function Printmach.phase>>=
let phase msg f =
  print_string "*** "; print_string msg; print_newline(); 
  fundecl f; print_newline()
@

<<function Printmach.interference>>=
let interference r =
  open_box 2;
  reg r; print_string ":";
  List.iter
    (fun r -> print_space(); reg r)
    r.interf;
  close_box();
  print_newline()
@

<<function Printmach.interferences>>=
let interferences () =
  print_string "*** Interferences"; print_newline();
  List.iter interference (Reg.all_registers())
@

<<function Printmach.preference>>=
let preference r =
  open_box 2;
  reg r; print_string ": ";
  List.iter
    (fun (r, w) -> print_space(); reg r; print_string " weight " ; print_int w)
    r.prefer;
  close_box();
  print_newline()
@

<<function Printmach.preferences>>=
let preferences () =
  print_string "*** Preferences"; print_newline();
  List.iter preference (Reg.all_registers())
@


%-------------------------------------------------------------

<<asmcomp/printmach.ml>>=
<<copyright header>>

(* Pretty-printing of pseudo machine code *)

open Format
open Cmm
open Reg
open Mach

<<function Printmach.reg>>

<<function Printmach.regs>>

<<function Printmach.regset>>

<<function Printmach.regsetaddr>>

<<function Printmach.intcomp>>

<<function Printmach.floatcomp>>

<<function Printmach.intop>>
    
<<function Printmach.test>>

<<constant Printmach.print_live>>

<<function Printmach.operation>>

<<function Printmach.instr>>

<<function Printmach.fundecl>>

<<function Printmach.phase>>

<<function Printmach.interference>>

<<function Printmach.interferences>>

<<function Printmach.preference>>

<<function Printmach.preferences>>
@


\subsection*{[[asmcomp/split.mli]]}

<<signature Split.fundecl>>=
(* Renaming of registers at reload points to split live ranges. *)

val fundecl: Mach.fundecl -> Mach.fundecl
@


%-------------------------------------------------------------

<<asmcomp/split.mli>>=
<<copyright header>>

<<signature Split.fundecl>>
@


\subsection*{[[asmcomp/split.ml]]}

<<type Split.subst>>=
(* Substitutions are represented by register maps *)

type subst = (Reg.t, Reg.t) Map.t
@

<<function Split.subst_reg>>=
let subst_reg r sub =
  try
    (*Reg.*)Map.find r sub
  with Not_found ->
    r
@

<<function Split.subst_regs>>=
let subst_regs rv sub =
  match sub with
    None -> rv
  | Some s ->
      let n = Array.length rv in
      let nv = Array.create n Reg.dummy in
      for i = 0 to n-1 do nv.(i) <- subst_reg rv.(i) s done;
      nv
@

<<constant Split.equiv_classes>>=
(* We maintain equivalence classes of registers using a standard
   union-find algorithm *)

let equiv_classes = ref ((*Reg.*)Map.empty : (Reg.t, Reg.t) Map.t)
@

<<function Split.repres_reg>>=
let rec repres_reg r =
  try
    repres_reg((*Reg.*)Map.find r !equiv_classes)
  with Not_found ->
    r
@

<<function Split.repres_regs>>=
let repres_regs rv =
  let n = Array.length rv in
  for i = 0 to n-1 do rv.(i) <- repres_reg rv.(i) done
@

<<function Split.identify>>=
(* Identify two registers.
   The second register is chosen as canonical representative. *)

let identify r1 r2 =
  let repres1 = repres_reg r1 in
  let repres2 = repres_reg r2 in
  if repres1.stamp = repres2.stamp then () else begin
    equiv_classes := (*Reg.*)Map.add repres1 repres2 !equiv_classes
  end
@

<<function Split.identify_sub>>=
(* Identify the image of a register by two substitutions.
   Be careful to use the original register as canonical representative
   in case it does not belong to the domain of one of the substitutions. *)

let identify_sub sub1 sub2 reg =
  try
    let r1 = (*Reg.*)Map.find reg sub1 in
    try
      let r2 = (*Reg.*)Map.find reg sub2 in
      identify r1 r2
    with Not_found ->
      identify r1 reg
  with Not_found ->
    try
      let r2 = (*Reg.*)Map.find reg sub2 in
      identify r2 reg
    with Not_found ->
      ()
@

<<function Split.merge_substs>>=
(* Identify registers so that the two substitutions agree on the
   registers live before the given instruction. *)

let merge_substs sub1 sub2 i =
  match (sub1, sub2) with
    (None, None) -> None
  | (Some s1, None) -> sub1
  | (None, Some s2) -> sub2
  | (Some s1, Some s2) ->
      (*Reg.*)Set.iter (identify_sub s1 s2) (Reg.add_set_array i.live i.arg);
      sub1
@

<<function Split.merge_subst_array>>=
(* Same, for N substitutions *)

let merge_subst_array subv instr =
  let rec find_one_subst i =
    if i >= Array.length subv then None else begin
      match subv.(i) with
        None -> find_one_subst (i+1)
      | Some si as sub ->
          for j = i+1 to Array.length subv - 1 do
            match subv.(j) with
              None -> ()
            | Some sj ->
                (*Reg.*)Set.iter (identify_sub si sj)
                             (Reg.add_set_array instr.live instr.arg)
          done;
          sub
    end in
  find_one_subst 0
@

<<constant Split.exit_subst>>=
(* First pass: rename registers at reload points *)

let exit_subst = ref (None: subst option)
@

<<function Split.rename>>=
let rec rename i sub =
  match i.desc with
    Iend ->
      (i, sub)
  | Ireturn | Iop(Itailcall_ind) | Iop(Itailcall_imm _) ->
      (instr_cons i.desc (subst_regs i.arg sub) [||] i.next,
       None)
  | Iop Ireload when i.res.(0).loc = Unknown ->
      begin match sub with
        None -> rename i.next sub
      | Some s ->
          let oldr = i.res.(0) in
          let newr = Reg.clone i.res.(0) in
          let (new_next, sub_next) =
            rename i.next (Some((*Reg.*)Map.add oldr newr s)) in
          (instr_cons i.desc i.arg [|newr|] new_next,
           sub_next)
      end
  | Iop _ ->
      let (new_next, sub_next) = rename i.next sub in
      (instr_cons i.desc (subst_regs i.arg sub) (subst_regs i.res sub)
                         new_next,
       sub_next)
  | Iifthenelse(tst, ifso, ifnot) ->
      let (new_ifso, sub_ifso) = rename ifso sub in
      let (new_ifnot, sub_ifnot) = rename ifnot sub in
      let (new_next, sub_next) =
        rename i.next (merge_substs sub_ifso sub_ifnot i.next) in
      (instr_cons (Iifthenelse(tst, new_ifso, new_ifnot))
                  (subst_regs i.arg sub) [||] new_next,
       sub_next)
  | Iswitch(index, cases) ->
      let new_sub_cases = Array.map (fun c -> rename c sub) cases in
      let sub_merge =
        merge_subst_array (Array.map (fun (n, s) -> s) new_sub_cases) i.next in
      let (new_next, sub_next) = rename i.next sub_merge in
      (instr_cons (Iswitch(index, Array.map (fun (n, s) -> n) new_sub_cases))
                  (subst_regs i.arg sub) [||] new_next,
       sub_next)
  | Iloop(body) ->
      let (new_body, sub_body) = rename body sub in
      let (new_next, sub_next) = rename i.next (merge_substs sub sub_body i) in
      (instr_cons (Iloop(new_body)) [||] [||] new_next,
       sub_next)
  | Icatch(body, handler) ->
      let saved_exit_subst = !exit_subst in
      exit_subst := None;
      let (new_body, sub_body) = rename body sub in
      let sub_entry_handler = !exit_subst in
      exit_subst := saved_exit_subst;
      let (new_handler, sub_handler) = rename handler sub_entry_handler in
      let (new_next, sub_next) =
        rename i.next (merge_substs sub_body sub_handler i.next) in
      (instr_cons (Icatch(new_body, new_handler)) [||] [||] new_next,
       sub_next)
  | Iexit ->
      exit_subst := merge_substs !exit_subst sub i;
      (i, None)
  | Itrywith(body, handler) ->
      let (new_body, sub_body) = rename body sub in
      let (new_handler, sub_handler) = rename handler sub in
      let (new_next, sub_next) =
        rename i.next (merge_substs sub_body sub_handler i.next) in
      (instr_cons (Itrywith(new_body, new_handler)) [||] [||] new_next,
       sub_next)
  | Iraise ->
      (instr_cons Iraise (subst_regs i.arg sub) [||] i.next,
       None)
@

<<function Split.set_repres>>=
(* Second pass: replace registers by their final representatives *)

let set_repres i =
  instr_iter (fun i -> repres_regs i.arg; repres_regs i.res) i
@

<<function Split.fundecl>>=
(* Entry point *)

let fundecl f =
  equiv_classes := (*Reg.*)Map.empty;
  let new_args = Array.copy f.fun_args in
  let (new_body, sub_body) = rename f.fun_body (Some (*Reg.*)Map.empty) in
  repres_regs new_args;
  set_repres new_body;
  equiv_classes := (*Reg.*)Map.empty;
  { fun_name = f.fun_name;
    fun_args = new_args;
    fun_body = new_body;
    fun_fast = f.fun_fast }
@


%-------------------------------------------------------------

<<asmcomp/split.ml>>=
<<copyright header>>

(* Renaming of registers at reload points to split live ranges. *)

open Reg
open Mach

<<type Split.subst>>

<<function Split.subst_reg>>

<<function Split.subst_regs>>

<<constant Split.equiv_classes>>

<<function Split.repres_reg>>

<<function Split.repres_regs>>

<<function Split.identify>>

<<function Split.identify_sub>>

<<function Split.merge_substs>>

<<function Split.merge_subst_array>>

<<constant Split.exit_subst>>

<<function Split.rename>>
      
<<function Split.set_repres>>

<<function Split.fundecl>>
@


\subsection*{[[asmcomp/proc.mli]]}

<<signature Proc.word_addressed>>=
(* Instruction selection *)
val word_addressed: bool
@

<<signature Proc.num_register_classes>>=
(* Registers available for register allocation *)
val num_register_classes: int
@

<<signature Proc.register_class>>=
val register_class: Reg.t -> int
@

<<signature Proc.num_available_registers>>=
val num_available_registers: int array
@

<<signature Proc.first_available_register>>=
val first_available_register: int array
@

<<signature Proc.register_name>>=
val register_name: int -> string
@

<<signature Proc.phys_reg>>=
val phys_reg: int -> Reg.t
@

<<signature Proc.rotate_registers>>=
val rotate_registers: bool
@

<<signature Proc.loc_arguments>>=
(* Calling conventions *)
val loc_arguments: Reg.t array -> Reg.t array * int
@

<<signature Proc.loc_results>>=
val loc_results: Reg.t array -> Reg.t array
@

<<signature Proc.loc_parameters>>=
val loc_parameters: Reg.t array -> Reg.t array
@

<<signature Proc.loc_external_arguments>>=
val loc_external_arguments: Reg.t array -> Reg.t array * int
@

<<signature Proc.loc_external_results>>=
val loc_external_results: Reg.t array -> Reg.t array
@

<<signature Proc.loc_exn_bucket>>=
val loc_exn_bucket: Reg.t
@

<<signature Proc.safe_register_pressure>>=
(* Maximal register pressures for pre-spilling *)
val safe_register_pressure: Mach.operation -> int
@

<<signature Proc.max_register_pressure>>=
val max_register_pressure: Mach.operation -> int array
@

<<signature Proc.destroyed_at_oper>>=
(* Registers destroyed by operations *)
val destroyed_at_oper: Mach.instruction_desc -> Reg.t array
@

<<signature Proc.destroyed_at_raise>>=
val destroyed_at_raise: Reg.t array
@

<<signature Proc.num_stack_slots>>=
(* Info for laying out the stack frame *)
val num_stack_slots: int array
@

<<signature Proc.contains_calls>>=
val contains_calls: bool ref
@

<<signature Proc.assemble_file>>=
(* Calling the assembler *)
val assemble_file: string -> string -> int
@


%-------------------------------------------------------------

<<asmcomp/proc.mli>>=
<<copyright header>>

(* Processor descriptions *)

<<signature Proc.word_addressed>>

<<signature Proc.num_register_classes>>
<<signature Proc.register_class>>
<<signature Proc.num_available_registers>>
<<signature Proc.first_available_register>>
<<signature Proc.register_name>>
<<signature Proc.phys_reg>>
<<signature Proc.rotate_registers>>

<<signature Proc.loc_arguments>>
<<signature Proc.loc_results>>
<<signature Proc.loc_parameters>>
<<signature Proc.loc_external_arguments>>
<<signature Proc.loc_external_results>>
<<signature Proc.loc_exn_bucket>>

<<signature Proc.safe_register_pressure>>
<<signature Proc.max_register_pressure>>

<<signature Proc.destroyed_at_oper>>
<<signature Proc.destroyed_at_raise>>

<<signature Proc.num_stack_slots>>
<<signature Proc.contains_calls>>

<<signature Proc.assemble_file>>
@


\section{[[asmcomp/arm/]]}

\subsection*{[[asmcomp/arm/proc.ml]]}

<<constant Proc.word_addressed>>=
(* Instruction selection *)

let word_addressed = false
@

<<constant Proc.int_reg_name>>=
(* Register map:
    r0 - r7                     general purpose (r4 - r7 preserved by C)
    r8                          allocation pointer (preserved by C)
    r9                          allocation limit (preserved by C)
    r10                         general purpose
    r11                         trap pointer (preserved by C)
    r12                         general purpose
    r13                         stack pointer
    r14                         return address
    r15                         program counter

    f0 - f7                     general purpose (f4 - f7 preserved by C)
*)

let int_reg_name = [|
@

<<constant Proc.float_reg_name>>=
let float_reg_name = [|
@

<<constant Proc.num_register_classes>>=
let num_register_classes = 2
@

<<function Proc.register_class>>=
let register_class r =
  match r.typ with
    Int -> 0
  | Addr -> 0
  | Float -> 1
@

<<constant Proc.num_available_registers>>=
let num_available_registers = [| 10; 8 |]
@

<<constant Proc.first_available_register>>=
let first_available_register = [| 0; 100 |]
@

<<function Proc.register_name>>=
let register_name r =
  if r < 100 then int_reg_name.(r) else float_reg_name.(r - 100)
@

<<constant Proc.rotate_registers>>=
let rotate_registers = true
@

<<constant Proc.hard_int_reg>>=
(* Representation of hard registers by pseudo-registers *)

let hard_int_reg =
  let v = Array.create 10 Reg.dummy in
  for i = 0 to 9 do v.(i) <- Reg.at_location Int (Reg i) done;
  v
@

<<constant Proc.hard_float_reg>>=
let hard_float_reg =
  let v = Array.create 8 Reg.dummy in
  for i = 0 to 7 do v.(i) <- Reg.at_location Float (Reg(100 + i)) done;
  v
@

<<constant Proc.all_phys_regs>>=
let all_phys_regs =
  Array.append hard_int_reg hard_float_reg
@

<<function Proc.phys_reg>>=
let phys_reg n =
  if n < 100 then hard_int_reg.(n) else hard_float_reg.(n - 100)
@

<<function Proc.stack_slot>>=
let stack_slot slot ty =
  Reg.at_location ty (Stack slot)
@

<<function Proc.calling_conventions>>=
(* Calling conventions *)

let calling_conventions first_int last_int first_float last_float
                        make_stack arg =
  let loc = Array.create (Array.length arg) Reg.dummy in
  let int = ref first_int in
  let float = ref first_float in
  let ofs = ref 0 in
  for i = 0 to Array.length arg - 1 do
    match arg.(i).typ with
      Int | Addr as ty ->
        if !int <= last_int then begin
          loc.(i) <- phys_reg !int;
          incr int
        end else begin
          loc.(i) <- stack_slot (make_stack !ofs) ty;
          ofs := !ofs + size_int
        end
    | Float ->
        if !float <= last_float then begin
          loc.(i) <- phys_reg !float;
          incr float
        end else begin
          loc.(i) <- stack_slot (make_stack !ofs) Float;
          ofs := !ofs + size_float
        end
  done;
  (loc, !ofs)
@

<<function Proc.incoming>>=
let incoming ofs = Incoming ofs
@

<<function Proc.outgoing>>=
let outgoing ofs = Outgoing ofs
@

<<function Proc.not_supported>>=
let not_supported ofs = fatal_error "Proc.loc_results: cannot call"
@

<<function Proc.loc_arguments>>=
let loc_arguments arg =
  calling_conventions 0 7 100 103 outgoing arg
@

<<function Proc.loc_parameters>>=
let loc_parameters arg =
  let (loc, ofs) = calling_conventions 0 7 100 103 incoming arg in loc
@

<<function Proc.loc_results>>=
let loc_results res =
  let (loc, ofs) = calling_conventions 0 7 100 103 not_supported res in loc
@

<<function Proc.loc_external_arguments>>=
(* Calling conventions for C are as for Caml, except that float arguments
   are passed in pairs of integer registers. *)

let loc_external_arguments arg =
  let loc = Array.create (Array.length arg) Reg.dummy in
  let reg = ref 0 in
  let ofs = ref 0 in
  for i = 0 to Array.length arg - 1 do
    match arg.(i).typ with
      Int | Addr as ty ->
        if !reg <= 3 then begin
          loc.(i) <- phys_reg !reg;
          incr reg
        end else begin
          loc.(i) <- stack_slot (outgoing !ofs) ty;
          ofs := !ofs + size_int
        end
    | Float ->
        if !reg <= 2 then begin
          loc.(i) <- phys_reg !reg;
          reg := !reg + 2
        end else begin
          loc.(i) <- stack_slot (outgoing !ofs) Float;
          ofs := !ofs + size_float
        end
  done;
  (loc, !ofs)
@

<<function Proc.loc_external_results>>=
let loc_external_results res =
  let (loc, ofs) = calling_conventions 0 0 100 100 not_supported res in loc
@

<<constant Proc.loc_exn_bucket>>=
let loc_exn_bucket = phys_reg 0
@

<<constant Proc.destroyed_at_c_call>>=
(* Registers destroyed by operations *)

let destroyed_at_c_call =               (* r4-r9, f4-f7 preserved *)
  Array.of_list(List.map phys_reg [0;1;2;3;8;9; 100;101;102;103])
@

<<function Proc.destroyed_at_oper>>=
let destroyed_at_oper = function
    Iop(Icall_ind | Icall_imm _ | Iextcall(_, true)) -> all_phys_regs
  | Iop(Iextcall(_, false)) -> destroyed_at_c_call
  | Iop(Ialloc(_)) -> [|phys_reg 8|]	(* r10 destroyed *)
  | _ -> [||]
@

<<constant Proc.destroyed_at_raise>>=
let destroyed_at_raise = all_phys_regs
@

<<function Proc.safe_register_pressure>>=
(* Maximal register pressure *)

let safe_register_pressure = function
    Iextcall(_, _) -> 4
  | _ -> 8
@

<<function Proc.max_register_pressure>>=
let max_register_pressure = function
    Iextcall(_, _) -> [| 4; 4 |]
  | _ -> [| 10; 8 |]
@

<<constant Proc.num_stack_slots>>=
(* Layout of the stack *)

let num_stack_slots = [| 0; 0 |]
@

<<constant Proc.contains_calls>>=
let contains_calls = ref false
@

<<function Proc.assemble_file>>=
(* Calling the assembler *)

let assemble_file infile outfile =
  Sys.command ("as -o " ^ outfile ^ " " ^ infile)
@


%-------------------------------------------------------------

<<asmcomp/arm/proc.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1998 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)


(* Description of the ARM processor *)

open Misc
open Cmm
open Reg
open Arch
open Mach

<<constant Proc.word_addressed>>

(* Registers available for register allocation *)

<<constant Proc.int_reg_name>>
  "r0"; "r1"; "r2"; "r3"; "r4"; "r5"; "r6"; "r7"; "r10"; "r12"
|]
  
<<constant Proc.float_reg_name>>
  "f0"; "f1"; "f2"; "f3"; "f4"; "f5"; "f6"; "f7"
|]

<<constant Proc.num_register_classes>>

<<function Proc.register_class>>

<<constant Proc.num_available_registers>>

<<constant Proc.first_available_register>>

<<function Proc.register_name>>

<<constant Proc.rotate_registers>>

<<constant Proc.hard_int_reg>>

<<constant Proc.hard_float_reg>>

<<constant Proc.all_phys_regs>>

<<function Proc.phys_reg>>

<<function Proc.stack_slot>>

<<function Proc.calling_conventions>>

<<function Proc.incoming>>
<<function Proc.outgoing>>
<<function Proc.not_supported>>

<<function Proc.loc_arguments>>
<<function Proc.loc_parameters>>
<<function Proc.loc_results>>

<<function Proc.loc_external_arguments>>

<<function Proc.loc_external_results>>

<<constant Proc.loc_exn_bucket>>

<<constant Proc.destroyed_at_c_call>>

<<function Proc.destroyed_at_oper>>

<<constant Proc.destroyed_at_raise>>

<<function Proc.safe_register_pressure>>
<<function Proc.max_register_pressure>>

<<constant Proc.num_stack_slots>>
<<constant Proc.contains_calls>>

<<function Proc.assemble_file>>

@


\section{[[asmcomp/]]}

\subsection*{[[asmcomp/reloadgen.mli]]}

<<type Reloadgen.reloader>>=

type reloader = {
 reload_operation :
    reloader ->
    Mach.operation -> Reg.t array -> Reg.t array -> Reg.t array * Reg.t array;
 reload_test: 
    reloader ->
    Mach.test -> Reg.t array -> Reg.t array;
    (* Can be overriden to reflect instructions that can operate
       directly on stack locations *)
 makereg : Reg.t -> Reg.t;
    (* Can be overriden to avoid creating new registers of some class
       (i.e. if all "registers" of that class are actually on stack) *)
 fundecl : 
   reloader ->
   Mach.fundecl -> Mach.fundecl * bool;
    (* The entry point *)

 (* old: protected *)

 makeregs : reloader -> Reg.t array -> Reg.t array;
 makereg1 : reloader -> Reg.t array -> Reg.t array;
 
 reload:  
   reloader -> Mach.instruction -> Mach.instruction;
 
}
@

<<signature Reloadgen.reload_generic>>=
val reload_generic: unit -> reloader
@


%-------------------------------------------------------------

<<asmcomp/reloadgen.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1997 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

<<type Reloadgen.reloader>>

<<signature Reloadgen.reload_generic>>

(*
 reload_operation = super.eload_operation;
 reload_test: = super.eload_test:; makereg : Reg.t -> Reg.t;
 fundecl = super.undecl;
 makeregs = super.akeregs;
 makereg1 = super.akereg1;
 reload: = super.eload:;
*)
@


\subsection*{[[asmcomp/reloadgen.ml]]}

<<function Reloadgen.insert_move>>=
let insert_move src dst next =
  if src.loc = dst.loc
  then next
  else instr_cons (Iop Imove) [|src|] [|dst|] next
@

<<function Reloadgen.insert_moves>>=
let insert_moves src dst next =
  let rec insmoves i =
    if i >= Array.length src
    then next
    else insert_move src.(i) dst.(i) (insmoves (i+1))
  in insmoves 0
@

<<type Reloadgen.reloader (asmcomp/reloadgen.ml)>>=
type reloader = {
 reload_operation :
    reloader ->
    Mach.operation -> Reg.t array -> Reg.t array -> Reg.t array * Reg.t array;
 reload_test: 
    reloader ->
    Mach.test -> Reg.t array -> Reg.t array;
    (* Can be overriden to reflect instructions that can operate
       directly on stack locations *)
 makereg : Reg.t -> Reg.t;
    (* Can be overriden to avoid creating new registers of some class
       (i.e. if all "registers" of that class are actually on stack) *)
 fundecl : 
   reloader ->
   Mach.fundecl -> Mach.fundecl * bool;
    (* The entry point *)

 (* old: protected *)

 makeregs : reloader -> Reg.t array -> Reg.t array;
 makereg1 : reloader -> Reg.t array -> Reg.t array;
 
 reload:  
   reloader -> Mach.instruction -> Mach.instruction;
 
}
@

<<function Reloadgen.reload_generic>>=
let reload_generic () =
  let redo_regalloc = ref false in
  {
  makereg = (fun r ->
  match r.loc with
    Unknown -> fatal_error "Reload.makereg"
  | Reg _ -> r
  | Stack _ ->
      redo_regalloc := true;
      let newr = Reg.clone r in
      (* Strongly discourage spilling this register *)
      newr.spill_cost <- 100000;
      newr
  );

  makeregs = (fun self rv ->
  let n = Array.length rv in
  let newv = Array.create n Reg.dummy in
  for i = 0 to n-1 do newv.(i) <- self.makereg rv.(i) done;
  newv
  );

  makereg1 = (fun self rv ->
  let newv = Array.copy rv in
  newv.(0) <- self.makereg rv.(0);
  newv
  );

 reload_operation = (fun self op arg res ->
  (* By default, assume that arguments and results must reside
     in hardware registers. For moves, allow one arg or one
     res to be stack-allocated, but do something for
     stack-to-stack moves *)
  match op with
    Imove | Ireload | Ispill ->
      begin match arg.(0), res.(0) with
        {loc = Stack s1}, {loc = Stack s2} when s1 <> s2 ->
          ([| self.makereg arg.(0) |], res)
      | _ ->
          (arg, res)
      end
  | _ ->
      (self.makeregs self arg, self.makeregs self res)
 );

 reload_test = (fun self tst args ->
  self.makeregs self args
 );

 reload = (fun self i ->
  match i.desc with
    (* For function calls, returns, etc: the arguments and results are
       already at the correct position (e.g. on stack for some arguments).
       However, something needs to be done for the function pointer in
       indirect calls. *)
    Iend | Ireturn | Iop(Itailcall_imm _) | Iraise -> i
  | Iop(Itailcall_ind) ->
      let newarg = self.makereg1 self i.arg in
      insert_moves i.arg newarg
        (instr_cons_live i.desc newarg i.res i.live i.next)
  | Iop(Icall_imm _ | Iextcall(_, _)) ->
      instr_cons_live i.desc i.arg i.res i.live (self.reload self i.next)
  | Iop(Icall_ind) ->
      let newarg = self.makereg1 self i.arg in
      insert_moves i.arg newarg
        (instr_cons_live i.desc newarg i.res i.live (self.reload self i.next))
  | Iop op ->
      let (newarg, newres) = self.reload_operation self op i.arg i.res in
      insert_moves i.arg newarg
        (instr_cons_live i.desc newarg newres i.live
          (insert_moves newres i.res
            (self.reload self i.next)))
  | Iifthenelse(tst, ifso, ifnot) ->
      let newarg = self.reload_test self tst i.arg in
      insert_moves i.arg newarg      
        (instr_cons
          (Iifthenelse(tst, self.reload self ifso, self.reload self ifnot)) newarg [||]
          (self.reload self i.next))
  | Iswitch(index, cases) ->
      let newarg = self.makeregs self i.arg in
      insert_moves i.arg newarg      
        (instr_cons (Iswitch(index, Array.map (self.reload self) cases)) newarg [||]
          (self.reload self i.next))
  | Iloop body ->
      instr_cons (Iloop(self.reload self body)) [||] [||] (self.reload self i.next)
  | Icatch(body, handler) ->
      instr_cons (Icatch(self.reload self body, self.reload self handler)) [||] [||]
        (self.reload self i.next)
  | Iexit ->
      instr_cons Iexit [||] [||] dummy_instr
  | Itrywith(body, handler) ->
      instr_cons (Itrywith(self.reload self body, self.reload self handler)) [||] [||]
        (self.reload self i.next)
 );

 fundecl = (fun self f ->
  redo_regalloc := false;
  let new_body = self.reload self f.fun_body in
  ({fun_name = f.fun_name; fun_args = f.fun_args;
    fun_body = new_body; fun_fast = f.fun_fast},
   !redo_regalloc)
 );
 }
@


%-------------------------------------------------------------

<<asmcomp/reloadgen.ml>>=
<<copyright header>>

(* Insert load/stores for pseudoregs that got assigned to stack locations. *)

open Misc
open Reg
open Mach

<<function Reloadgen.insert_move>>

<<function Reloadgen.insert_moves>>



<<type Reloadgen.reloader (asmcomp/reloadgen.ml)>>


<<function Reloadgen.reload_generic>>
@


\subsection*{[[asmcomp/interf.mli]]}

<<signature Interf.build_graph>>=
(* Construction of the interference graph.
   Annotate pseudoregs with interference lists and preference lists. *)

val build_graph: Mach.fundecl -> unit
@


%-------------------------------------------------------------

<<asmcomp/interf.mli>>=
<<copyright header>>

<<signature Interf.build_graph>>
@


\subsection*{[[asmcomp/reload.mli]]}

<<signature Reload.fundecl>>=
(* Insert load/stores for pseudoregs that got assigned to stack locations. *)

val fundecl: Mach.fundecl -> Mach.fundecl * bool
@


%-------------------------------------------------------------

<<asmcomp/reload.mli>>=
<<copyright header>>

<<signature Reload.fundecl>>

@


\section{[[asmcomp/arm/]]}

\subsection*{[[asmcomp/arm/reload.ml]]}

<<function Reload.fundecl>>=
(* Reloading for the ARM *)

let fundecl f =
  let reloader = Reloadgen.reload_generic () in
  reloader.fundecl reloader f
@


%-------------------------------------------------------------

<<asmcomp/arm/reload.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1998 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)
open Reloadgen


<<function Reload.fundecl>>
@


\section{[[asmcomp/]]}

\subsection*{[[asmcomp/interf.ml]]}

<<function Interf.build_graph>>=
let build_graph fundecl =

  (* The interference graph is represented in two ways:
     - by adjacency lists for each register
     - by a triangular bit matrix *)

  let num_regs = Reg.num_registers() in
  let mat =
    String.make (((num_regs * (num_regs + 1)) lsr 1 + 7) lsr 3) '\000' in

  (* Record an interference between two registers *)
  let add_interf ri rj =
    let i = ri.stamp and j = rj.stamp in
    if i = j then () else begin
      let n = if i < j then ((j * (j + 1)) lsr 1) + i
                       else ((i * (i + 1)) lsr 1) + j in
      let b = Char.code(mat.[n lsr 3]) in
      let msk = 1 lsl (n land 7) in
      if b land msk = 0 then begin
        mat.[n lsr 3] <- Char.unsafe_chr(b lor msk);
        begin match ri.loc with
          Unknown -> ri.interf <- rj :: ri.interf | _ -> ()
        end;
        begin match rj.loc with
          Unknown -> rj.interf <- ri :: rj.interf | _ -> ()
        end
      end
    end in

  (* Record interferences between a register array and a set of registers *)
  let add_interf_set v s =
    for i = 0 to Array.length v - 1 do
      let r1 = v.(i) in
      (*Reg.*)Set.iter (add_interf r1) s
    done in

  (* Record interferences between elements of an array *)
  let add_interf_self v =
    for i = 0 to Array.length v - 2 do
      let ri = v.(i) in
      for j = i+1 to Array.length v - 1 do
        add_interf ri v.(j)
      done
    done in

  (* Record interferences between the destination of a move and a set
     of live registers. Since the destination is equal to the source,
     do not add an interference between them if the source is still live
     afterwards. *)
  let add_interf_move src dst s =
    (*Reg.*)Set.iter (fun r -> if r.stamp <> src.stamp then add_interf dst r) s in

  (* Compute interferences *)

  let rec interf i =
    let destroyed = Proc.destroyed_at_oper i.desc in
    if Array.length destroyed > 0 then add_interf_set destroyed i.live;
    match i.desc with
      Iend -> ()
    | Ireturn -> ()
    | Iop(Imove | Ispill | Ireload) ->
        add_interf_move i.arg.(0) i.res.(0) i.live;
        interf i.next
    | Iop(Itailcall_ind) -> ()
    | Iop(Itailcall_imm lbl) -> ()
    | Iop op ->
        add_interf_set i.res i.live;
        add_interf_self i.res;
        interf i.next
    | Iifthenelse(tst, ifso, ifnot) ->
        interf ifso;
        interf ifnot;
        interf i.next
    | Iswitch(index, cases) ->
        for i = 0 to Array.length cases - 1 do
          interf cases.(i)
        done;
        interf i.next
    | Iloop body ->
        interf body; interf i.next
    | Icatch(body, handler) ->
        interf body; interf handler; interf i.next
    | Iexit ->
        ()
    | Itrywith(body, handler) ->
        add_interf_set Proc.destroyed_at_raise handler.live;    
        interf body; interf handler; interf i.next
    | Iraise -> () in

  (* Add a preference from one reg to another.
     Do not add anything if the two registers conflict,
     or if the source register already has a location. *)

  let add_pref weight r1 r2 =
    if weight > 0 then begin
      let i = r1.stamp and j = r2.stamp in
      if i = j then () else begin
        match r1.loc with
          Unknown ->
            let n = if i < j then ((j * (j + 1)) lsr 1) + i
                             else ((i * (i + 1)) lsr 1) + j in
            let b = Char.code(mat.[n lsr 3]) in
            let msk = 1 lsl (n land 7) in
            if b land msk = 0 then r1.prefer <- (r2, weight) :: r1.prefer
        | _ -> ()
      end
    end in

  (* Add a mutual preference between two regs *)
  let add_mutual_pref weight r1 r2 =
    add_pref weight r1 r2; add_pref weight r2 r1 in

  (* Update the spill cost of the registers involved in an operation *)

  let add_spill_cost cost arg =
    for i = 0 to Array.length arg - 1 do
      let r = arg.(i) in r.spill_cost <- r.spill_cost + cost
    done in

  (* Compute preferences and spill costs *)

  let rec prefer weight i =
    add_spill_cost weight i.arg;
    add_spill_cost weight i.res;
    match i.desc with
      Iend -> ()
    | Ireturn -> ()
    | Iop(Imove) ->
        add_mutual_pref weight i.arg.(0) i.res.(0);
        prefer weight i.next
    | Iop(Ispill) ->
        add_pref (weight / 4) i.arg.(0) i.res.(0);
        prefer weight i.next
    | Iop(Ireload) ->
        add_pref (weight / 4) i.res.(0) i.arg.(0);
        prefer weight i.next
    | Iop(Itailcall_ind) -> ()
    | Iop(Itailcall_imm lbl) -> ()
    | Iop op ->
        prefer weight i.next
    | Iifthenelse(tst, ifso, ifnot) ->
        prefer (weight / 2) ifso;
        prefer (weight / 2) ifnot;
        prefer weight i.next
    | Iswitch(index, cases) ->
        for i = 0 to Array.length cases - 1 do
          prefer (weight / 2) cases.(i)
        done;
        prefer weight i.next
    | Iloop body ->
        (* Avoid overflow of weight and spill_cost *)
        prefer (if weight < 1000 then 8 * weight else weight) body;
        prefer weight i.next
    | Icatch(body, handler) ->
        prefer weight body; prefer weight handler; prefer weight i.next
    | Iexit ->
        ()
    | Itrywith(body, handler) ->
        prefer weight body; prefer weight handler; prefer weight i.next
    | Iraise -> ()
  in

  interf fundecl.fun_body; prefer 8 fundecl.fun_body
@


%-------------------------------------------------------------

<<asmcomp/interf.ml>>=
<<copyright header>>

(* Construction of the interference graph.
   Annotate pseudoregs with interference lists and preference lists. *)

open Reg
open Mach

<<function Interf.build_graph>>

@


\subsection*{[[asmcomp/coloring.mli]]}

<<signature Coloring.allocate_registers>>=
(* Register allocation by coloring of the interference graph *)

val allocate_registers: unit -> unit
@


%-------------------------------------------------------------

<<asmcomp/coloring.mli>>=
<<copyright header>>

<<signature Coloring.allocate_registers>>
@


\subsection*{[[asmcomp/coloring.ml]]}

<<function Coloring.allocate_spilled>>=
(* Preallocation of spilled registers in the stack. *)

let allocate_spilled reg =
  if reg.spill then begin
    let cl = Proc.register_class reg in
    let nslots = Proc.num_stack_slots.(cl) in
    let conflict = Array.create nslots false in
    List.iter
      (fun r ->
        match r.loc with
          Stack(Local n) ->
            if Proc.register_class r = cl then conflict.(n) <- true
        | _ -> ())
      reg.interf;
    let slot = ref 0 in
    while !slot < nslots & conflict.(!slot) do incr slot done;
    reg.loc <- Stack(Local !slot);
    if !slot >= nslots then Proc.num_stack_slots.(cl) <- !slot + 1
  end
@

<<constant Coloring.unconstrained>>=
(* Compute the degree (= number of neighbours of the same type)
   of each register, and split them in two sets:
   unconstrained (degree < number of available registers)
   and constrained (degree >= number of available registers).
   Spilled registers are ignored in the process. *)

let unconstrained = ref (*Reg.*)Set.empty
@

<<constant Coloring.constrained>>=
let constrained = ref (*Reg.*)Set.empty
@

<<function Coloring.find_degree>>=
let find_degree reg =
  if reg.spill then () else begin
    let cl = Proc.register_class reg in
    let avail_regs = Proc.num_available_registers.(cl) in
    if avail_regs = 0 then
      (* Don't bother computing the degree if there are no regs 
         in this class *)
      unconstrained := (*Reg.*)Set.add reg !unconstrained
    else begin
      let deg = ref 0 in
      List.iter
        (fun r -> if not r.spill & Proc.register_class r = cl then incr deg)
        reg.interf;
      reg.degree <- !deg;
      if !deg >= avail_regs
      then constrained := (*Reg.*)Set.add reg !constrained
      else unconstrained := (*Reg.*)Set.add reg !unconstrained
    end
  end
@

<<function Coloring.remove_all_regs>>=
(* Remove all registers one by one, unconstrained if possible, otherwise
   constrained with lowest spill cost. Return the list of registers removed
   in reverse order.
   The spill cost measure is [r.spill_cost / r.degree].
   [r.spill_cost] estimates the number of accesses to this register. *)

let rec remove_all_regs stack =
  if not ((*Reg.*)Set.is_empty !unconstrained) then begin
    (* Pick any unconstrained register *)
    let r = (*Reg.*)Set.choose !unconstrained in
    unconstrained := (*Reg.*)Set.remove r !unconstrained;
    remove_all_regs (r :: stack)
  end else
  if not ((*Reg.*)Set.is_empty !constrained) then begin
    (* Find a constrained reg with minimal cost *)
    let r = ref Reg.dummy in
    let min_degree = ref 0 and min_spill_cost = ref 1 in
      (* initially !min_spill_cost / !min_degree is +infty *)
    (*Reg.*)Set.iter
      (fun r2 ->
        (* if r2.spill_cost / r2.degree < !min_spill_cost / !min_degree *)
        if r2.spill_cost * !min_degree < !min_spill_cost * r2.degree
        then begin
          r := r2; min_degree := r2.degree; min_spill_cost := r2.spill_cost
        end)
      !constrained;
    constrained := (*Reg.*)Set.remove !r !constrained;
    remove_all_regs (!r :: stack)
  end else
    stack                             (* All regs have been removed *)
@

<<function Coloring.iter_preferred>>=
(* Iterate over all registers preferred by the given register (transitively) *)

let iter_preferred f reg =
  let rec walk r w =
    if not r.visited then begin
      f r w;
      begin match r.prefer with
          [] -> ()
        | p  -> r.visited <- true;
                List.iter (fun (r1, w1) -> walk r1 (min w w1)) p;
                r.visited <- false
      end
    end in
  reg.visited <- true;
  List.iter (fun (r, w) -> walk r w) reg.prefer;
  reg.visited <- false
@

<<constant Coloring.start_register>>=
(* Where to start the search for a suitable register. 
   Used to introduce some "randomness" in the choice between registers
   with equal scores. This offers more opportunities for scheduling. *)

let start_register = Array.create Proc.num_register_classes 0
@

<<function Coloring.assign_location>>=
(* Assign a location to a register, the best we can *)

let assign_location reg =
  let cl = Proc.register_class reg in
  let first_reg = Proc.first_available_register.(cl) in
  let num_regs = Proc.num_available_registers.(cl) in
  let last_reg = first_reg + num_regs in
  let score = Array.create num_regs 0 in
  let best_score = ref (-1000000) and best_reg = ref (-1) in
  let start = start_register.(cl) in
  if num_regs > 0 then begin
    (* Favor the registers that have been assigned to pseudoregs for which
       we have a preference. If these pseudoregs have not been assigned
       already, avoid the registers with which they conflict. *)
    iter_preferred
      (fun r w ->
        match r.loc with
          Reg n -> if n >= first_reg & n < last_reg then
                     score.(n - first_reg) <- score.(n - first_reg) + w
        | Unknown ->
            List.iter
              (fun neighbour ->
                match neighbour.loc with
                  Reg n -> if n >= first_reg & n < last_reg then
                           score.(n - first_reg) <- score.(n - first_reg) - w
                | _ -> ())
              r.interf
        | _ -> ())
      reg;
    List.iter
      (fun neighbour ->
        (* Prohibit the registers that have been assigned
           to our neighbours *)
        begin match neighbour.loc with
          Reg n -> if n >= first_reg & n < last_reg then
                     score.(n - first_reg) <- (-1000000)
        | _ -> ()
        end;
        (* Avoid the registers that have been assigned to pseudoregs
           for which our neighbours have a preference *)
        iter_preferred
          (fun r w ->
            match r.loc with
              Reg n -> if n >= first_reg & n < last_reg then
                         score.(n - first_reg) <- score.(n - first_reg) - (w - 1)
                       (* w-1 to break the symmetry when two conflicting regs
                          have the same preference for a third reg. *)
            | _ -> ())
          neighbour)
      reg.interf;
    (* Pick the register with the best score *)
    for n = start to num_regs - 1 do
      if score.(n) > !best_score then begin
        best_score := score.(n);
        best_reg := n
      end
    done;
    for n = 0 to start - 1 do
      if score.(n) > !best_score then begin
        best_score := score.(n);
        best_reg := n
      end
    done
  end;
  (* Found a register? *)
  if !best_reg >= 0 then begin
    reg.loc <- Reg(first_reg + !best_reg);
    if Proc.rotate_registers then
      start_register.(cl) <- (if start+1 >= num_regs then 0 else start+1)
  end else begin
    (* Sorry, we must put the pseudoreg in a stack location *)
    (* First, check if we have a preference for an incoming location
       we do not conflict with. *)
    let best_score = ref 0 and best_incoming_loc = ref (-1) in
    List.iter
      (fun (r, w) ->
        match r.loc with
          Stack(Incoming n) ->
            if w > !best_score
             & List.for_all (fun neighbour -> neighbour.loc <> r.loc)
                            reg.interf
            then begin
              best_score := w;
              best_incoming_loc := n
            end
        | _ -> ())
      reg.prefer;
    if !best_incoming_loc >= 0 then
      reg.loc <- Stack(Incoming !best_incoming_loc)
    else begin
      (* Now, look for a location in the local area *)
      let nslots = Proc.num_stack_slots.(cl) in
      let score = Array.create nslots 0 in
      (* Compute the scores as for registers *)
      List.iter
        (fun (r, w) ->
          match r.loc with
            Stack(Local n) -> if Proc.register_class r = cl then
                              score.(n) <- score.(n) + w
          | Unknown ->
              List.iter
                (fun neighbour ->
                  match neighbour.loc with
                    Stack(Local n) ->
                      if Proc.register_class neighbour = cl
                      then score.(n) <- score.(n) - w
                  | _ -> ())
                r.interf
          | _ -> ())
        reg.prefer;
      List.iter
        (fun neighbour ->
          begin match neighbour.loc with
              Stack(Local n) ->
                if Proc.register_class neighbour = cl then
                score.(n) <- (-1000000)
          | _ -> ()
          end;
          List.iter
            (fun (r, w) ->
              match r.loc with
                Stack(Local n) -> if Proc.register_class r = cl then
                                  score.(n) <- score.(n) - w
              | _ -> ())
            neighbour.prefer)
        reg.interf;
      (* Pick the location with the best score *)
      let best_score = ref (-1000000) and best_slot = ref (-1) in
      for n = 0 to nslots - 1 do
        if score.(n) > !best_score then begin
          best_score := score.(n);
          best_slot := n
        end
      done;
      (* Found one? *)
      if !best_slot >= 0 then
        reg.loc <- Stack(Local !best_slot)
      else begin
        (* Allocate a new stack slot *)
        reg.loc <- Stack(Local nslots);
        Proc.num_stack_slots.(cl) <- nslots + 1
      end
    end
  end;
  (* Cancel the preferences of this register so that they don't influence
     transitively the allocation of registers that prefer this reg. *)
  reg.prefer <- []
@

<<function Coloring.allocate_registers>>=
let allocate_registers() =
  (* First pass: preallocate spill registers
     Second pass: compute the degrees
     Third pass: determine coloring order by successive removals of regs
     Fourth pass: assign registers in that order *)
  for i = 0 to Proc.num_register_classes - 1 do
    Proc.num_stack_slots.(i) <- 0;
    start_register.(i) <- 0
  done;
  List.iter allocate_spilled (Reg.all_registers());
  List.iter find_degree (Reg.all_registers());
  List.iter assign_location (remove_all_regs [])
@


%-------------------------------------------------------------

<<asmcomp/coloring.ml>>=
<<copyright header>>

(* Register allocation by coloring of the interference graph *)

open Reg

<<function Coloring.allocate_spilled>>

<<constant Coloring.unconstrained>>
<<constant Coloring.constrained>>

<<function Coloring.find_degree>>

<<function Coloring.remove_all_regs>>

<<function Coloring.iter_preferred>>

<<constant Coloring.start_register>>

<<function Coloring.assign_location>>

<<function Coloring.allocate_registers>>
@


\subsection*{[[asmcomp/linearize.mli]]}

<<type Linearize.label>>=
(* Transformation of Mach code into a list of pseudo-instructions. *)

type label = int
@

<<signature Linearize.new_label>>=
val new_label: unit -> label
@

<<type Linearize.instruction>>=
type instruction =
  { mutable desc: instruction_desc;
    next: instruction;
    arg: Reg.t array;
    res: Reg.t array;
    live: Reg.t Set.t }
@

<<type Linearize.instruction_desc>>=
and instruction_desc =
    Lend
  | Lop of Mach.operation
  | Lreloadretaddr
  | Lreturn
  | Llabel of label
  | Lbranch of label
  | Lcondbranch of Mach.test * label
  | Lcondbranch3 of label option * label option * label option
  | Lswitch of label array
  | Lsetuptrap of label
  | Lpushtrap
  | Lpoptrap
  | Lraise
@

<<signature Linearize.end_instr>>=
val end_instr: instruction
@

<<signature Linearize.instr_cons>>=
val instr_cons: 
  instruction_desc -> Reg.t array -> Reg.t array -> instruction -> instruction
@

<<type Linearize.fundecl>>=
type fundecl =
  { fun_name: string;
    fun_body: instruction;
    fun_fast: bool }
@

<<signature Linearize.fundecl>>=
val fundecl: Mach.fundecl -> fundecl
@


%-------------------------------------------------------------

<<asmcomp/linearize.mli>>=
<<copyright header>>

<<type Linearize.label>>
<<signature Linearize.new_label>>

<<type Linearize.instruction>>

<<type Linearize.instruction_desc>>

<<signature Linearize.end_instr>>
<<signature Linearize.instr_cons>>

<<type Linearize.fundecl>>

<<signature Linearize.fundecl>>

@


\subsection*{[[asmcomp/linearize.ml]]}

<<type Linearize.label (asmcomp/linearize.ml)>>=
type label = int
@

<<constant Linearize.label_counter>>=
let label_counter = ref 99
@

<<function Linearize.new_label>>=
let new_label() = incr label_counter; !label_counter
@

<<type Linearize.instruction (asmcomp/linearize.ml)>>=
type instruction =
  { mutable desc: instruction_desc;
    next: instruction;
    arg: Reg.t array;
    res: Reg.t array;
    live: Reg.t Set.t }
@

<<type Linearize.instruction_desc (asmcomp/linearize.ml)>>=
and instruction_desc =
    Lend
  | Lop of operation
  | Lreloadretaddr
  | Lreturn
  | Llabel of label
  | Lbranch of label
  | Lcondbranch of test * label
  | Lcondbranch3 of label option * label option * label option
  | Lswitch of label array
  | Lsetuptrap of label
  | Lpushtrap
  | Lpoptrap
  | Lraise
@

<<type Linearize.fundecl (asmcomp/linearize.ml)>>=
type fundecl =
  { fun_name: string;
    fun_body: instruction;
    fun_fast: bool }
@

<<function Linearize.invert_integer_test>>=
(* Invert a test *)

let invert_integer_test = function
    Isigned cmp -> Isigned(Cmm.negate_comparison cmp)
  | Iunsigned cmp -> Iunsigned(Cmm.negate_comparison cmp)
@

<<function Linearize.invert_test>>=
let invert_test = function
    Itruetest -> Ifalsetest
  | Ifalsetest -> Itruetest
  | Iinttest(cmp) -> Iinttest(invert_integer_test cmp)
  | Iinttest_imm(cmp, n) -> Iinttest_imm(invert_integer_test cmp, n)
  | Ifloattest(cmp, neg) -> Ifloattest(cmp, not neg)
  | Ieventest -> Ioddtest
  | Ioddtest -> Ieventest
@

<<constant Linearize.end_instr>>=
(* The "end" instruction *)

let rec end_instr =
  { desc = Lend;
    next = end_instr;
    arg = [||];
    res = [||];
    live = (*Reg.*)Set.empty }
@

<<function Linearize.instr_cons>>=
(* Cons an instruction (live empty) *)

let instr_cons d a r n =
  { desc = d; next = n; arg = a; res = r; live = (*Reg.*)Set.empty }
@

<<function Linearize.cons_instr>>=
(* Cons a simple instruction (arg, res, live empty) *)

let cons_instr d n =
  { desc = d; next = n; arg = [||]; res = [||]; live = (*Reg.*)Set.empty }
@

<<function Linearize.copy_instr>>=
(* Build an instruction with arg, res, live taken from
   the given Mach.instruction *)

let copy_instr d i n =
  { desc = d; next = n;
    arg = i.Mach.arg; res = i.Mach.res; live = i.Mach.live }
@

<<function Linearize.get_label>>=
(* Label the beginning of the given instruction sequence.
   If the sequence starts with a branch, jump over it. *)

let get_label n =
  match n.desc with
    Lbranch lbl -> (lbl, n)
  | Llabel lbl -> (lbl, n)
  | _ -> let lbl = new_label() in (lbl, cons_instr (Llabel lbl) n)
@

<<function Linearize.discard_dead_code>>=
(* Discard all instructions up to the next label.
   This function is to be called before adding a non-terminating 
   instruction. *)

let rec discard_dead_code n =
  match n.desc with
    Lend -> n
  | Llabel _ -> n
(* Do not discard Lpoptrap or Istackoffset instructions,
   as this may cause a stack imbalance later during assembler generation. *)
  | Lpoptrap -> n
  | Lop(Istackoffset _) -> n
  | _ -> discard_dead_code n.next
@

<<function Linearize.add_branch>>=
(* Add a branch in front of a continuation.
   Discard dead code in the continuation.
   Does not insert anything if we're just falling through. *)

let add_branch lbl n =
  let n1 = discard_dead_code n in
  match n1.desc with
    Llabel lbl1 when lbl1 = lbl -> n1
  | _ -> cons_instr (Lbranch lbl) n1
@

<<constant Linearize.exit_label>>=
(* Current label for exit handler *)

let exit_label = ref 99
@

<<function Linearize.linear>>=
(* Linearize an instruction [i]: add it in front of the continuation [n] *)

let rec linear i n =
  match i.Mach.desc with
    Iend -> n
  | Iop(Itailcall_ind | Itailcall_imm _ as op) ->
      copy_instr (Lop op) i (discard_dead_code n)
  | Iop(Imove | Ireload | Ispill)
    when i.Mach.arg.(0).loc = i.Mach.res.(0).loc ->
      linear i.Mach.next n
  | Iop op ->
      copy_instr (Lop op) i (linear i.Mach.next n)
  | Ireturn ->
      let n1 = copy_instr Lreturn i (discard_dead_code n) in
      if !Proc.contains_calls
      then cons_instr Lreloadretaddr n1
      else n1
  | Iifthenelse(test, ifso, ifnot) ->
      let n1 = linear i.Mach.next n in
      begin match (ifso.Mach.desc, ifnot.Mach.desc) with
        Iexit, _ ->
          copy_instr (Lcondbranch(test, !exit_label)) i
            (linear ifnot n1)
      | _,  Iexit ->
          copy_instr (Lcondbranch(invert_test test, !exit_label)) i
            (linear ifso n1)
      | Iend, _ ->
          let (lbl_end, n2) = get_label n1 in
          copy_instr (Lcondbranch(test, lbl_end)) i
            (linear ifnot n2)
      | _,  Iend ->
          let (lbl_end, n2) = get_label n1 in
          copy_instr (Lcondbranch(invert_test test, lbl_end)) i
            (linear ifso n2)
      | _, _ ->
        (* Should attempt branch prediction here *)
          let (lbl_end, n2) = get_label n1 in
          let (lbl_else, nelse) = get_label (linear ifnot n2) in
          copy_instr (Lcondbranch(invert_test test, lbl_else)) i
            (linear ifso (add_branch lbl_end nelse))
      end
  | Iswitch(index, cases) ->
      let lbl_cases = Array.create (Array.length cases) 0 in
      let (lbl_end, n1) = get_label(linear i.Mach.next n) in
      let n2 = ref (discard_dead_code n1) in
      for i = Array.length cases - 1 downto 0 do
        let (lbl_case, ncase) =
                get_label(linear cases.(i) (add_branch lbl_end !n2)) in
        lbl_cases.(i) <- lbl_case;
        n2 := discard_dead_code ncase
      done;
      (* Switches with 1 and 2 branches have been eliminated earlier.
         Here, we do something for switches with 3 branches. *)
      if Array.length index = 3 then begin
        let fallthrough_lbl =
          match !n2.desc with Llabel lbl -> lbl | _ -> -1 in
        let find_label n =
          let lbl = lbl_cases.(index.(n)) in
          if lbl = fallthrough_lbl then None else Some lbl in
        copy_instr (Lcondbranch3(find_label 0, find_label 1, find_label 2))
                   i !n2
      end else
        copy_instr (Lswitch(Array.map (fun n -> lbl_cases.(n)) index)) i !n2
  | Iloop body ->
      let lbl_head = new_label() in
      let n1 = linear i.Mach.next n in
      let n2 = linear body (cons_instr (Lbranch lbl_head) n1) in
      cons_instr (Llabel lbl_head) n2
  | Icatch(body, handler) ->
      let (lbl_end, n1) = get_label(linear i.Mach.next n) in
      let (lbl_handler, n2) = get_label(linear handler n1) in
      let saved_exit_label = !exit_label in
      exit_label := lbl_handler;
      let n3 = linear body (add_branch lbl_end n2) in
      exit_label := saved_exit_label;
      n3
  | Iexit ->
      add_branch !exit_label (linear i.Mach.next n)
  | Itrywith(body, handler) ->
      let (lbl_join, n1) = get_label (linear i.Mach.next n) in
      let (lbl_body, n2) =
        get_label (cons_instr Lpushtrap
                    (linear body (cons_instr Lpoptrap n1))) in
      cons_instr (Lsetuptrap lbl_body)
        (linear handler (add_branch lbl_join n2))
  | Iraise ->
      copy_instr Lraise i (discard_dead_code n)
@

<<function Linearize.fundecl>>=
let fundecl f =
  { fun_name = f.Mach.fun_name;
    fun_body = linear f.Mach.fun_body end_instr;
    fun_fast = f.Mach.fun_fast }
@


%-------------------------------------------------------------

<<asmcomp/linearize.ml>>=
<<copyright header>>

(* Transformation of Mach code into a list of pseudo-instructions. *)

open Reg
open Mach

<<type Linearize.label (asmcomp/linearize.ml)>>

<<constant Linearize.label_counter>>

<<function Linearize.new_label>>

<<type Linearize.instruction (asmcomp/linearize.ml)>>

<<type Linearize.instruction_desc (asmcomp/linearize.ml)>>

<<type Linearize.fundecl (asmcomp/linearize.ml)>>

<<function Linearize.invert_integer_test>>

<<function Linearize.invert_test>>

<<constant Linearize.end_instr>>

<<function Linearize.instr_cons>>

<<function Linearize.cons_instr>>

<<function Linearize.copy_instr>>

<<function Linearize.get_label>>

<<function Linearize.discard_dead_code>>

<<function Linearize.add_branch>>

<<constant Linearize.exit_label>>

<<function Linearize.linear>>

<<function Linearize.fundecl>>

@


\subsection*{[[asmcomp/printlinear.mli]]}

<<signature Printlinear.instr>>=
val instr: instruction -> unit
@

<<signature Printlinear.fundecl>>=
val fundecl: fundecl -> unit
@


%-------------------------------------------------------------

<<asmcomp/printlinear.mli>>=
<<copyright header>>

(* Pretty-printing of linearized machine code *)

open Linearize

<<signature Printlinear.instr>>
<<signature Printlinear.fundecl>>
@


\subsection*{[[asmcomp/printlinear.ml]]}

<<function Printlinear.label>>=
let label l =
  print_string "L"; print_int l
@

<<function Printlinear.instr>>=
let instr i =
  match i.desc with
    Lend -> ()
  | Lop op ->
      begin match op with
        Ialloc _ | Icall_ind | Icall_imm _ | Iextcall(_, _) ->
          open_box 1;
          print_string "{";
          regsetaddr i.live;
          print_string "}";
          close_box();
          print_cut()
      | _ -> ()
      end;
      operation op i.arg i.res
  | Lreloadretaddr ->
      print_string "reload retaddr"
  | Lreturn ->
      print_string "return "; regs i.arg
  | Llabel lbl ->
      label lbl; print_string ":"
  | Lbranch lbl ->
      print_string "goto "; label lbl
  | Lcondbranch(tst, lbl) ->
      print_string "if "; test tst i.arg; print_string " goto "; label lbl
  | Lcondbranch3(lbl0, lbl1, lbl2) ->
      print_string "switch3 "; reg i.arg.(0);
      let case n = function
        None -> ()
      | Some lbl ->
          print_cut();
          print_string "case "; print_int n;
          print_string ": goto "; label lbl in
      case 0 lbl0; case 1 lbl1; case 2 lbl2;
      print_cut(); print_string "endswitch"
  | Lswitch lblv ->
      print_string "switch "; reg i.arg.(0);
      for i = 0 to Array.length lblv - 1 do
        print_cut();
        print_string "case "; print_int i;
        print_string ": goto "; label lblv.(i)
      done;
      print_cut(); print_string "endswitch"
  | Lsetuptrap lbl ->
      print_string "setup trap "; label lbl
  | Lpushtrap ->
      print_string "push trap"
  | Lpoptrap ->
      print_string "pop trap"
  | Lraise ->
      print_string "raise "; reg i.arg.(0)
@

<<function Printlinear.all_instr>>=
let rec all_instr i =
  match i.desc with
    Lend -> ()
  | _ -> instr i; print_cut(); all_instr i.next
@

<<function Printlinear.fundecl>>=
let fundecl f =
  open_vbox 2;
  print_string f.fun_name; print_string ":"; print_cut();
  all_instr f.fun_body;
  close_box()
@


%-------------------------------------------------------------

<<asmcomp/printlinear.ml>>=
<<copyright header>>

(* Pretty-printing of linearized machine code *)

open Format
open Mach
open Printmach
open Linearize

<<function Printlinear.label>>

<<function Printlinear.instr>>

<<function Printlinear.all_instr>>

<<function Printlinear.fundecl>>
@


\subsection*{[[asmcomp/spill.mli]]}

<<signature Spill.fundecl>>=
(* Insertion of moves to suggest possible spilling / reloading points 
   before register allocation. *)

val fundecl: Mach.fundecl -> Mach.fundecl
@


%-------------------------------------------------------------

<<asmcomp/spill.mli>>=
<<copyright header>>

<<signature Spill.fundecl>>
@


\subsection*{[[asmcomp/spill.ml]]}

<<constant Spill.spill_env>>=
(* Association of spill registers to registers *)

let spill_env = ref ((*Reg.*)Map.empty: (Reg.t , Reg.t) (*Reg.*)Map.t)
@

<<function Spill.spill_reg>>=
let spill_reg r =
  try
    (*Reg.*)Map.find r !spill_env
  with Not_found ->
    let spill_r = Reg.create r.typ in
    spill_r.spill <- true;
    if String.length r.name > 0 then spill_r.name <- "spilled-" ^ r.name;
    spill_env := (*Reg.*)Map.add r spill_r !spill_env;
    spill_r
@

<<constant Spill.use_date>>=
(* Record the position of last use of registers *)

let use_date = ref ((*Reg.*)Map.empty: (Reg.t, int) (*Reg.*)Map.t)
@

<<constant Spill.current_date>>=
let current_date = ref 0
@

<<function Spill.record_use>>=
let record_use regv =
  for i = 0 to Array.length regv - 1 do
    let r = regv.(i) in
    let prev_date = try (*Reg.*)Map.find r !use_date with Not_found -> 0 in
    if !current_date > prev_date then
      use_date := (*Reg.*)Map.add r !current_date !use_date
  done
@

<<function Spill.add_superpressure_regs>>=
(* Check if the register pressure overflows the maximum pressure allowed
   at that point. If so, spill enough registers to lower the pressure. *)

let add_superpressure_regs op live_regs res_regs spilled =
  let max_pressure = Proc.max_register_pressure op in
  let regs = Reg.add_set_array live_regs res_regs in
  (* Compute the pressure in each register class *)
  let pressure = Array.create Proc.num_register_classes 0 in
  (*Reg.*)Set.iter
    (fun r ->
      if (*Reg.*)Set.mem r spilled then () else begin
        match r.loc with
          Stack s -> ()
        | _ -> let c = Proc.register_class r in
               pressure.(c) <- pressure.(c) + 1
      end)
    regs;
  (* Check if pressure is exceeded for each class. *)
  let rec check_pressure cl spilled =
    if cl >= Proc.num_register_classes then
      spilled
    else if pressure.(cl) <= max_pressure.(cl) then
      check_pressure (cl+1) spilled
    else begin
      (* Find the least recently used, unspilled, unallocated, live register
         in the class *)
      let lru_date = ref 1000000 and lru_reg = ref Reg.dummy in
      (*Reg.*)Set.iter
        (fun r ->
          if Proc.register_class r = cl &
             not ((*Reg.*)Set.mem r spilled) &
             r.loc = Unknown then begin
            try
              let d = (*Reg.*)Map.find r !use_date in
              if d < !lru_date then begin
                lru_date := d;
                lru_reg := r
              end
            with Not_found ->                 (* Should not happen *)
              ()
          end)
        live_regs;
      pressure.(cl) <- pressure.(cl) - 1;
      check_pressure cl ((*Reg.*)Set.add !lru_reg spilled)
    end in
  check_pressure 0 spilled
@

<<constant Spill.destroyed_at_fork>>=
(* A-list recording what is destroyed at if-then-else points. *)

let destroyed_at_fork = ref ([] : (instruction * Reg.t Set.t) list)
@

<<function Spill.add_reloads>>=
(* First pass: insert reload instructions based on an approximation of
   what is destroyed at pressure points. *)

let add_reloads regset i =
  (*Reg.*)Set.fold
    (fun r i -> instr_cons (Iop Ireload) [|spill_reg r|] [|r|] i)
    regset i
@

<<constant Spill.reload_at_exit>>=
let reload_at_exit = ref (*Reg.*)Set.empty
@

<<constant Spill.reload_at_break>>=
let reload_at_break = ref (*Reg.*)Set.empty
@

<<function Spill.reload>>=
let rec reload i before =
  incr current_date;
  record_use i.arg;
  record_use i.res;
  match i.desc with
    Iend ->
      (i, before)
  | Ireturn | Iop(Itailcall_ind) | Iop(Itailcall_imm _) ->
      (add_reloads (Reg.inter_set_array before i.arg) i,
       (*Reg.*)Set.empty)
  | Iop(Icall_ind | Icall_imm _ | Iextcall(_, true)) ->
      (* All regs live across must be spilled *)
      let (new_next, finally) = reload i.next i.live in
      (add_reloads (Reg.inter_set_array before i.arg)
                   (instr_cons i.desc i.arg i.res new_next),
       finally)
  | Iop op ->
      let new_before =
        (* Quick check to see if the register pressure is below the maximum *)
        if (*Reg.*)Set.cardinal i.live + Array.length i.res <=
           Proc.safe_register_pressure op
        then before
        else add_superpressure_regs op i.live i.res before in
      let after =
        Reg.diff_set_array (Reg.diff_set_array new_before i.arg) i.res in
      let (new_next, finally) = reload i.next after in
      (add_reloads (Reg.inter_set_array new_before i.arg)
                   (instr_cons i.desc i.arg i.res new_next),
       finally)
  | Iifthenelse(test, ifso, ifnot) ->
      let at_fork = Reg.diff_set_array before i.arg in
      let date_fork = !current_date in
      let (new_ifso, after_ifso) = reload ifso at_fork in
      let date_ifso = !current_date in
      current_date := date_fork;
      let (new_ifnot, after_ifnot) = reload ifnot at_fork in
      current_date := max date_ifso !current_date;
      let (new_next, finally) =
        reload i.next ((*Reg.*)Set.union after_ifso after_ifnot) in
      let new_i =
        instr_cons (Iifthenelse(test, new_ifso, new_ifnot))
        i.arg i.res new_next in
      destroyed_at_fork := (new_i, at_fork) :: !destroyed_at_fork;
      (add_reloads (Reg.inter_set_array before i.arg) new_i,
       finally)
  | Iswitch(index, cases) ->
      let at_fork = Reg.diff_set_array before i.arg in
      let date_fork = !current_date in
      let date_join = ref 0 in
      let after_cases = ref (*Reg.*)Set.empty in
      let new_cases =
        Array.map
          (fun c ->
            current_date := date_fork;
            let (new_c, after_c) = reload c at_fork in
            after_cases := (*Reg.*)Set.union !after_cases after_c;
            date_join := max !date_join !current_date;
            new_c)
          cases in
      current_date := !date_join;
      let (new_next, finally) = reload i.next !after_cases in
      (add_reloads (Reg.inter_set_array before i.arg)
                   (instr_cons (Iswitch(index, new_cases))
                               i.arg i.res new_next),
       finally)
  | Iloop(body) ->
      let date_start = !current_date in
      let at_head = ref before in
      let final_body = ref body in
      begin try
        while true do
          current_date := date_start;
          let (new_body, new_at_head) = reload body !at_head in
          let merged_at_head = (*Reg.*)Set.union !at_head new_at_head in
          if (*Reg.*)Set.equal merged_at_head !at_head then begin
            final_body := new_body;
            raise Exit
          end;
          at_head := merged_at_head
        done
      with Exit -> ()
      end;
      let (new_next, finally) = reload i.next (*Reg.*)Set.empty in
      (instr_cons (Iloop(!final_body)) i.arg i.res new_next,
       finally)
  | Icatch(body, handler) ->
      let saved_reload_at_exit = !reload_at_exit in
      reload_at_exit := (*Reg.*)Set.empty;
      let (new_body, after_body) = reload body before in
      let at_exit = !reload_at_exit in
      reload_at_exit := saved_reload_at_exit;
      let (new_handler, after_handler) = reload handler at_exit in
      let (new_next, finally) =
        reload i.next ((*Reg.*)Set.union after_body after_handler) in
      (instr_cons (Icatch(new_body, new_handler)) i.arg i.res new_next,
       finally)
  | Iexit ->
      reload_at_exit := (*Reg.*)Set.union !reload_at_exit before;
      (i, (*Reg.*)Set.empty)
  | Itrywith(body, handler) ->
      let (new_body, after_body) = reload body before in
      let (new_handler, after_handler) = reload handler handler.live in
      let (new_next, finally) =
        reload i.next ((*Reg.*)Set.union after_body after_handler) in
      (instr_cons (Itrywith(new_body, new_handler)) i.arg i.res new_next,
       finally)
  | Iraise ->
      (add_reloads (Reg.inter_set_array before i.arg) i, (*Reg.*)Set.empty)
@

<<constant Spill.spill_at_exit>>=
(* As an optimization, if a register needs to be spilled in one branch of
   a conditional but not in the other, then we spill it late on entrance
   in the branch that needs it spilled.
   This strategy is turned off in loops, as it may prevent a spill from
   being lifted up all the way out of the loop. *)

let spill_at_exit = ref (*Reg.*)Set.empty
@

<<constant Spill.spill_at_raise>>=
let spill_at_raise = ref (*Reg.*)Set.empty
@

<<constant Spill.inside_loop>>=
let inside_loop = ref false
@

<<function Spill.add_spills>>=
let add_spills regset i =
  (*Reg.*)Set.fold
    (fun r i -> instr_cons (Iop Ispill) [|r|] [|spill_reg r|] i)
    regset i
@

<<function Spill.spill>>=
let rec spill i finally =
  match i.desc with
    Iend ->
      (i, finally)
  | Ireturn | Iop(Itailcall_ind) | Iop(Itailcall_imm _) ->
      (i, (*Reg.*)Set.empty)
  | Iop Ireload ->
      let (new_next, after) = spill i.next finally in
      let before1 = Reg.diff_set_array after i.res in
      (instr_cons i.desc i.arg i.res new_next,
       Reg.add_set_array before1 i.res)
  | Iop _ ->
      let (new_next, after) = spill i.next finally in
      let before1 = Reg.diff_set_array after i.res in
      let before =
        match i.desc with
          Iop(Icall_ind) | Iop(Icall_imm _) | Iop(Iextcall(_, _)) ->
            (*Reg.*)Set.union before1 !spill_at_raise
        | _ ->
            before1 in
      (instr_cons i.desc i.arg i.res
                  (add_spills (Reg.inter_set_array after i.res) new_next),
       before)
  | Iifthenelse(test, ifso, ifnot) ->
      let (new_next, at_join) = spill i.next finally in
      let (new_ifso, before_ifso) = spill ifso at_join in
      let (new_ifnot, before_ifnot) = spill ifnot at_join in
      if !inside_loop then
        (instr_cons (Iifthenelse(test, new_ifso, new_ifnot))
                     i.arg i.res new_next,
         (*Reg.*)Set.union before_ifso before_ifnot)
      else begin
        let destroyed = List.assq i !destroyed_at_fork in
        let spill_ifso_branch =
          (*Reg.*)Set.diff ((*Reg.*)Set.diff before_ifso before_ifnot) destroyed
        and spill_ifnot_branch =
          (*Reg.*)Set.diff ((*Reg.*)Set.diff before_ifnot before_ifso) destroyed in
        (instr_cons
            (Iifthenelse(test, add_spills spill_ifso_branch new_ifso,
                               add_spills spill_ifnot_branch new_ifnot))
            i.arg i.res new_next,
         (*Reg.*)Set.diff ((*Reg.*)Set.diff ((*Reg.*)Set.union before_ifso before_ifnot)
                                    spill_ifso_branch)
                       spill_ifnot_branch)
      end
  | Iswitch(index, cases) ->
      let (new_next, at_join) = spill i.next finally in
      let before = ref (*Reg.*)Set.empty in
      let new_cases =
        Array.map
          (fun c ->
            let (new_c, before_c) = spill c at_join in
            before := (*Reg.*)Set.union !before before_c;
            new_c)
          cases in
      (instr_cons (Iswitch(index, new_cases)) i.arg i.res new_next,
       !before)
  | Iloop(body) ->
      let (new_next, _) = spill i.next finally in
      let saved_inside_loop = !inside_loop in
      inside_loop := true;
      let at_head = ref (*Reg.*)Set.empty in
      let final_body = ref body in
      begin try
        while true do
          let (new_body, before_body) = spill body !at_head in
          let new_at_head = (*Reg.*)Set.union !at_head before_body in
          if (*Reg.*)Set.equal new_at_head !at_head then begin
            final_body := new_body; raise Exit
          end;
          at_head := new_at_head
        done
      with Exit -> ()
      end;
      inside_loop := saved_inside_loop;
      (instr_cons (Iloop(!final_body)) i.arg i.res new_next,
       !at_head)
  | Icatch(body, handler) ->
      let (new_next, at_join) = spill i.next finally in
      let (new_handler, at_exit) = spill handler at_join in
      let saved_spill_at_exit = !spill_at_exit in
      spill_at_exit := at_exit;
      let (new_body, before) = spill body at_join in
      spill_at_exit := saved_spill_at_exit;
      (instr_cons (Icatch(new_body, new_handler)) i.arg i.res new_next,
       before)
  | Iexit ->
      (i, !spill_at_exit)
  | Itrywith(body, handler) ->
      let (new_next, at_join) = spill i.next finally in
      let (new_handler, before_handler) = spill handler at_join in
      let saved_spill_at_raise = !spill_at_raise in
      spill_at_raise := before_handler;
      let (new_body, before_body) = spill body at_join in
      spill_at_raise := saved_spill_at_raise;
      (instr_cons (Itrywith(new_body, new_handler)) i.arg i.res new_next,
       before_body)
  | Iraise ->
      (i, !spill_at_raise)
@

<<function Spill.fundecl>>=
(* Entry point *)

let fundecl f =
  spill_env := (*Reg.*)Map.empty;
  use_date := (*Reg.*)Map.empty;
  current_date := 0;
  let (body1, _) = reload f.fun_body (*Reg.*)Set.empty in
  let (body2, tospill_at_entry) = spill body1 (*Reg.*)Set.empty in
  let new_body =
    add_spills (Reg.inter_set_array tospill_at_entry f.fun_args) body2 in
  spill_env := (*Reg.*)Map.empty;
  use_date := (*Reg.*)Map.empty;
  { fun_name = f.fun_name;
    fun_args = f.fun_args;
    fun_body = new_body;
    fun_fast = f.fun_fast }
@


%-------------------------------------------------------------

<<asmcomp/spill.ml>>=
<<copyright header>>

(* Insertion of moves to suggest possible spilling / reloading points 
   before register allocation. *)

open Reg
open Mach

(* We say that a register is "destroyed" if it is live across a construct
   that potentially destroys all physical registers: function calls or
   try...with constructs.

   The "destroyed" registers must therefore reside in the stack during
   these instructions.. We will insert spills (stores) just after they
   are defined, and reloads just before their first use following a
   "destroying" construct.

   Instructions with more live registers than actual registers also
   "destroy" registers: we mark as "destroyed" the registers live
   across the instruction that haven't been used for the longest time.
   These registers will be spilled and reloaded as described above. *)

<<constant Spill.spill_env>>

<<function Spill.spill_reg>>

<<constant Spill.use_date>>
<<constant Spill.current_date>>

<<function Spill.record_use>>

<<function Spill.add_superpressure_regs>>

<<constant Spill.destroyed_at_fork>>

<<function Spill.add_reloads>>

<<constant Spill.reload_at_exit>>
<<constant Spill.reload_at_break>>

<<function Spill.reload>>

(* Second pass: add spill instructions based on what we've decided to reload.
   That is, any register that may be reloaded in the future must be spilled
   just after its definition. *)

<<constant Spill.spill_at_exit>>
<<constant Spill.spill_at_raise>>
<<constant Spill.inside_loop>>

<<function Spill.add_spills>>

<<function Spill.spill>>

<<function Spill.fundecl>>
  
@


\subsection*{[[asmcomp/selectgen.mli]]}

<<type Selectgen.environment>>=
(* Selection of pseudo-instructions, assignment of pseudo-registers,
   sequentialization. *)

type environment = (Ident.t, Reg.t array) Tbl.t
@

<<signature Selectgen.size_expr>>=
val size_expr : environment -> Cmm.expression -> int
@

<<type Selectgen.selector>>=
type selector = {
  (* old: virtuals *)

  (* The following methods must or can be overriden by the processor
     description *)
  is_immediate : (int -> bool);
    (* Must be defined to indicate whether a constant is a suitable
       immediate operand to arithmetic instructions *)
  select_addressing :
    (Cmm.expression -> Arch.addressing_mode * Cmm.expression);
    (* Must be defined to select addressing modes *)

  (* old: regular *)

  select_operation :
    selector ->
    Cmm.operation ->
    Cmm.expression list -> Mach.operation * Cmm.expression list;
    (* Can be overriden to deal with special arithmetic instructions *)
  select_condition : 
    selector ->
    Cmm.expression -> Mach.test * Cmm.expression;
    (* Can be overriden to deal with special test instructions *)
  select_store :
    Arch.addressing_mode -> Cmm.expression -> Mach.operation * Cmm.expression;
    (* Can be overriden to deal with special store constant instructions *)
  insert_op :
    selector ->
    Mach.operation -> Reg.t array -> Reg.t array -> Reg.t array;
    (* Can be overriden to deal with 2-address instructions
       or instructions with hardwired input/output registers *)
  emit_extcall_args :
    selector ->
    environment -> Cmm.expression list -> Reg.t array * int;
    (* Can be overriden to deal with stack-based calling conventions *)

  (* The following method is the entry point and should not be overriden *)
  emit_fundecl : 
    selector ->
    Cmm.fundecl -> Mach.fundecl;
  
  (* The following methods should not be overriden.  They cannot be
     declared "private" in the current implementation because they
     are not always applied to "self", but ideally they should be private. *)
  extract : Mach.instruction;
  insert : Mach.instruction_desc -> Reg.t array -> Reg.t array -> unit;
  insert_move : 
    selector ->
    Reg.t -> Reg.t -> unit;
  insert_move_args : 
    selector ->
    Reg.t array -> Reg.t array -> int -> unit;
  insert_move_results : 
    selector ->
    Reg.t array -> Reg.t array -> int -> unit;
  insert_moves : 
    selector ->
    Reg.t array -> Reg.t array -> unit;
  emit_expr :
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> Reg.t array;

  emit_tail : 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> unit;


  (* old: protected *)

  select_arith_comm: 
     selector -> 
     Mach.integer_operation -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;
  select_arith: 
     selector -> 
     Mach.integer_operation -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;
  select_shift: 
     Mach.integer_operation -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;
  select_arith_comp: 
     selector -> 
     Mach.integer_comparison -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;


  emit_let :
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Ident.t -> Cmm.expression -> 
     (Ident.t, Reg.t array) Tbl.t;
  emit_parts_list:
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression list -> 
     Cmm.expression list * (Ident.t, Reg.t array) Tbl.t;
  emit_parts:
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
     Cmm.expression * (Ident.t, Reg.t array) Tbl.t;
  emit_tuple:
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression list -> 
     Reg.t array;
  emit_stores: 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression list -> Reg.t array -> 
     Arch.addressing_mode -> unit;
  emit_sequence: 
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
     Reg.t array * selector;

  emit_return: 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
     unit;

  emit_tail_sequence: 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
    Mach.instruction;

  (* old: in children *)

  select_floatarith: 
   selector ->
   Mach.operation -> 
   Mach.operation -> 
   Arch.float_operation -> 
   Arch.float_operation -> 
   Cmm.expression list -> 
   Mach.operation * Cmm.expression list;

  select_push:
   selector ->
   Cmm.expression -> Mach.operation * Cmm.expression;

}
@

<<signature Selectgen.selector_generic>>=
val selector_generic: unit -> selector
@


%-------------------------------------------------------------

<<asmcomp/selectgen.mli>>=
<<copyright header>>

<<type Selectgen.environment>>

<<signature Selectgen.size_expr>>


<<type Selectgen.selector>>

<<signature Selectgen.selector_generic>>


(*
  is_immediate = super.is_immediate;
  select_addressing = super.select_addressing;
  select_operation = super.select_operation;
  select_condition = super.select_condition;
  select_store = super.select_store;
  insert_op = super.insert_op;
  emit_extcall_args = super.emit_extcall_args;
  emit_fundecl = super.emit_fundecl;
  extract = super.extract;
  insert = super.insert;
  insert_move = super.insert_move;
  insert_move_args = super.insert_move_args;
  insert_move_results = super.insert_move_results;
  insert_moves = super.insert_moves;
  emit_expr = super.emit_expr;
  emit_tail = super.emit_tail;
  select_arith_comm = super.select_arith_comm;
  select_arith = super.select_arith;
  select_shift = super.select_shift;
  select_arith_comp = super.select_arith_comp;
  emit_let = super.emit_let;
  emit_parts_list = super.emit_parts_list;
  emit_parts = super.emit_parts;
  emit_tuple = super.emit_tuple;
  emit_stores = super.emit_stores;
  emit_sequence = super.emit_sequence;
  emit_return = super.emit_return;
  emit_tail_sequence = super.emit_tail_sequence;
  select_floatarith = super.select_floatarith;
  select_push = super.select_push;
*)
@


\subsection*{[[asmcomp/selectgen.ml]]}

<<type Selectgen.environment (asmcomp/selectgen.ml)>>=
type environment = (Ident.t, Reg.t array) Tbl.t
@

<<type Selectgen.selector (asmcomp/selectgen.ml)>>=
type selector = {
  (* The following methods must or can be overriden by the processor
     description *)
  is_immediate : (int -> bool);
    (* Must be defined to indicate whether a constant is a suitable
       immediate operand to arithmetic instructions *)
  select_addressing :
    (Cmm.expression -> Arch.addressing_mode * Cmm.expression);
    (* Must be defined to select addressing modes *)

  select_operation :
    selector ->
    Cmm.operation ->
    Cmm.expression list -> Mach.operation * Cmm.expression list;
    (* Can be overriden to deal with special arithmetic instructions *)
  select_condition : 
    selector ->
    Cmm.expression -> Mach.test * Cmm.expression;
    (* Can be overriden to deal with special test instructions *)
  select_store :
    Arch.addressing_mode -> Cmm.expression -> Mach.operation * Cmm.expression;
    (* Can be overriden to deal with special store constant instructions *)
  insert_op :
    selector ->
    Mach.operation -> Reg.t array -> Reg.t array -> Reg.t array;
    (* Can be overriden to deal with 2-address instructions
       or instructions with hardwired input/output registers *)
  emit_extcall_args :
    selector ->
    environment -> Cmm.expression list -> Reg.t array * int;
    (* Can be overriden to deal with stack-based calling conventions *)

  (* The following method is the entry point and should not be overriden *)
  emit_fundecl : 
    selector ->
    Cmm.fundecl -> Mach.fundecl;
  
  (* The following methods should not be overriden.  They cannot be
     declared "private" in the current implementation because they
     are not always applied to "self", but ideally they should be private. *)
  extract : Mach.instruction;
  insert : Mach.instruction_desc -> Reg.t array -> Reg.t array -> unit;
  insert_move : 
    selector ->
    Reg.t -> Reg.t -> unit;
  insert_move_args : 
    selector ->
    Reg.t array -> Reg.t array -> int -> unit;
  insert_move_results : 
    selector ->
    Reg.t array -> Reg.t array -> int -> unit;
  insert_moves : 
    selector ->
    Reg.t array -> Reg.t array -> unit;
  emit_expr :
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> Reg.t array;

  emit_tail : 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> unit;



  select_arith_comm: 
     selector -> 
     Mach.integer_operation -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;
  select_arith: 
     selector -> 
     Mach.integer_operation -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;
  select_shift: 
     Mach.integer_operation -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;
  select_arith_comp: 
     selector -> 
     Mach.integer_comparison -> Cmm.expression list -> 
     Mach.operation * Cmm.expression list;


  emit_let :
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Ident.t -> Cmm.expression -> 
     (Ident.t, Reg.t array) Tbl.t;
  emit_parts_list:
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression list -> 
     Cmm.expression list * (Ident.t, Reg.t array) Tbl.t;
  emit_parts:
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
     Cmm.expression * (Ident.t, Reg.t array) Tbl.t;
  emit_tuple:
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression list -> 
     Reg.t array;
  emit_stores: 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression list -> Reg.t array -> 
     Arch.addressing_mode -> unit;
  emit_sequence: 
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
     Reg.t array * selector;

  emit_return: 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
     unit;

  emit_tail_sequence: 
    selector ->
    (Ident.t, Reg.t array) Tbl.t -> Cmm.expression -> 
    Mach.instruction;


   (* in children *)
  select_floatarith:
   selector ->
   Mach.operation -> 
   Mach.operation -> 
   Arch.float_operation -> 
   Arch.float_operation -> 
   Cmm.expression list -> 
   Mach.operation * Cmm.expression list;

  select_push:
   selector ->
   Cmm.expression -> Mach.operation * Cmm.expression;

}
@

<<function Selectgen.oper_result_type>>=
(* Infer the type of the result of an operation *)

let oper_result_type = function
    Capply ty -> ty
  | Cextcall(s, ty, alloc) -> ty
  | Cload ty -> ty
  | Cloadchunk c -> typ_int
  | Calloc -> typ_addr
  | Cstore -> typ_void
  | Cstorechunk c -> typ_void
  | Caddi | Csubi | Cmuli | Cdivi | Cmodi
  | Cand | Cor | Cxor | Clsl | Clsr | Casr
  | Ccmpi _ | Ccmpa _ | Ccmpf _ -> typ_int
  | Cadda | Csuba -> typ_addr
  | Cnegf | Cabsf | Caddf | Csubf | Cmulf | Cdivf -> typ_float
  | Cfloatofint -> typ_float
  | Cintoffloat -> typ_int
  | Craise -> typ_void
  | Ccheckbound -> typ_void
  | _ -> fatal_error "Selection.oper_result_type"
@

<<function Selectgen.size_expr>>=
(* Infer the size in bytes of the result of a simple expression *)

let size_expr env exp =
  let rec size localenv = function
      Cconst_int _ | Cconst_natint _ -> Arch.size_int
    | Cconst_symbol _ | Cconst_pointer _ -> Arch.size_addr
    | Cconst_float _ -> Arch.size_float
    | Cvar id ->
        begin try
          Tbl.find id localenv
        with Not_found ->
        try
          let regs = Tbl.find id env in
          size_machtype (Array.map (fun r -> r.typ) regs)
        with Not_found ->
          fatal_error("Selection.size_expr: unbound var " ^ Ident.name id)
        end
    | Ctuple el ->
        List.fold_right (fun e sz -> size localenv e + sz) el 0
    | Cop(op, args) ->
        size_machtype(oper_result_type op)
    | Clet(id, arg, body) ->
        size (Tbl.add id (size localenv arg) localenv) body
    | _ ->
        fatal_error "Selection.size_expr"
  in size Tbl.empty exp
@

<<function Selectgen.is_simple_expr>>=
(* Says if an expression is "simple". A "simple" expression has no
   side-effects and its execution can be delayed until its value
   is really needed. In the case of e.g. an [alloc] instruction,
   the non-simple arguments are computed in right-to-left order
   first, then the block is allocated, then the simple arguments are
   evaluated and stored. *)

let rec is_simple_expr = function
    Cconst_int _ -> true
  | Cconst_natint _ -> true
  | Cconst_float _ -> true
  | Cconst_symbol _ -> true
  | Cconst_pointer _ -> true
  | Cvar _ -> true
  | Ctuple el -> List.for_all is_simple_expr el
  | Clet(id, arg, body) -> is_simple_expr arg && is_simple_expr body
  | Cop(op, args) ->
      begin match op with
        (* The following may have side effects *)
        Capply _ | Cextcall(_, _, _) | Calloc | Cstore | Cstorechunk _ | 
        Craise -> false
        (* The remaining operations are simple if their args are *)
      | _ -> List.for_all is_simple_expr args
      end
  | _ -> false
@

<<function Selectgen.swap_intcomp>>=
(* Swap the two arguments of an integer comparison *)

let swap_intcomp = function
    Isigned cmp -> Isigned(swap_comparison cmp)
  | Iunsigned cmp -> Iunsigned(swap_comparison cmp)
@

<<function Selectgen.all_regs_anonymous>>=
(* Naming of registers *)

let all_regs_anonymous rv =
  try
    for i = 0 to Array.length rv - 1 do
      if String.length rv.(i).name > 0 then raise Exit
    done;
    true
  with Exit ->
    false
@

<<function Selectgen.name_regs>>=
let name_regs id rv =
  if Array.length rv = 1 then
    rv.(0).name <- Ident.name id
  else
    for i = 0 to Array.length rv - 1 do
      rv.(i).name <- Ident.name id ^ "#" ^ string_of_int i
    done
@

<<function Selectgen.join>>=
(* "Join" two instruction sequences, making sure they return their results
   in the same registers. *)

let join r1 seq1 r2 seq2 =
  let l1 = Array.length r1 and l2 = Array.length r2 in
  if l1 = 0 then r2
  else if l2 = 0 then r1
  else begin
    let r = Array.create l1 Reg.dummy in
    for i = 0 to l1-1 do
      if String.length r1.(i).name = 0 then begin
        r.(i) <- r1.(i);
        seq2.insert_move seq2 r2.(i) r1.(i)
      end else if String.length r2.(i).name = 0 then begin
        r.(i) <- r2.(i);
        seq1.insert_move seq1 r1.(i) r2.(i)
      end else begin
        r.(i) <- Reg.create r1.(i).typ;
        seq1.insert_move seq1 r1.(i) r.(i);
        seq2.insert_move seq1 r2.(i) r.(i)
      end
    done;
    r
  end
@

<<function Selectgen.join_array>>=
(* Same, for N branches *)

let join_array rs =
  let some_res = ref [||] in
  for i = 0 to Array.length rs - 1 do
    let (r, s) = rs.(i) in
    if Array.length r > 0 then some_res := r
  done;
  let size_res = Array.length !some_res in
  if size_res = 0 then [||] else begin
    let res = Array.create size_res Reg.dummy in
    for i = 0 to size_res - 1 do
      res.(i) <- Reg.create (!some_res).(i).typ
    done;
    for i = 0 to Array.length rs - 1 do
      let (r, s) = rs.(i) in
      if Array.length r > 0 then s.insert_moves s r res
    done;
    res
  end
@

<<function Selectgen.selector_generic>>=
(* The default instruction selection class *)

let selector_generic () =
 let instr_seq = ref dummy_instr in
 {

(* Says whether an integer constant is a suitable immediate argument *)

 is_immediate = (fun _ -> 
  failwith "virtual: selector_generic.is_immediate");

(* Selection of addressing modes *)

 select_addressing = (fun _ -> 
   failwith "virtual: selector_generic.select_addr");

(* Default instruction selection for stores *)

 select_store = (fun addr arg ->
  (Istore(Word, addr), arg)
 );

(* Default instruction selection for operators *)

 select_operation = (fun self op args ->
  match (op, args) with
    (Capply ty, Cconst_symbol s :: rem) -> (Icall_imm s, rem)
  | (Capply ty, _) -> (Icall_ind, args)
  | (Cextcall(s, ty, alloc), _) -> (Iextcall(s, alloc), args)
  | (Cload ty, [arg]) ->
      let (addr, eloc) = self.select_addressing arg in
      (Iload(Word, addr), [eloc])
  | (Cloadchunk chunk, [arg]) ->
      let (addr, eloc) = self.select_addressing arg in
      (Iload(chunk, addr), [eloc])
  | (Cstore, [arg1; arg2]) ->
      let (addr, eloc) = self.select_addressing arg1 in
      let (op, newarg2) = self.select_store addr arg2 in
      (op, [newarg2; eloc])
      (* Inversion addr/datum in Istore *)
  | (Cstorechunk chunk, [arg1; arg2]) ->
      let (addr, eloc) = self.select_addressing arg1 in
      (Istore(chunk, addr), [arg2; eloc])
      (* Inversion addr/datum in Istore *)
  | (Calloc, _) -> (Ialloc 0, args)
  | (Caddi, _) -> self.select_arith_comm self Iadd args
  | (Csubi, _) -> self.select_arith self Isub args
  | (Cmuli, [arg1; Cconst_int n]) ->
      let l = Misc.log2 n in
      if n = 1 lsl l
      then (Iintop_imm(Ilsl, l), [arg1])
      else self.select_arith_comm self Imul args
  | (Cmuli, [Cconst_int n; arg1]) ->
      let l = Misc.log2 n in
      if n = 1 lsl l
      then (Iintop_imm(Ilsl, l), [arg1])
      else self.select_arith_comm self Imul args
  | (Cmuli, _) -> self.select_arith_comm self Imul args
  | (Cdivi, _) -> self.select_arith self Idiv args
  | (Cmodi, _) -> self.select_arith_comm self Imod args
  | (Cand, _) -> self.select_arith_comm self Iand args
  | (Cor, _) -> self.select_arith_comm self Ior args
  | (Cxor, _) -> self.select_arith_comm self Ixor args
  | (Clsl, _) -> self.select_shift Ilsl args
  | (Clsr, _) -> self.select_shift Ilsr args
  | (Casr, _) -> self.select_shift Iasr args
  | (Ccmpi comp, _) -> self.select_arith_comp self (Isigned comp) args
  | (Cadda, _) -> self.select_arith_comm self Iadd args
  | (Csuba, _) -> self.select_arith self Isub args
  | (Ccmpa comp, _) -> self.select_arith_comp self (Iunsigned comp) args
  | (Cnegf, _) -> (Inegf, args)
  | (Cabsf, _) -> (Iabsf, args)
  | (Caddf, _) -> (Iaddf, args)
  | (Csubf, _) -> (Isubf, args)  
  | (Cmulf, _) -> (Imulf, args)  
  | (Cdivf, _) -> (Idivf, args)
  | (Cfloatofint, _) -> (Ifloatofint, args)
  | (Cintoffloat, _) -> (Iintoffloat, args)
  | (Ccheckbound, _) -> self.select_arith self Icheckbound args
  | _ -> fatal_error "Selection.select_oper"
 );

 select_arith_comm = (fun self op -> function
    [arg; Cconst_int n] when self.is_immediate n ->
      (Iintop_imm(op, n), [arg])
  | [arg; Cconst_pointer n] when self.is_immediate n ->
      (Iintop_imm(op, n), [arg])
  | [Cconst_int n; arg] when self.is_immediate n ->
      (Iintop_imm(op, n), [arg])
  | [Cconst_pointer n; arg] when self.is_immediate n ->
      (Iintop_imm(op, n), [arg])
  | args ->
       (Iintop op, args)
 );

 select_arith = (fun self op -> function
    [arg; Cconst_int n] when self.is_immediate n ->
      (Iintop_imm(op, n), [arg])
  | [arg; Cconst_pointer n] when self.is_immediate n ->
      (Iintop_imm(op, n), [arg])
  | args ->
      (Iintop op, args)
 );

 select_shift = (fun op -> function
    [arg; Cconst_int n] when n >= 0 & n < Arch.size_int * 8 ->
      (Iintop_imm(op, n), [arg])
  | args ->
      (Iintop op, args)
 );

 select_arith_comp = (fun self cmp -> function
    [arg; Cconst_int n] when self.is_immediate n ->
      (Iintop_imm(Icomp cmp, n), [arg])
  | [arg; Cconst_pointer n] when self.is_immediate n ->
      (Iintop_imm(Icomp cmp, n), [arg])
  | [Cconst_int n; arg] when self.is_immediate n ->
      (Iintop_imm(Icomp(swap_intcomp cmp), n), [arg])
  | [Cconst_pointer n; arg] when self.is_immediate n ->
      (Iintop_imm(Icomp(swap_intcomp cmp), n), [arg])
  | args ->
      (Iintop(Icomp cmp), args)
 );

(* Instruction selection for conditionals *)

 select_condition = (fun self -> function
    Cop(Ccmpi cmp, [arg1; Cconst_int n]) when self.is_immediate n ->
      (Iinttest_imm(Isigned cmp, n), arg1)
  | Cop(Ccmpi cmp, [Cconst_int n; arg2]) when self.is_immediate n ->
      (Iinttest_imm(Isigned(swap_comparison cmp), n), arg2)
  | Cop(Ccmpi cmp, args) ->
      (Iinttest(Isigned cmp), Ctuple args)
  | Cop(Ccmpa cmp, [arg1; Cconst_pointer n]) when self.is_immediate n ->
      (Iinttest_imm(Iunsigned cmp, n), arg1)
  | Cop(Ccmpa cmp, [Cconst_pointer n; arg2]) when self.is_immediate n ->
      (Iinttest_imm(Iunsigned(swap_comparison cmp), n), arg2)
  | Cop(Ccmpa cmp, args) ->
      (Iinttest(Iunsigned cmp), Ctuple args)
  | Cop(Ccmpf cmp, args) ->
      (Ifloattest(cmp, false), Ctuple args)
  | Cop(Cand, [arg; Cconst_int 1]) ->
      (Ioddtest, arg)
  | arg ->
      (Itruetest, arg)
 );

(* Buffering of instruction sequences *)


 insert = (fun desc arg res ->
  instr_seq := instr_cons desc arg res !instr_seq
 );

 extract = (
  let rec extract res i =
    if i == dummy_instr
    then res
    else extract (instr_cons i.desc i.arg i.res res) i.next in
  extract (end_instr()) !instr_seq
 );

(* Insert a sequence of moves from one pseudoreg set to another. *)

 insert_move = (fun self src dst ->
  if src.stamp <> dst.stamp then
    self.insert (Iop Imove) [|src|] [|dst|]
 ); 

 insert_moves = (fun self src dst ->
  for i = 0 to Array.length src - 1 do
    self.insert_move self src.(i) dst.(i)
  done
 );

(* Insert moves and stack offsets for function arguments and results *)

 insert_move_args = (fun self arg loc stacksize ->
  if stacksize <> 0 then self.insert (Iop(Istackoffset stacksize)) [||] [||];
  self.insert_moves self arg loc
 );

 insert_move_results = (fun self loc res stacksize ->
  if stacksize <> 0 then self.insert(Iop(Istackoffset(-stacksize))) [||] [||];
  self.insert_moves self loc res
 );

(* Add an Iop opcode. Can be overriden by processor description
   to insert moves before and after the operation, i.e. for two-address 
   instructions, or instructions using dedicated registers. *)

 insert_op = (fun self op rs rd ->
  self.insert (Iop op) rs rd;
  rd
 );

(* Add the instructions for the given expression
   at the end of the self sequence *)

 emit_expr = (fun self env exp ->
  match exp with
    Cconst_int n ->
      let r = Reg.createv typ_int in
      self.insert_op self (Iconst_int(Nativeint.from n)) [||] r
  | Cconst_natint n ->
      let r = Reg.createv typ_int in
      self.insert_op self (Iconst_int n) [||] r
  | Cconst_float n ->
      let r = Reg.createv typ_float in
      self.insert_op self (Iconst_float n) [||] r
  | Cconst_symbol n ->
      let r = Reg.createv typ_addr in
      self.insert_op self (Iconst_symbol n) [||] r
  | Cconst_pointer n ->
      let r = Reg.createv typ_addr in
      self.insert_op self (Iconst_int(Nativeint.from n)) [||] r
  | Cvar v ->
      begin try
        Tbl.find v env
      with Not_found ->
        fatal_error("Selection.emit_expr: unbound var " ^ Ident.name v)
      end
  | Clet(v, e1, e2) ->
      self.emit_expr self (self.emit_let self env v e1) e2
  | Cassign(v, e1) ->
      let rv =
        try
          Tbl.find v env
        with Not_found ->
          fatal_error ("Selection.emit_expr: unbound var " ^ Ident.name v) in
      let r1 = self.emit_expr self env e1 in
      self.insert_moves self r1 rv;
      [||]
  | Ctuple [] ->
      [||]
  | Ctuple exp_list ->
      let (simple_list, ext_env) = self.emit_parts_list self env exp_list in
      self.emit_tuple self ext_env simple_list
  | Cop(Cproj(ofs, len), [Cop(Cload ty, [arg])]) ->
      let byte_offset = size_machtype(Array.sub ty 0 ofs) in
      self.emit_expr self env
        (Cop(Cload(Array.sub ty ofs len),
             [Cop(Cadda, [arg; Cconst_int byte_offset])]))
  | Cop(Cproj(ofs, len), [arg]) ->
      let r = self.emit_expr self env arg in
      Array.sub r ofs len
  | Cop(Craise, [arg]) ->
      let r1 = self.emit_expr self  env arg in
      let rd = [|Proc.loc_exn_bucket|] in
      self.insert (Iop Imove) r1 rd;
      self.insert Iraise rd [||];
      [||]
  | Cop(Ccmpf comp, args) ->
      self.emit_expr self  env (Cifthenelse(exp, Cconst_int 1, Cconst_int 0))
  | Cop(op, args) ->
      let (simple_args, env) = self.emit_parts_list self env args in
      let ty = oper_result_type op in
      let (new_op, new_args) = self.select_operation self op simple_args in
      begin match new_op with
        Icall_ind ->
          Proc.contains_calls := true;
          let r1 = self.emit_tuple self env new_args in
          let rarg = Array.sub r1 1 (Array.length r1 - 1) in
          let rd = Reg.createv ty in
          let (loc_arg, stack_ofs) = Proc.loc_arguments rarg in
          let loc_res = Proc.loc_results rd in
          self.insert_move_args self rarg loc_arg stack_ofs;
          self.insert (Iop Icall_ind)
                      (Array.append [|r1.(0)|] loc_arg) loc_res;
          self.insert_move_results self loc_res rd stack_ofs;
          rd
      | Icall_imm lbl ->
          Proc.contains_calls := true;
          let r1 = self.emit_tuple self env new_args in
          let rd = Reg.createv ty in
          let (loc_arg, stack_ofs) = Proc.loc_arguments r1 in
          let loc_res = Proc.loc_results rd in
          self.insert_move_args self r1 loc_arg stack_ofs;
          self.insert (Iop(Icall_imm lbl)) loc_arg loc_res;
          self.insert_move_results self loc_res rd stack_ofs;
          rd
      | Iextcall(lbl, alloc) ->
          Proc.contains_calls := true;
          let (loc_arg, stack_ofs) = self.emit_extcall_args self env new_args in
          let rd = Reg.createv ty in
          let loc_res = Proc.loc_external_results rd in
          self.insert (Iop(Iextcall(lbl, alloc))) loc_arg loc_res;
          self.insert_move_results self loc_res rd stack_ofs;
          rd
      | Ialloc _ ->
          Proc.contains_calls := true;
          let rd = Reg.createv typ_addr in
          let size = size_expr env (Ctuple new_args) in
          self.insert (Iop(Ialloc size)) [||] rd;
          self.emit_stores self env new_args rd 
            (Arch.offset_addressing Arch.identity_addressing (-Arch.size_int));
          rd
      | op ->
          let r1 = self.emit_tuple self env new_args in
          let rd = Reg.createv ty in
          self.insert_op self op r1 rd
      end        
  | Csequence(e1, e2) ->
      self.emit_expr self  env e1;
      self.emit_expr self  env e2
  | Cifthenelse(econd, eif, eelse) ->
      let (cond, earg) = self.select_condition self econd in
      let rarg = self.emit_expr self  env earg in
      let (rif, sif) = self.emit_sequence env eif in
      let (relse, selse) = self.emit_sequence env eelse in
      let r = join rif sif relse selse in
      self.insert (Iifthenelse(cond, sif.extract, selse.extract)) rarg [||];
      r
  | Cswitch(esel, index, ecases) ->
      let rsel = self.emit_expr self  env esel in
      let rscases = Array.map (self.emit_sequence env) ecases in
      let r = join_array rscases in
      self.insert (Iswitch(index, Array.map (fun (r, s) -> s.extract) rscases))
                  rsel [||];
      r
  | Cloop(ebody) ->
      let (rarg, sbody) = self.emit_sequence env ebody in
      self.insert (Iloop(sbody.extract)) [||] [||];
      [||]
  | Ccatch(e1, e2) ->
      let (r1, s1) = self.emit_sequence env e1 in
      let (r2, s2) = self.emit_sequence env e2 in
      let r = join r1 s1 r2 s2 in
      self.insert (Icatch(s1.extract, s2.extract)) [||] [||];
      r
  | Cexit ->
      self.insert Iexit [||] [||];
      [||]
  | Ctrywith(e1, v, e2) ->
      Proc.contains_calls := true;
      let (r1, s1) = self.emit_sequence env e1 in
      let rv = Reg.createv typ_addr in
      let (r2, s2) = self.emit_sequence (Tbl.add v rv env) e2 in
      let r = join r1 s1 r2 s2 in
      self.insert
        (Itrywith(s1.extract,
                  instr_cons (Iop Imove) [|Proc.loc_exn_bucket|] rv
                             s2.extract))
        [||] [||];
      r
 );

 emit_sequence = (fun env exp ->
  let s =
   (* {< instr_seq = dummy_instr >}  *)
    failwith "Selectgen.emit_sequence:TODO"
  in
  let r = s.emit_expr s env exp in
  (r, s)
 );

 emit_let = (fun self env v e1 ->
  let r1 = self.emit_expr self  env e1 in
  if all_regs_anonymous r1 then begin
    name_regs v r1;
    Tbl.add v r1 env
  end else begin
    let rv = Array.create (Array.length r1) Reg.dummy in
    for i = 0 to Array.length r1 - 1 do rv.(i) <- Reg.create r1.(i).typ done;
    name_regs v rv;
    self.insert_moves self r1 rv;
    Tbl.add v rv env
  end
 );

 emit_parts = (fun self env exp ->
  if is_simple_expr exp then
    (exp, env)
  else begin
    let r = self.emit_expr self  env exp in
    if Array.length r = 0 then
      (Ctuple [], env)
    else begin
      let id = Ident.create "bind" in
      if all_regs_anonymous r then
        (Cvar id, Tbl.add id r env)
      else begin
        let rv = Array.create (Array.length r) Reg.dummy in
        for i = 0 to Array.length r - 1 do
          rv.(i) <- Reg.create r.(i).typ
        done;
        self.insert_moves self r rv;
        (Cvar id, Tbl.add id rv env)
      end          
    end
  end
 );

 emit_parts_list = (fun self env exp_list ->
  match exp_list with
    [] -> ([], env)
  | exp :: rem ->
      (* This ensures right-to-left evaluation, consistent with the
         bytecode compiler *)
      let (new_rem, new_env) = self.emit_parts_list self env rem in
      let (new_exp, fin_env) = self.emit_parts self new_env exp in
      (new_exp :: new_rem, fin_env)
 );

 emit_tuple = (fun self env exp_list ->
  let rec emit_list = function
    [] -> []
  | exp :: rem ->
      (* Again, force right-to-left evaluation *)
      let loc_rem = emit_list rem in
      let loc_exp = self.emit_expr self  env exp in
      loc_exp :: loc_rem in
  Array.concat(emit_list exp_list)
 );

 emit_extcall_args = (fun self env args ->
  let r1 = self.emit_tuple self env args in
  let (loc_arg, stack_ofs as arg_stack) = Proc.loc_external_arguments r1 in
  self.insert_move_args self r1 loc_arg stack_ofs;
  arg_stack
 );

 emit_stores = (fun self env data regs_addr addr ->
  let a = ref addr in
  List.iter
    (fun e ->
      let (op, arg) = self.select_store !a e in
      let r = self.emit_expr self  env arg in
      self.insert (Iop op) (Array.append r regs_addr) [||];
      a := Arch.offset_addressing !a (size_expr env e))
    data
 );

(* Same, but in tail position *)

 emit_return = (fun self env exp ->
  let r = self.emit_expr self  env exp in
  let loc = Proc.loc_results r in
  self.insert_moves self r loc;
  self.insert Ireturn loc [||]
 );

 emit_tail = (fun self env exp ->
  match exp with
    Clet(v, e1, e2) ->
      self.emit_tail self (self.emit_let self env v e1) e2
  | Cop(Capply ty as op, args) ->
      let (simple_args, env) = self.emit_parts_list self env args in
      let (new_op, new_args) = self.select_operation self op simple_args in
      begin match new_op with
        Icall_ind ->
          let r1 = self.emit_tuple self env new_args in
          let rarg = Array.sub r1 1 (Array.length r1 - 1) in
          let (loc_arg, stack_ofs) = Proc.loc_arguments rarg in
          if stack_ofs = 0 then begin
            self.insert_moves self rarg loc_arg;
            self.insert (Iop Itailcall_ind)
                        (Array.append [|r1.(0)|] loc_arg) [||]
          end else begin
            Proc.contains_calls := true;
            let rd = Reg.createv ty in
            let loc_res = Proc.loc_results rd in
            self.insert_move_args self rarg loc_arg stack_ofs;
            self.insert (Iop Icall_ind)
                        (Array.append [|r1.(0)|] loc_arg) loc_res;
            self.insert(Iop(Istackoffset(-stack_ofs))) [||] [||];
            self.insert Ireturn loc_res [||]
          end
      | Icall_imm lbl ->
          let r1 = self.emit_tuple self env new_args in
          let (loc_arg, stack_ofs) = Proc.loc_arguments r1 in
          if stack_ofs = 0 then begin
            self.insert_moves self r1 loc_arg;
            self.insert (Iop(Itailcall_imm lbl)) loc_arg [||]
          end else begin
            Proc.contains_calls := true;
            let rd = Reg.createv ty in
            let loc_res = Proc.loc_results rd in
            self.insert_move_args self r1 loc_arg stack_ofs;
            self.insert (Iop(Icall_imm lbl)) loc_arg loc_res;
            self.insert(Iop(Istackoffset(-stack_ofs))) [||] [||];
            self.insert Ireturn loc_res [||]
          end
      | _ -> fatal_error "Selection.emit_tail"
      end
  | Cop(Craise, [e1]) ->
      let r1 = self.emit_expr self  env e1 in
      let rd = [|Proc.loc_exn_bucket|] in
      self.insert (Iop Imove) r1 rd;
      self.insert Iraise rd [||]
  | Csequence(e1, e2) ->
      self.emit_expr self env e1;
      self.emit_tail self env e2
  | Cifthenelse(econd, eif, eelse) ->
      let (cond, earg) = self.select_condition self econd in
      let rarg = self.emit_expr self  env earg in
      self.insert (Iifthenelse(cond, self.emit_tail_sequence self env eif,
                                     self.emit_tail_sequence self env eelse))
                  rarg [||]
  | Cswitch(esel, index, ecases) ->
      let rsel = self.emit_expr self  env esel in
      self.insert
        (Iswitch(index, Array.map (self.emit_tail_sequence self env) ecases))
        rsel [||]
  | Ccatch(e1, e2) ->
      self.insert (Icatch(self.emit_tail_sequence self env e1,
                          self.emit_tail_sequence self env e2))
                  [||] [||]
  | Cexit ->
      self.insert Iexit [||] [||]
  | Ctrywith(e1, v, e2) ->
      Proc.contains_calls := true;
      let (r1, s1) = self.emit_sequence env e1 in
      let rv = Reg.createv typ_addr in
      let s2 = self.emit_tail_sequence self (Tbl.add v rv env) e2 in
      let loc = Proc.loc_results r1 in
      self.insert
        (Itrywith(s1.extract,
                  instr_cons (Iop Imove) [|Proc.loc_exn_bucket|] rv s2))
        [||] [||];
      self.insert_moves self r1 loc;
      self.insert Ireturn loc [||]
  | _ ->
      self.emit_return self env exp
 );

 emit_tail_sequence = (fun self env exp ->
  let s = 
   (* {< instr_seq = dummy_instr >}  *)
    failwith "emit_tail_sequence:TODO"
  in
  s.emit_tail s env exp;
  s.extract
 );

(* Sequentialization of a function definition *)

 emit_fundecl = (fun self f ->
  Proc.contains_calls := false;
  let rargs =
    List.map
      (fun (id, ty) -> let r = Reg.createv ty in name_regs id r; r)
      f.Cmm.fun_args in
  let rarg = Array.concat rargs in
  let loc_arg = Proc.loc_parameters rarg in
  let env =
    List.fold_right2
      (fun (id, ty) r env -> Tbl.add id r env)
      f.Cmm.fun_args rargs Tbl.empty in
  self.insert_moves self loc_arg rarg;
  self.emit_tail self env f.Cmm.fun_body;
  { fun_name = f.Cmm.fun_name;
    fun_args = loc_arg;
    fun_body = self.extract;
    fun_fast = f.Cmm.fun_fast }
 );

  select_floatarith = (fun _ -> failwith "select_floatarith");
  select_push = (fun _ -> failwith "select_floatarith");
 }
@


%-------------------------------------------------------------

<<asmcomp/selectgen.ml>>=
<<copyright header>>

(* Selection of pseudo-instructions, assignment of pseudo-registers,
   sequentialization. *)

open Misc
open Cmm
open Reg
open Mach

<<type Selectgen.environment (asmcomp/selectgen.ml)>>

<<type Selectgen.selector (asmcomp/selectgen.ml)>>




<<function Selectgen.oper_result_type>>

<<function Selectgen.size_expr>>

<<function Selectgen.is_simple_expr>>

<<function Selectgen.swap_intcomp>>

<<function Selectgen.all_regs_anonymous>>

<<function Selectgen.name_regs>>

<<function Selectgen.join>>

<<function Selectgen.join_array>>

<<function Selectgen.selector_generic>>

@


\subsection*{[[asmcomp/cmmgen.mli]]}

<<signature Cmmgen.compunit>>=
(* Translation from closed lambda to C-- *)

val compunit: int -> Clambda.ulambda -> Cmm.phrase list
@

<<signature Cmmgen.apply_function>>=
val apply_function: int -> Cmm.phrase
@

<<signature Cmmgen.curry_function>>=
val curry_function: int -> Cmm.phrase list
@

<<signature Cmmgen.entry_point>>=
val entry_point: string list -> Cmm.phrase
@

<<signature Cmmgen.global_table>>=
val global_table: string list -> Cmm.phrase
@

<<signature Cmmgen.frame_table>>=
val frame_table: string list -> Cmm.phrase
@

<<signature Cmmgen.data_segment_table>>=
val data_segment_table: string list -> Cmm.phrase
@

<<signature Cmmgen.code_segment_table>>=
val code_segment_table: string list -> Cmm.phrase
@

<<signature Cmmgen.predef_exception>>=
val predef_exception: string -> Cmm.phrase
@


%-------------------------------------------------------------

<<asmcomp/cmmgen.mli>>=
<<copyright header>>

<<signature Cmmgen.compunit>>

<<signature Cmmgen.apply_function>>
<<signature Cmmgen.curry_function>>
<<signature Cmmgen.entry_point>>
<<signature Cmmgen.global_table>>
<<signature Cmmgen.frame_table>>
<<signature Cmmgen.data_segment_table>>
<<signature Cmmgen.code_segment_table>>
<<signature Cmmgen.predef_exception>>
@


\subsection*{[[asmcomp/cmmgen.ml]]}

<<function Cmmgen.bind>>=
(* Local binding of complex expressions *)

let bind name arg fn =
  match arg with
    Cvar _ | Cconst_int _ | Cconst_natint _ | Cconst_symbol _
  | Cconst_pointer _ -> fn arg
  | _ -> let id = Ident.create name in Clet(id, arg, fn (Cvar id))
@

<<constant Cmmgen.float_tag>>=
(* Block headers. Meaning of the tag field:
       0 - 248: regular blocks
       249: infix closure
       250: closures
       251: abstract
       252: string
       253: float
       254: float array
       255: finalized *)

let float_tag = Cconst_int 253
@

<<constant Cmmgen.floatarray_tag>>=
let floatarray_tag = Cconst_int 254
@

<<function Cmmgen.block_header>>=
let block_header tag sz =
  Nativeint.add (Nativeint.shift (Nativeint.from sz) 10) (Nativeint.from tag)
@

<<function Cmmgen.closure_header>>=
let closure_header sz = block_header 250 sz
@

<<function Cmmgen.infix_header>>=
let infix_header ofs = block_header 249 ofs
@

<<constant Cmmgen.float_header>>=
let float_header = block_header 253 (size_float / size_addr)
@

<<function Cmmgen.floatarray_header>>=
let floatarray_header len = block_header 254 (len * size_float / size_addr)
@

<<function Cmmgen.string_header>>=
let string_header len = block_header 252 ((len + size_addr) / size_addr)
@

<<function Cmmgen.alloc_block_header>>=
let alloc_block_header tag sz = Cconst_natint(block_header tag sz)
@

<<constant Cmmgen.alloc_float_header>>=
let alloc_float_header = Cconst_natint(float_header)
@

<<function Cmmgen.alloc_floatarray_header>>=
let alloc_floatarray_header len = Cconst_natint(floatarray_header len)
@

<<function Cmmgen.alloc_closure_header>>=
let alloc_closure_header sz = Cconst_natint(closure_header sz)
@

<<function Cmmgen.alloc_infix_header>>=
let alloc_infix_header ofs = Cconst_natint(infix_header ofs)
@

<<constant Cmmgen.max_repr_int>>=
(* Integers *)

let max_repr_int = max_int asr 1
@

<<constant Cmmgen.min_repr_int>>=
let min_repr_int = min_int asr 1
@

<<function Cmmgen.int_const>>=
let int_const n =
  if n <= max_repr_int & n >= min_repr_int
  then Cconst_int((n lsl 1) + 1)
  else Cconst_natint(Nativeint.add (Nativeint.shift (Nativeint.from n) 1)
                                   (Nativeint.from 1))
@

<<function Cmmgen.add_const>>=
let add_const c n =
  if n = 0 then c else Cop(Caddi, [c; Cconst_int n])
@

<<function Cmmgen.incr_int>>=
let incr_int = function
    Cconst_int n when n < max_int -> Cconst_int(n+1)
  | Cop(Caddi, [c; Cconst_int n]) when n < max_int -> add_const c (n+1)
  | c -> add_const c 1
@

<<function Cmmgen.decr_int>>=
let decr_int = function
    Cconst_int n when n > min_int -> Cconst_int(n-1)
  | Cop(Caddi, [c; Cconst_int n]) when n > min_int -> add_const c (n-1)
  | c -> add_const c (-1)
@

<<function Cmmgen.add_int>>=
let add_int c1 c2 =
  match (c1, c2) with
    (Cop(Caddi, [c1; Cconst_int n1]),
     Cop(Caddi, [c2; Cconst_int n2])) when no_overflow_add n1 n2 ->
      add_const (Cop(Caddi, [c1; c2])) (n1 + n2)
  | (Cop(Caddi, [c1; Cconst_int n1]), c2) ->
      add_const (Cop(Caddi, [c1; c2])) n1
  | (c1, Cop(Caddi, [c2; Cconst_int n2])) ->
      add_const (Cop(Caddi, [c1; c2])) n2
  | (c1, c2) ->
      Cop(Caddi, [c1; c2])
@

<<function Cmmgen.sub_int>>=
let sub_int c1 c2 =
  match (c1, c2) with
    (Cop(Caddi, [c1; Cconst_int n1]),
     Cop(Caddi, [c2; Cconst_int n2])) when no_overflow_sub n1 n2 ->
      add_const (Cop(Csubi, [c1; c2])) (n1 - n2)
  | (Cop(Caddi, [c1; Cconst_int n1]), c2) ->
      add_const (Cop(Csubi, [c1; c2])) n1
  | (c1, Cop(Caddi, [c2; Cconst_int n2])) when n2 <> min_int ->
      add_const (Cop(Csubi, [c1; c2])) (-n2)
  | (c1, Cconst_int n) when n <> min_int ->
      add_const c1 (-n)
  | (c1, c2) ->
      Cop(Csubi, [c1; c2])
@

<<function Cmmgen.tag_int>>=
let tag_int = function
    Cconst_int n -> int_const n
  | c -> Cop(Caddi, [Cop(Clsl, [c; Cconst_int 1]); Cconst_int 1])
@

<<function Cmmgen.untag_int>>=
let untag_int = function
    Cconst_int n -> Cconst_int(n asr 1)
  | Cop(Caddi, [Cop(Clsl, [c; Cconst_int 1]); Cconst_int 1]) -> c
  | c -> Cop(Casr, [c; Cconst_int 1])
@

<<function Cmmgen.test_bool>>=
(* Bool *)

let test_bool = function
    Cop(Caddi, [Cop(Clsl, [c; Cconst_int 1]); Cconst_int 1]) -> c
  | Cop(Clsl, [c; Cconst_int 1]) -> c
  | c -> Cop(Ccmpi Cne, [c; Cconst_int 1])
@

<<function Cmmgen.box_float>>=
(* Float *)

let box_float c = Cop(Calloc, [alloc_float_header; c])
@

<<function Cmmgen.unbox_float>>=
let unbox_float = function
    Cop(Calloc, [header; c]) -> c
  | c -> Cop(Cload typ_float, [c])
@

<<function Cmmgen.is_unboxed_float>>=
let is_unboxed_float = function
    Uconst(Const_base(Const_float f)) -> true
  | Uprim(p, _) ->
      begin match p with
          Pccall p -> p.prim_native_float
        | Pfloatfield _ | Pfloatofint | Pnegfloat | Pabsfloat
        | Paddfloat | Psubfloat | Pmulfloat | Pdivfloat
        | Parrayrefu Pfloatarray | Parrayrefs Pfloatarray -> true
        | _ -> false
      end
  | _ -> false
@

<<exception Cmmgen.Cannot_subst_float>>=
exception Cannot_subst_float
@

<<function Cmmgen.subst_boxed_float>>=
let subst_boxed_float boxed_id unboxed_id exp =
  let need_boxed = ref false in
  let assigned = ref false in
  let rec subst = function
      Cvar id as e ->
        if Ident.same id boxed_id then need_boxed := true; e
    | Clet(id, arg, body) -> Clet(id, subst arg, subst body)
    | Cassign(id, arg) -> 
        if Ident.same id boxed_id then begin
          assigned := true;
          Cassign(unboxed_id, subst(unbox_float arg))
        end else
          Cassign(id, subst arg)
    | Ctuple argl -> Ctuple(List.map subst argl)
    | Cop(Cload _, [Cvar id]) as e ->
        if Ident.same id boxed_id then Cvar unboxed_id else e
    | Cop(op, argl) -> Cop(op, List.map subst argl)
    | Csequence(e1, e2) -> Csequence(subst e1, subst e2)
    | Cifthenelse(e1, e2, e3) -> Cifthenelse(subst e1, subst e2, subst e3)
    | Cswitch(arg, index, cases) ->
        Cswitch(subst arg, index, Array.map subst cases)
    | Cloop e -> Cloop(subst e)
    | Ccatch(e1, e2) -> Ccatch(subst e1, subst e2)
    | Ctrywith(e1, id, e2) -> Ctrywith(subst e1, id, subst e2)
    | e -> e in
  let res = subst exp in
  (res, !need_boxed, !assigned)  
@

<<function Cmmgen.return_unit>>=
(* Unit *)

let return_unit c = Csequence(c, Cconst_pointer 1)
@

<<function Cmmgen.remove_unit>>=
let rec remove_unit = function
    Cconst_pointer 1 -> Ctuple []
  | Csequence(c, Cconst_pointer 1) -> c
  | Csequence(c1, c2) ->
      Csequence(c1, remove_unit c2)
  | Cifthenelse(cond, ifso, ifnot) ->
      Cifthenelse(cond, remove_unit ifso, remove_unit ifnot)
  | Cswitch(sel, index, cases) ->
      Cswitch(sel, index, Array.map remove_unit cases)
  | Ccatch(body, handler) ->
      Ccatch(remove_unit body, remove_unit handler)
  | Ctrywith(body, exn, handler) ->
      Ctrywith(remove_unit body, exn, remove_unit handler)
  | Clet(id, c1, c2) ->
      Clet(id, c1, remove_unit c2)
  | Cop(Capply mty, args) ->
      Cop(Capply [||], args)
  | Cop(Cextcall(proc, mty, alloc), args) ->
      Cop(Cextcall(proc, [||], alloc), args)
  | Cexit -> Cexit
  | Ctuple [] as c -> c
  | c -> Csequence(c, Ctuple [])
@

<<function Cmmgen.field_address>>=
(* Access to block fields *)

let field_address ptr n =
  if n = 0
  then ptr
  else Cop(Cadda, [ptr; Cconst_int(n * size_addr)])
@

<<function Cmmgen.get_field>>=
let get_field ptr n =
  Cop(Cload typ_addr, [field_address ptr n])
@

<<function Cmmgen.set_field>>=
let set_field ptr n newval =
  Cop(Cstore, [field_address ptr n; newval])
@

<<function Cmmgen.header>>=
let header ptr =
  Cop(Cload typ_int, [Cop(Cadda, [ptr; Cconst_int(-size_int)])])
@

<<constant Cmmgen.tag_offset>>=
let tag_offset =
  if big_endian then -1 else -size_int
@

<<function Cmmgen.get_tag>>=
let get_tag ptr =
  if Proc.word_addressed then           (* If byte loads are slow *)
    Cop(Cand, [header ptr; Cconst_int 255])
  else                                  (* If byte loads are efficient *)
    Cop(Cloadchunk Byte_unsigned,
        [Cop(Cadda, [ptr; Cconst_int(tag_offset)])])
@

<<constant Cmmgen.log2_size_addr>>=
(* Array indexing *)

let log2_size_addr = Misc.log2 size_addr
@

<<constant Cmmgen.log2_size_float>>=
let log2_size_float = Misc.log2 size_float
@

<<constant Cmmgen.wordsize_shift>>=
let wordsize_shift = 9
@

<<constant Cmmgen.numfloat_shift>>=
let numfloat_shift = 9 + log2_size_float - log2_size_addr
@

<<function Cmmgen.is_addr_array>>=
let is_addr_array hdr =
  Cop(Ccmpi Cne, [Cop(Cand, [hdr; Cconst_int 255]); floatarray_tag])
@

<<function Cmmgen.addr_array_length>>=
let addr_array_length hdr = Cop(Clsr, [hdr; Cconst_int wordsize_shift])
@

<<function Cmmgen.float_array_length>>=
let float_array_length hdr = Cop(Clsr, [hdr; Cconst_int numfloat_shift])
@

<<function Cmmgen.lsl_const>>=
let lsl_const c n =
  Cop(Clsl, [c; Cconst_int n])
@

<<function Cmmgen.array_indexing>>=
let array_indexing log2size ptr ofs =
  match ofs with
    Cconst_int n ->
      let i = n asr 1 in
      if i = 0 then ptr else Cop(Cadda, [ptr; Cconst_int(i lsl log2size)])
  | Cop(Caddi, [Cop(Clsl, [c; Cconst_int 1]); Cconst_int 1]) ->
      Cop(Cadda, [ptr; lsl_const c log2size])
  | Cop(Caddi, [c; Cconst_int n]) ->
      Cop(Cadda, [Cop(Cadda, [ptr; lsl_const c (log2size - 1)]);
                  Cconst_int((n-1) lsl (log2size - 1))])
  | _ ->
      Cop(Cadda, [Cop(Cadda, [ptr; lsl_const ofs (log2size - 1)]);
                  Cconst_int((-1) lsl (log2size - 1))])
@

<<function Cmmgen.addr_array_ref>>=
let addr_array_ref arr ofs =
  Cop(Cload typ_addr, [array_indexing log2_size_addr arr ofs])
@

<<function Cmmgen.unboxed_float_array_ref>>=
let unboxed_float_array_ref arr ofs =
  Cop(Cload typ_float, [array_indexing log2_size_float arr ofs])
@

<<function Cmmgen.float_array_ref>>=
let float_array_ref arr ofs =
  box_float(unboxed_float_array_ref arr ofs)
@

<<function Cmmgen.addr_array_set>>=
let addr_array_set arr ofs newval =
  Cop(Cextcall("modify", typ_void, false),
      [array_indexing log2_size_addr arr ofs; newval])
@

<<function Cmmgen.int_array_set>>=
let int_array_set arr ofs newval =
  Cop(Cstore, [array_indexing log2_size_addr arr ofs; newval])
@

<<function Cmmgen.float_array_set>>=
let float_array_set arr ofs newval =
  Cop(Cstore, [array_indexing log2_size_float arr ofs; newval])
@

<<function Cmmgen.string_length>>=
(* String length *)

let string_length exp =
  bind "str" exp (fun str ->
    let tmp_var = Ident.create "tmp" in
    Clet(tmp_var,
         Cop(Csubi,
             [Cop(Clsl,
                  [Cop(Clsr, [get_field str (-1); Cconst_int 10]);
                   Cconst_int log2_size_addr]);
              Cconst_int 1]),
         Cop(Csubi,
             [Cvar tmp_var;
              Cop(Cloadchunk Byte_unsigned,
                  [Cop(Cadda, [str; Cvar tmp_var])])])))
@

<<function Cmmgen.fundecls_size>>=
(* To compile "let rec" over values *)

let fundecls_size fundecls =
  let sz = ref (-1) in
  List.iter
    (fun (label, arity, params, body) ->
      sz := !sz + 1 + (if arity = 1 then 2 else 3))
    fundecls;
  !sz
@

<<function Cmmgen.expr_size_and_tag>>=
let rec expr_size_and_tag = function
    Uclosure(fundecls, clos_vars) ->
      (fundecls_size fundecls + List.length clos_vars, 250)
  | Uprim(Pmakeblock(tag, mut), args) ->
      (List.length args, tag)
  | Uprim(Pmakearray(Paddrarray | Pintarray), args) ->
      (List.length args, 0)
  | Ulet(id, exp, body) ->
      expr_size_and_tag body
  | Uletrec(bindings, body) ->
      expr_size_and_tag body
  | _ ->
      fatal_error "Cmmgen.expr_size_and_tag"
@

<<function Cmmgen.dummy_block>>=
let dummy_block (size, tag) =
  let rec init_val i =
    if i >= size then [] else Cconst_int 0 :: init_val(i+1) in
  Cop(Calloc, alloc_block_header tag size :: init_val 0)
@

<<function Cmmgen.apply_function>>=
(* Record application and currying functions *)

let apply_function n =
  Compilenv.need_apply_fun n; "caml_apply" ^ string_of_int n
@

<<function Cmmgen.curry_function>>=
let curry_function n =
  Compilenv.need_curry_fun n;
  if n >= 0
  then "caml_curry" ^ string_of_int n
  else "caml_tuplify" ^ string_of_int (-n)
@

<<function Cmmgen.transl_comparison>>=
(* Comparisons *)

let transl_comparison = function
    Lambda.Ceq -> Ceq
  | Lambda.Cneq -> Cne
  | Lambda.Cge -> Cge
  | Lambda.Cgt -> Cgt
  | Lambda.Cle -> Cle
  | Lambda.Clt -> Clt
@

<<constant Cmmgen.const_label>>=
(* Translate structured constants *)

let const_label = ref 0
@

<<function Cmmgen.new_const_label>>=
let new_const_label () =
  incr const_label;
  !const_label
@

<<function Cmmgen.new_const_symbol>>=
let new_const_symbol () =
  incr const_label;
  Compilenv.current_unit_name () ^ "_" ^ string_of_int !const_label
@

<<constant Cmmgen.structured_constants>>=
let structured_constants =
@

<<function Cmmgen.transl_constant>>=
let transl_constant = function
    Const_base(Const_int n) ->
      int_const n
  | Const_base(Const_char c) ->
      Cconst_int(((Char.code c) lsl 1) + 1)
  | Const_pointer n ->
      Cconst_pointer((n lsl 1) + 1)
  | cst ->
      let lbl =
        try
          Hashtbl.find structured_constants cst
        with Not_found ->
          let lbl = new_const_symbol() in
          Hashtbl.add structured_constants cst lbl;
          lbl
      in Cconst_symbol lbl
@

<<constant Cmmgen.functions>>=
(* Translate an expression *)

let functions = (Queue.create() : (string * Ident.t list * ulambda) Queue.t)
@

<<function Cmmgen.transl_function>>=
(* Translate a function definition *)

let transl_function lbl params body =
  Cfunction {fun_name = lbl;
             fun_args = List.map (fun id -> (id, typ_addr)) params;
             fun_body = transl body;
             fun_fast = !Clflags.optimize_for_speed}
@

<<function Cmmgen.transl_all_functions>>=
let rec transl_all_functions already_translated cont =
  try
    let (lbl, params, body) = Queue.take functions in
    if StringSet.mem lbl already_translated then
      transl_all_functions already_translated cont
    else
      transl_all_functions (StringSet.add lbl already_translated)
                           (transl_function lbl params body :: cont)
  with Queue.Empty ->
    cont
@

<<function Cmmgen.emit_all_constants>>=
(* Emit all structured constants *)

let emit_all_constants cont =
  let c = ref cont in
  Hashtbl.iter
    (fun cst lbl -> c := Cdata(emit_constant lbl cst []) :: !c)
    structured_constants;
  Hashtbl.clear structured_constants;
  !c
@

<<function Cmmgen.compunit>>=
(* Translate a compilation unit *)

let compunit size ulam =
  let glob = Compilenv.current_unit_name () in
  let init_code = transl ulam in
  let c1 = [Cfunction {fun_name = glob ^ "_entry"; fun_args = [];
                       fun_body = init_code; fun_fast = false}] in
  let c2 = transl_all_functions StringSet.empty c1 in
  let c3 = emit_all_constants c2 in
  Cdata [Cint(block_header 0 size);
         Cdefine_symbol glob;
         Cskip(size * size_addr)] :: c3
@

<<function Cmmgen.apply_function (asmcomp/cmmgen.ml)>>=
(* Generate an application function:
     (defun caml_applyN (a1 ... aN clos)
       (if (= clos.arity N)
         (app clos.direct a1 ... aN clos)
         (let (clos1 (app clos.code a1 clos)
               clos2 (app clos1.code a2 clos)
               ...
               closN-1 (app closN-2.code aN-1 closN-2))
           (app closN-1.code aN closN-1))))
*)

let apply_function arity =
  let arg = Array.create arity (Ident.create "arg") in
  for i = 1 to arity - 1 do arg.(i) <- Ident.create "arg" done;
  let clos = Ident.create "clos" in
  let rec app_fun clos n =
    if n = arity-1 then
      Cop(Capply typ_addr,
          [get_field (Cvar clos) 0; Cvar arg.(n); Cvar clos])
    else begin
      let newclos = Ident.create "clos" in
      Clet(newclos,
           Cop(Capply typ_addr,
               [get_field (Cvar clos) 0; Cvar arg.(n); Cvar clos]),
           app_fun newclos (n+1))
    end in
  let all_args = Array.to_list arg @ [clos] in
  let body =
    Cifthenelse(
      Cop(Ccmpi Ceq, [get_field (Cvar clos) 1; int_const arity]),
      Cop(Capply typ_addr,
          get_field (Cvar clos) 2 :: List.map (fun s -> Cvar s) all_args),
      app_fun clos 0) in
  Cfunction
   {fun_name = "caml_apply" ^ string_of_int arity;
    fun_args = List.map (fun id -> (id, typ_addr)) all_args;
    fun_body = body;
    fun_fast = true}
@

<<function Cmmgen.tuplify_function>>=
(* Generate tuplifying functions:
      (defun caml_tuplifyN (arg clos)
        (app clos.direct #0(arg) ... #N-1(arg) clos)) *)

let tuplify_function arity =
  let arg = Ident.create "arg" in
  let clos = Ident.create "clos" in
  let rec access_components i =
    if i >= arity
    then []
    else get_field (Cvar arg) i :: access_components(i+1) in
  Cfunction
   {fun_name = "caml_tuplify" ^ string_of_int arity;
    fun_args = [arg, typ_addr; clos, typ_addr];
    fun_body =
      Cop(Capply typ_addr,
          get_field (Cvar clos) 2 :: access_components 0 @ [Cvar clos]);
    fun_fast = true}
@

<<function Cmmgen.final_curry_function>>=
(* Generate currying functions:
      (defun caml_curryN (arg clos)
         (alloc HDR caml_curryN_1 arg clos))
      (defun caml_curryN_1 (arg clos)
         (alloc HDR caml_curryN_2 arg clos))
      ...
      (defun caml_curryN_N-1 (arg clos)
         (let (closN-2 clos.cdr
               closN-3 closN-2.cdr
               ...
               clos1 clos2.cdr
               clos clos1.cdr)
           (app clos.direct
                clos1.car clos2.car ... closN-2.car clos.car arg clos))) *)

let final_curry_function arity =
  let last_arg = Ident.create "arg" in
  let last_clos = Ident.create "clos" in
  let rec curry_fun args clos n =
    if n = 0 then
      Cop(Capply typ_addr,
          get_field (Cvar clos) 2 ::
          args @ [Cvar last_arg; Cvar clos])
    else begin
      let newclos = Ident.create "clos" in
      Clet(newclos,
           get_field (Cvar clos) 3,
           curry_fun (get_field (Cvar clos) 2 :: args) newclos (n-1))
    end in
  Cfunction
   {fun_name = "caml_curry" ^ string_of_int arity ^
               "_" ^ string_of_int (arity-1);
    fun_args = [last_arg, typ_addr; last_clos, typ_addr];
    fun_body = curry_fun [] last_clos (arity-1);
    fun_fast = true}
@

<<function Cmmgen.intermediate_curry_functions>>=
let rec intermediate_curry_functions arity num =
  if num = arity - 1 then
    [final_curry_function arity]
  else begin
    let name1 = "caml_curry" ^ string_of_int arity in
    let name2 = if num = 0 then name1 else name1 ^ "_" ^ string_of_int num in
    let arg = Ident.create "arg" and clos = Ident.create "clos" in
    Cfunction
     {fun_name = name2;
      fun_args = [arg, typ_addr; clos, typ_addr];
      fun_body = Cop(Calloc,
                     [alloc_closure_header 4; 
                      Cconst_symbol(name1 ^ "_" ^ string_of_int (num+1));
                      int_const 1; Cvar arg; Cvar clos]);
      fun_fast = true}
    :: intermediate_curry_functions arity (num+1)
  end
@

<<function Cmmgen.curry_function (asmcomp/cmmgen.ml)>>=
let curry_function arity =
  if arity >= 0
  then intermediate_curry_functions arity 0
  else [tuplify_function (-arity)]
@

<<function Cmmgen.entry_point>>=
(* Generate the entry point *)

let entry_point namelist =
  let body =
    List.fold_right
      (fun name next ->
        Csequence(Cop(Capply typ_void, [Cconst_symbol(name ^ "_entry")]),
                  next))
      namelist (Ctuple []) in
  Cfunction {fun_name = "caml_program";
             fun_args = [];
             fun_body = body;
             fun_fast = false}
@

<<constant Cmmgen.cint_zero>>=
(* Generate the table of globals *)

let cint_zero = Cint(Nativeint.from 0)
@

<<function Cmmgen.global_table>>=
let global_table namelist =
  Cdata(Cdefine_symbol "caml_globals" ::
        List.map (fun name -> Csymbol_address name) namelist @
        [cint_zero])
@

<<function Cmmgen.frame_table>>=
(* Generate the master table of frame descriptors *)

let frame_table namelist =
  Cdata(Cdefine_symbol "caml_frametable" ::
        List.map (fun name -> Csymbol_address(name ^ "_frametable")) namelist @
        [cint_zero])
@

<<function Cmmgen.segment_table>>=
(* Generate the table of module data and code segments *)

let segment_table namelist symbol begname endname =
  Cdata(Cdefine_symbol symbol ::
        List.fold_right
          (fun name lst ->
            Csymbol_address(name ^ begname) ::
            Csymbol_address(name ^ endname) :: lst)
          namelist
          [cint_zero])
@

<<function Cmmgen.data_segment_table>>=
let data_segment_table namelist =
  segment_table namelist "caml_data_segments" "_data_begin" "_data_end"
@

<<function Cmmgen.code_segment_table>>=
let code_segment_table namelist =
  segment_table namelist "caml_code_segments" "_code_begin" "_code_end"
@

<<function Cmmgen.predef_exception>>=
(* Initialize a predefined exception *)

let predef_exception name =
  Cdata(emit_constant name (Const_block(0,[Const_base(Const_string name)])) [])
@


%-------------------------------------------------------------

<<asmcomp/cmmgen.ml>>=
<<copyright header>>

(* Translation from closed lambda to C-- *)

open Misc
open Arch
open Asttypes
open Primitive
open Types
open Lambda
open Clambda
open Cmm

<<function Cmmgen.bind>>

<<constant Cmmgen.float_tag>>
<<constant Cmmgen.floatarray_tag>>

<<function Cmmgen.block_header>>
<<function Cmmgen.closure_header>>
<<function Cmmgen.infix_header>>
<<constant Cmmgen.float_header>>
<<function Cmmgen.floatarray_header>>
<<function Cmmgen.string_header>>

<<function Cmmgen.alloc_block_header>>
<<constant Cmmgen.alloc_float_header>>
<<function Cmmgen.alloc_floatarray_header>>
<<function Cmmgen.alloc_closure_header>>
<<function Cmmgen.alloc_infix_header>>

<<constant Cmmgen.max_repr_int>>
<<constant Cmmgen.min_repr_int>>

<<function Cmmgen.int_const>>

<<function Cmmgen.add_const>>

<<function Cmmgen.incr_int>>

<<function Cmmgen.decr_int>>

<<function Cmmgen.add_int>>

<<function Cmmgen.sub_int>>

<<function Cmmgen.tag_int>>

<<function Cmmgen.untag_int>>

<<function Cmmgen.test_bool>>

<<function Cmmgen.box_float>>

<<function Cmmgen.unbox_float>>

<<function Cmmgen.is_unboxed_float>>

<<exception Cmmgen.Cannot_subst_float>>

<<function Cmmgen.subst_boxed_float>>

<<function Cmmgen.return_unit>>

<<function Cmmgen.remove_unit>>

<<function Cmmgen.field_address>>

<<function Cmmgen.get_field>>

<<function Cmmgen.set_field>>

<<function Cmmgen.header>>

<<constant Cmmgen.tag_offset>>

<<function Cmmgen.get_tag>>

<<constant Cmmgen.log2_size_addr>>
<<constant Cmmgen.log2_size_float>>

<<constant Cmmgen.wordsize_shift>>
<<constant Cmmgen.numfloat_shift>>

<<function Cmmgen.is_addr_array>>

<<function Cmmgen.addr_array_length>>
<<function Cmmgen.float_array_length>>

<<function Cmmgen.lsl_const>>

<<function Cmmgen.array_indexing>>

<<function Cmmgen.addr_array_ref>>
<<function Cmmgen.unboxed_float_array_ref>>
<<function Cmmgen.float_array_ref>>

<<function Cmmgen.addr_array_set>>
<<function Cmmgen.int_array_set>>
<<function Cmmgen.float_array_set>>

<<function Cmmgen.string_length>>

<<function Cmmgen.fundecls_size>>

<<function Cmmgen.expr_size_and_tag>>

<<function Cmmgen.dummy_block>>

let rec store_contents ptr = function
    Cop(Calloc, header :: fields) ->
      store_fields ptr 0 fields
  | Clet(id, exp, body) ->
      Clet(id, exp, store_contents ptr body)
  | _ ->
      fatal_error "Cmmgen.store_contents"

and store_fields ptr pos = function
    [] -> Ctuple []
  | c :: rem ->
      let store =
        match c with
          Cconst_int _ | Cconst_symbol _ | Cconst_pointer _ ->
            Cop(Cstore, [field_address ptr pos; c])
        | _ ->
            Cop(Cextcall("modify", typ_void, false),
                [field_address ptr pos; c]) in
      Csequence(store, store_fields ptr (pos + 1) rem)
            

<<function Cmmgen.apply_function>>
<<function Cmmgen.curry_function>>

<<function Cmmgen.transl_comparison>>

<<constant Cmmgen.const_label>>

<<function Cmmgen.new_const_label>>

<<function Cmmgen.new_const_symbol>>

<<constant Cmmgen.structured_constants>>
  (Hashtbl.create 19 : (structured_constant, string) Hashtbl.t)

<<function Cmmgen.transl_constant>>

<<constant Cmmgen.functions>>

let rec transl = function
    Uvar id ->
      Cvar id
  | Uconst sc ->
      transl_constant sc
  | Uclosure(fundecls, clos_vars) ->
      let block_size =
        fundecls_size fundecls + List.length clos_vars in
      let rec transl_fundecls pos = function
        [] ->
          List.map transl clos_vars
      | (label, arity, params, body) :: rem ->
          Queue.add (label, params, body) functions;
          let header =
            if pos = 0
            then alloc_closure_header block_size
            else alloc_infix_header pos in
          if arity = 1 then
            header ::
            Cconst_symbol label ::
            int_const 1 ::
            transl_fundecls (pos + 3) rem
          else
            header ::
            Cconst_symbol(curry_function arity) ::
            int_const arity ::
            Cconst_symbol label ::
            transl_fundecls (pos + 4) rem in
      Cop(Calloc, transl_fundecls 0 fundecls)
  | Uoffset(arg, offset) ->
      field_address (transl arg) offset
  | Udirect_apply(lbl, args) ->
      Cop(Capply typ_addr, Cconst_symbol lbl :: List.map transl args)
  | Ugeneric_apply(clos, [arg]) ->
      bind "fun" (transl clos) (fun clos ->
        Cop(Capply typ_addr, [get_field clos 0; transl arg; clos]))
  | Ugeneric_apply(clos, args) ->
      let arity = List.length args in
      Cop(Capply typ_addr,
          Cconst_symbol(apply_function arity) ::
          List.map transl (args @ [clos]))
  | Ulet(id, exp, body) ->
      if is_unboxed_float exp then begin
        let unboxed_id = Ident.create (Ident.name id) in
        let (tr_body, need_boxed, is_assigned) =
          subst_boxed_float id unboxed_id (transl body) in
        if need_boxed & is_assigned then
          Clet(id, transl exp, transl body)
        else
          Clet(unboxed_id, transl_unbox_float exp,
               if need_boxed
               then Clet(id, box_float(Cvar unboxed_id), tr_body)
               else tr_body)
      end else
        Clet(id, transl exp, transl body)
  | Uletrec(bindings, body) ->
      transl_letrec bindings (transl body)

  (* Primitives *)
  | Uprim(Pidentity, [arg]) ->
      transl arg
  | Uprim(Pgetglobal id, []) ->
      Cconst_symbol(Ident.name id)

  (* Heap blocks *)
  | Uprim(Pmakeblock(tag, mut), []) ->
      transl_constant(Const_block(tag, []))
  | Uprim(Pmakeblock(tag, mut), args) ->
      Cop(Calloc, alloc_block_header tag (List.length args) ::
                  List.map transl args)
  | Uprim(Pfield n, [arg]) ->
      get_field (transl arg) n
  | Uprim(Psetfield(n, ptr), [loc; newval]) ->
      if ptr then
        return_unit(Cop(Cextcall("modify", typ_void, false),
                        [field_address (transl loc) n; transl newval]))
      else
        return_unit(set_field (transl loc) n (transl newval))
  | Uprim(Pfloatfield n, [arg]) ->
      let ptr = transl arg in
      box_float(Cop(Cload typ_float,
                [if n = 0 then ptr
                          else Cop(Cadda, [ptr; Cconst_int(n * size_float)])]))
  | Uprim(Psetfloatfield n, [loc; newval]) ->
      let ptr = transl loc in
      return_unit(Cop(Cstore,
                  [if n = 0 then ptr
                            else Cop(Cadda, [ptr; Cconst_int(n * size_float)]);
                   transl_unbox_float newval]))

  (* External call *)
  | Uprim(Pccall prim, args) ->
      if prim.prim_native_float then
        box_float
          (Cop(Cextcall(prim.prim_native_name, typ_float, false),
               List.map transl_unbox_float args))
      else begin
        let name =
          if prim.prim_native_name <> ""
          then prim.prim_native_name
          else prim.prim_name in
        Cop(Cextcall(name, typ_addr, prim.prim_alloc), List.map transl args)
      end
  (* Exceptions *)
  | Uprim(Praise, [arg]) ->
      Cop(Craise, [transl arg])

  (* Boolean operations *)
  | Uprim(Psequand, [arg1; arg2]) ->
      Cifthenelse(test_bool(transl arg1), transl arg2, Cconst_int 1)
  | Uprim(Psequor, [arg1; arg2]) ->
      Cifthenelse(test_bool(transl arg1), Cconst_int 3, transl arg2)
  | Uprim(Pnot, [arg]) ->
      Cop(Csubi, [Cconst_int 4; transl arg]) (* 1 -> 3, 3 -> 1 *)

  (* Integer operations *)
  | Uprim(Pnegint, [arg]) ->
      Cop(Csubi, [Cconst_int 2; transl arg])
  | Uprim(Paddint, [arg1; arg2]) ->
      decr_int(add_int (transl arg1) (transl arg2))
  | Uprim(Psubint, [arg1; arg2]) ->
      incr_int(sub_int (transl arg1) (transl arg2))
  | Uprim(Pmulint, [arg1; arg2]) ->
      incr_int(Cop(Cmuli, [decr_int(transl arg1); untag_int(transl arg2)]))
  | Uprim(Pdivint, [arg1; arg2]) ->
      tag_int(Cop(Cdivi, [untag_int(transl arg1); untag_int(transl arg2)]))
  | Uprim(Pmodint, [arg1; arg2]) ->
      tag_int(Cop(Cmodi, [untag_int(transl arg1); untag_int(transl arg2)]))
  | Uprim(Pandint, [arg1; arg2]) ->
      Cop(Cand, [transl arg1; transl arg2])
  | Uprim(Porint, [arg1; arg2]) ->
      Cop(Cor, [transl arg1; transl arg2])
  | Uprim(Pxorint, [arg1; arg2]) ->
      incr_int(Cop(Cxor, [transl arg1; transl arg2]))
  | Uprim(Plslint, [arg1; arg2]) ->
      incr_int(Cop(Clsl, [decr_int(transl arg1); untag_int(transl arg2)]))
  | Uprim(Plsrint, [arg1; arg2]) ->
      Cop(Cor, [Cop(Clsr, [transl arg1; untag_int(transl arg2)]);
                Cconst_int 1])
  | Uprim(Pasrint, [arg1; arg2]) ->
      Cop(Cor, [Cop(Casr, [transl arg1; untag_int(transl arg2)]);
                Cconst_int 1])
  | Uprim(Pintcomp cmp, [arg1; arg2]) ->
      tag_int(Cop(Ccmpi(transl_comparison cmp), [transl arg1; transl arg2]))
  | Uprim(Poffsetint n, [arg]) ->
      add_const (transl arg) (n lsl 1)
  | Uprim(Poffsetref n, [arg]) ->
      return_unit
        (bind "ref" (transl arg) (fun arg ->
          Cop(Cstore,
              [arg; add_const (Cop(Cload typ_int, [arg])) (n lsl 1)])))

  (* Float operations *)
  | Uprim(Pfloatofint, [arg]) ->
      box_float(Cop(Cfloatofint, [untag_int(transl arg)]))
  | Uprim(Pintoffloat, [arg]) ->
     tag_int(Cop(Cintoffloat, [transl_unbox_float arg]))
  | Uprim(Pnegfloat, [arg]) ->
      box_float(Cop(Cnegf, [transl_unbox_float arg]))
  | Uprim(Pabsfloat, [arg]) ->
      box_float(Cop(Cabsf, [transl_unbox_float arg]))
  | Uprim(Paddfloat, [arg1; arg2]) ->
      box_float(Cop(Caddf, [transl_unbox_float arg1; transl_unbox_float arg2]))
  | Uprim(Psubfloat, [arg1; arg2]) ->
      box_float(Cop(Csubf, [transl_unbox_float arg1; transl_unbox_float arg2]))
  | Uprim(Pmulfloat, [arg1; arg2]) ->
      box_float(Cop(Cmulf, [transl_unbox_float arg1; transl_unbox_float arg2]))
  | Uprim(Pdivfloat, [arg1; arg2]) ->
      box_float(Cop(Cdivf, [transl_unbox_float arg1; transl_unbox_float arg2]))
  | Uprim(Pfloatcomp cmp, [arg1; arg2]) ->
      tag_int(Cop(Ccmpf(transl_comparison cmp),
                  [transl_unbox_float arg1; transl_unbox_float arg2]))

  (* String operations *)
  | Uprim(Pstringlength, [arg]) ->
      tag_int(string_length (transl arg))
  | Uprim(Pstringrefu, [arg1; arg2]) ->
      tag_int(Cop(Cloadchunk Byte_unsigned,
                  [add_int (transl arg1) (untag_int(transl arg2))]))
  | Uprim(Pstringsetu, [arg1; arg2; arg3]) ->
      return_unit(Cop(Cstorechunk Byte_unsigned,
                      [add_int (transl arg1) (untag_int(transl arg2));
                       untag_int(transl arg3)]))
  | Uprim(Pstringrefs, [arg1; arg2]) ->
      tag_int
        (bind "str" (transl arg1) (fun str ->
          bind "index" (untag_int (transl arg2)) (fun idx ->
            Csequence(
              Cop(Ccheckbound, [string_length str; idx]),
              Cop(Cloadchunk Byte_unsigned, [add_int str idx])))))
  | Uprim(Pstringsets, [arg1; arg2; arg3]) ->
      return_unit
        (bind "str" (transl arg1) (fun str ->
          bind "index" (untag_int (transl arg2)) (fun idx ->
            Csequence(
              Cop(Ccheckbound, [string_length str; idx]),
              Cop(Cstorechunk Byte_unsigned,
                  [add_int str idx; untag_int(transl arg3)])))))

  (* Array operations *)
  | Uprim(Pmakearray kind, []) ->
      transl_constant(Const_block(0, []))
  | Uprim(Pmakearray kind, args) ->
      begin match kind with
        Pgenarray ->
          Cop(Cextcall("make_array", typ_addr, true),
              [Cop(Calloc, alloc_block_header 0 (List.length args) ::
                           List.map transl args)])
      | Paddrarray | Pintarray ->
          Cop(Calloc, alloc_block_header 0 (List.length args) ::
                      List.map transl args)
      | Pfloatarray ->
          Cop(Calloc, alloc_floatarray_header (List.length args) ::
                      List.map transl_unbox_float args)
      end
  | Uprim(Parraylength kind, [arg]) ->
      begin match kind with
        Pgenarray ->
          let len =
            if wordsize_shift = numfloat_shift then
              Cop(Clsr, [header(transl arg); Cconst_int wordsize_shift])
            else
              bind "header" (header(transl arg)) (fun hdr ->
                Cifthenelse(is_addr_array hdr,
                            Cop(Clsr, [hdr; Cconst_int wordsize_shift]),
                            Cop(Clsr, [hdr; Cconst_int numfloat_shift]))) in
          Cop(Cor, [len; Cconst_int 1])
      | Paddrarray | Pintarray ->
          Cop(Cor, [addr_array_length(header(transl arg)); Cconst_int 1])
      | Pfloatarray ->
          Cop(Cor, [float_array_length(header(transl arg)); Cconst_int 1])
      end
  | Uprim(Parrayrefu kind, [arg1; arg2]) ->
      begin match kind with
        Pgenarray ->
          bind "arr" (transl arg1) (fun arr ->
            bind "index" (transl arg2) (fun idx ->
              Cifthenelse(is_addr_array(header arr),
                          addr_array_ref arr idx,
                          float_array_ref arr idx)))
      | Paddrarray | Pintarray ->
          addr_array_ref (transl arg1) (transl arg2)
      | Pfloatarray ->
          float_array_ref (transl arg1) (transl arg2)
      end
  | Uprim(Parraysetu kind, [arg1; arg2; arg3]) ->
      return_unit(begin match kind with
        Pgenarray ->
          bind "newval" (transl arg3) (fun newval ->
            bind "index" (transl arg2) (fun index ->
              bind "arr" (transl arg1) (fun arr ->
                Cifthenelse(is_addr_array(header arr),
                            addr_array_set arr index newval,
                            float_array_set arr index (unbox_float newval)))))
      | Paddrarray ->
          addr_array_set (transl arg1) (transl arg2) (transl arg3)
      | Pintarray ->
          int_array_set (transl arg1) (transl arg2) (transl arg3)
      | Pfloatarray ->
          float_array_set (transl arg1) (transl arg2) (transl_unbox_float arg3)
      end)
  | Uprim(Parrayrefs kind, [arg1; arg2]) ->
      begin match kind with
        Pgenarray ->
          bind "index" (transl arg2) (fun idx ->
            bind "arr" (transl arg1) (fun arr ->
              bind "header" (header arr) (fun hdr ->
                Cifthenelse(is_addr_array hdr,
                  Csequence(Cop(Ccheckbound, [addr_array_length hdr; idx]),
                            addr_array_ref arr idx),
                  Csequence(Cop(Ccheckbound, [float_array_length hdr; idx]),
                            float_array_ref arr idx)))))
      | Paddrarray | Pintarray ->
          bind "index" (transl arg2) (fun idx ->
            bind "arr" (transl arg1) (fun arr ->
              Csequence(Cop(Ccheckbound, [addr_array_length(header arr); idx]),
                        addr_array_ref arr idx)))
      | Pfloatarray ->
          box_float(
            bind "index" (transl arg2) (fun idx ->
              bind "arr" (transl arg1) (fun arr ->
                Csequence(Cop(Ccheckbound, 
                              [float_array_length(header arr); idx]),
                          unboxed_float_array_ref arr idx))))
      end
  | Uprim(Parraysets kind, [arg1; arg2; arg3]) ->
      return_unit(begin match kind with
        Pgenarray ->
          bind "newval" (transl arg3) (fun newval ->
            bind "index" (transl arg2) (fun idx ->
              bind "arr" (transl arg1) (fun arr ->
                bind "header" (header arr) (fun hdr ->
                  Cifthenelse(is_addr_array hdr,
                    Csequence(Cop(Ccheckbound, [addr_array_length hdr; idx]),
                              addr_array_set arr idx newval),
                    Csequence(Cop(Ccheckbound, [float_array_length hdr; idx]),
                              float_array_set arr idx
                                              (unbox_float newval)))))))
      | Paddrarray ->
          bind "index" (transl arg2) (fun idx ->
            bind "arr" (transl arg1) (fun arr ->
              Csequence(Cop(Ccheckbound, [addr_array_length(header arr); idx]),
                        addr_array_set arr idx (transl arg3))))
      | Pintarray ->
          bind "index" (transl arg2) (fun idx ->
            bind "arr" (transl arg1) (fun arr ->
              Csequence(Cop(Ccheckbound, [addr_array_length(header arr); idx]),
                        int_array_set arr idx (transl arg3))))
      | Pfloatarray ->
          bind "index" (transl arg2) (fun idx ->
            bind "arr" (transl arg1) (fun arr ->
              Csequence(Cop(Ccheckbound, [float_array_length(header arr);idx]),
                        float_array_set arr idx (transl_unbox_float arg3))))
      end)

  (* Operations on bitvects *)
  | Uprim(Pbittest, [arg1; arg2]) ->
      bind "index" (untag_int(transl arg2)) (fun idx ->
        tag_int(
          Cop(Cand, [Cop(Clsr, [Cop(Cloadchunk Byte_unsigned,
                                    [add_int (transl arg1)
                                      (Cop(Clsr, [idx; Cconst_int 3]))]);
                                Cop(Cand, [idx; Cconst_int 7])]);
                     Cconst_int 1])))

  | Uprim(_, _) ->
      fatal_error "Cmmgen.transl"

  | Uswitch(arg, s) ->
      (* As in the bytecode interpreter, only matching against constants
         can be checked *)
      if Array.length s.us_index_blocks = 0 then
        if s.us_checked then
          bind "switch" (untag_int (transl arg)) (fun idx ->
            Cifthenelse(
              Cop(Ccmpa Cge,
                  [idx; Cconst_pointer(Array.length s.us_index_consts)]),
              Cexit,
              transl_switch idx s.us_index_consts s.us_cases_consts))
        else
          transl_switch (untag_int (transl arg))
                        s.us_index_consts s.us_cases_consts
      else if Array.length s.us_index_consts = 0 then
        transl_switch (get_tag (transl arg))
                      s.us_index_blocks s.us_cases_blocks
      else
        bind "switch" (transl arg) (fun arg ->
          Cifthenelse(
            Cop(Cand, [arg; Cconst_int 1]),
            transl_switch (untag_int arg) s.us_index_consts s.us_cases_consts,
            transl_switch (get_tag arg) s.us_index_blocks s.us_cases_blocks))
  | Ustaticfail ->
      Cexit
  | Ucatch(body, handler) ->
      Ccatch(transl body, transl handler)
  | Utrywith(body, exn, handler) ->
      Ctrywith(transl body, exn, transl handler)
  | Uifthenelse(Uprim(Pnot, [arg]), ifso, ifnot) ->
      transl (Uifthenelse(arg, ifnot, ifso))
  | Uifthenelse(cond, ifso, Ustaticfail) ->
      exit_if_false cond (transl ifso)
  | Uifthenelse(cond, Ustaticfail, ifnot) ->
      exit_if_true cond (transl ifnot)
  | Uifthenelse(Uprim(Psequand, _) as cond, ifso, ifnot) ->
      Ccatch(exit_if_false cond (transl ifso), transl ifnot)
  | Uifthenelse(Uprim(Psequor, _) as cond, ifso, ifnot) ->
      Ccatch(exit_if_true cond (transl ifnot), transl ifso)
  | Uifthenelse(cond, ifso, ifnot) ->
      Cifthenelse(test_bool(transl cond), transl ifso, transl ifnot)
  | Usequence(exp1, exp2) ->
      Csequence(remove_unit(transl exp1), transl exp2)
  | Uwhile(cond, body) ->
      return_unit(Ccatch(Cloop(exit_if_false cond (remove_unit(transl body))),
                         Ctuple []))
  | Ufor(id, low, high, dir, body) ->
      let tst = match dir with Upto -> Cgt   | Downto -> Clt in
      let inc = match dir with Upto -> Caddi | Downto -> Csubi in
      return_unit
        (Clet(id, transl low,
          bind "bound" (transl high) (fun high ->
            Ccatch(
              Cloop(Cifthenelse(
                Cop(Ccmpi tst, [Cvar id; high]),
                Cexit,
                 Csequence(remove_unit(transl body),
                           Cassign(id, Cop(inc, 
                                           [Cvar id; Cconst_int 2]))))),
              Ctuple []))))
  | Uassign(id, exp) ->
      return_unit(Cassign(id, transl exp))

and transl_unbox_float = function
    Uconst(Const_base(Const_float f)) -> Cconst_float f
  | exp -> unbox_float(transl exp)

and exit_if_true cond otherwise =
  match cond with
    Uprim(Psequor, [arg1; arg2]) ->
      exit_if_true arg1 (exit_if_true arg2 otherwise)
  | Uprim(Psequand, [arg1; arg2]) ->
      Csequence(Ccatch(exit_if_true arg1 (Ctuple []),
                       exit_if_true arg2 (Ctuple [])),
                otherwise)
  | _ ->
      Cifthenelse(test_bool(transl cond), Cexit, otherwise)

and exit_if_false cond otherwise =
  match cond with
    Uprim(Psequand, [arg1; arg2]) ->
      exit_if_false arg1 (exit_if_false arg2 otherwise)
  | Uprim(Psequor, [arg1; arg2]) ->
      Csequence(Ccatch(exit_if_false arg1 (Ctuple []),
                       exit_if_false arg2 (Ctuple [])),
                otherwise)
  | _ ->
      Cifthenelse(test_bool(transl cond), otherwise, Cexit)

and transl_switch arg index cases =
  match Array.length index with
    1 -> transl cases.(0)
  | 2 -> Cifthenelse(arg, transl cases.(index.(1)), transl cases.(index.(0)))
  | _ ->
      (* Determine whether all actions minus one or two are equal to
         Ustaticfail *)
      let num_fail = ref 0 in
      let key1 = ref (-1) in
      let key2 = ref (-1) in
      for i = 0 to Array.length index - 1 do
        if cases.(index.(i)) = Ustaticfail then incr num_fail
        else if !key1 < 0 then key1 := i
        else if !key2 < 0 then key2 := i
      done;
      match Array.length index - !num_fail with
        0 -> Csequence(arg, Cexit)
      | 1 -> Cifthenelse(Cop(Ccmpi Ceq, [arg; Cconst_int !key1]),
                         transl cases.(index.(!key1)), Cexit)
      | 2 -> bind "test" arg (fun a ->
               Cifthenelse(Cop(Ccmpi Ceq, [a; Cconst_int !key1]),
                           transl cases.(index.(!key1)),
                           Cifthenelse(Cop(Ccmpi Ceq, [a; Cconst_int !key2]),
                                       transl cases.(index.(!key2)), Cexit)))
      | _ -> Cswitch(arg, index, Array.map transl cases)

and transl_letrec bindings cont =
  let rec init_blocks = function
      [] -> fill_blocks bindings
    | (id, exp) :: rem ->
        Clet(id, dummy_block(expr_size_and_tag exp), init_blocks rem)
  and fill_blocks = function
      [] -> cont
    | (id, exp) :: rem ->
        Csequence(store_contents (Cvar id) (transl exp), fill_blocks rem)
  in init_blocks bindings

<<function Cmmgen.transl_function>>

(* Translate all function definitions *)

module StringSet = Set

<<function Cmmgen.transl_all_functions>>

(* Emit structured constants *)

let rec emit_constant symb cst cont =
  match cst with
    Const_base(Const_float s) ->
      Cint(float_header) :: Cdefine_symbol symb :: Cfloat s :: cont
  | Const_base(Const_string s) ->
      Cint(string_header (String.length s)) ::
      Cdefine_symbol symb ::
      emit_string_constant s cont
  | Const_block(tag, fields) ->
      let (emit_fields, cont1) = emit_constant_fields fields cont in
      Cint(block_header tag (List.length fields)) ::
      Cdefine_symbol symb ::
      emit_fields @ cont1
  | Const_float_array(fields) ->
      Cint(floatarray_header (List.length fields)) ::
      Cdefine_symbol symb ::
      Misc.map_end (fun f -> Cfloat f) fields cont
  | _ -> fatal_error "gencmm.emit_constant"

and emit_constant_fields fields cont =
  match fields with
    [] -> ([], cont)
  | f1 :: fl ->
      let (data1, cont1) = emit_constant_field f1 cont in
      let (datal, contl) = emit_constant_fields fl cont1 in
      (data1 :: datal, contl)

and emit_constant_field field cont =
  match field with
    Const_base(Const_int n) ->
      (Cint(Nativeint.add (Nativeint.shift (Nativeint.from n) 1)
                          (Nativeint.from 1)),
       cont)
  | Const_base(Const_char c) ->
      (Cint(Nativeint.from(((Char.code c) lsl 1) + 1)), cont)
  | Const_base(Const_float s) ->
      let lbl = new_const_label() in
      (Clabel_address lbl,
       Cint(float_header) :: Cdefine_label lbl :: Cfloat s :: cont)
  | Const_base(Const_string s) ->
      let lbl = new_const_label() in
      (Clabel_address lbl,
       Cint(string_header (String.length s)) :: Cdefine_label lbl :: 
       emit_string_constant s cont)
  | Const_pointer n ->
      (Cint(Nativeint.from((n lsl 1) + 1)), cont)
  | Const_block(tag, fields) ->
      let lbl = new_const_label() in
      let (emit_fields, cont1) = emit_constant_fields fields cont in
      (Clabel_address lbl,
       Cint(block_header tag (List.length fields)) :: Cdefine_label lbl ::
       emit_fields @ cont1)
  | Const_float_array(fields) ->
      let lbl = new_const_label() in
      (Clabel_address lbl,
       Cint(floatarray_header (List.length fields)) :: Cdefine_label lbl ::
       Misc.map_end (fun f -> Cfloat f) fields cont)

and emit_string_constant s cont =
  let n = size_int - 1 - (String.length s) mod size_int in
  Cstring s :: Cskip n :: Cint8 n :: cont

<<function Cmmgen.emit_all_constants>>

<<function Cmmgen.compunit>>

<<function Cmmgen.apply_function (asmcomp/cmmgen.ml)>>

<<function Cmmgen.tuplify_function>>

<<function Cmmgen.final_curry_function>>

<<function Cmmgen.intermediate_curry_functions>>
    
<<function Cmmgen.curry_function (asmcomp/cmmgen.ml)>>

<<function Cmmgen.entry_point>>

<<constant Cmmgen.cint_zero>>

<<function Cmmgen.global_table>>

<<function Cmmgen.frame_table>>

<<function Cmmgen.segment_table>>

<<function Cmmgen.data_segment_table>>

<<function Cmmgen.code_segment_table>>

<<function Cmmgen.predef_exception>>
@


\subsection*{[[asmcomp/liveness.mli]]}

<<signature Liveness.fundecl>>=
(* Liveness analysis.
   Annotate mach code with the set of regs live at each point. *)

val fundecl: Mach.fundecl -> unit
@


%-------------------------------------------------------------

<<asmcomp/liveness.mli>>=
<<copyright header>>

<<signature Liveness.fundecl>>
@


\subsection*{[[asmcomp/liveness.ml]]}

<<constant Liveness.live_at_exit>>=
let live_at_exit = ref (*Reg.*)Set.empty
@

<<constant Liveness.live_at_break>>=
let live_at_break = ref (*Reg.*)Set.empty
@

<<constant Liveness.live_at_raise>>=
let live_at_raise = ref (*Reg.*)Set.empty
@

<<function Liveness.live>>=
let rec live i finally =
  (* finally is the set of registers live after execution of the
     instruction sequence.
     The result of the function is the set of registers live just
     before the instruction sequence.
     The instruction i is annotated by the set of registers live across
     the instruction. *)
  match i.desc with
    Iend ->
      i.live <- finally;
      finally
  | Ireturn | Iop(Itailcall_ind) | Iop(Itailcall_imm _) ->
      (* i.live remains empty since no regs are live across *)
      Reg.set_of_array i.arg
  | Iifthenelse(test, ifso, ifnot) ->
      let at_join = live i.next finally in
      let at_fork = (*Reg.*)Set.union (live ifso at_join) (live ifnot at_join) in
      i.live <- at_fork;
      Reg.add_set_array at_fork i.arg
  | Iswitch(index, cases) ->
      let at_join = live i.next finally in
      let at_fork = ref (*Reg.*)Set.empty in
      for i = 0 to Array.length cases - 1 do
        at_fork := (*Reg.*)Set.union !at_fork (live cases.(i) at_join)
      done;
      i.live <- !at_fork;
      Reg.add_set_array !at_fork i.arg
  | Iloop(body) ->
      let at_top = ref (*Reg.*)Set.empty in
      (* Yes, there are better algorithms, but we'll just iterate till
         reaching a fixpoint. *)
      begin try
        while true do
          let new_at_top = (*Reg.*)Set.union !at_top (live body !at_top) in
          if (*Reg.*)Set.equal !at_top new_at_top then raise Exit;
          at_top := new_at_top
        done
      with Exit -> ()
      end;
      i.live <- !at_top;
      !at_top
  | Icatch(body, handler) ->
      let at_join = live i.next finally in
      let before_handler = live handler at_join in
      let saved_live_at_exit = !live_at_exit in
      live_at_exit := before_handler;
      let before_body = live body at_join in
      live_at_exit := saved_live_at_exit;
      i.live <- before_body;
      before_body
  | Iexit ->
      i.live <- !live_at_exit;          (* These regs are live across *)
      !live_at_exit
  | Itrywith(body, handler) ->
      let at_join = live i.next finally in
      let before_handler = live handler at_join in
      let saved_live_at_raise = !live_at_raise in
      live_at_raise := (*Reg.*)Set.remove Proc.loc_exn_bucket before_handler;
      let before_body = live body at_join in
      live_at_raise := saved_live_at_raise;
      i.live <- before_body;
      before_body
  | Iraise ->
      (* i.live remains empty since no regs are live across *)
      Reg.add_set_array !live_at_raise i.arg
  | _ ->
      let across_after = Reg.diff_set_array (live i.next finally) i.res in
      let across =
        match i.desc with
          Iop(Icall_ind) | Iop(Icall_imm _) | Iop(Iextcall(_, _)) ->
            (* The function call may raise an exception, branching to the
               nearest enclosing try ... with. Hence, everything that must
               be live at the beginning of the exception handler must also
               be live across the call. *)
             (*Reg.*)Set.union across_after !live_at_raise
         | _ ->
             across_after in
      i.live <- across;
      Reg.add_set_array across i.arg
@

<<function Liveness.fundecl>>=
let fundecl f =
  let initially_live = live f.fun_body (*Reg.*)Set.empty in
  (* Sanity check: only function parameters can be live at entrypoint *)
  let wrong_live = (*Reg.*)Set.diff initially_live (Reg.set_of_array f.fun_args) in
  if not ((*Reg.*)Set.is_empty wrong_live) then begin
    Printmach.regset wrong_live; Format.print_newline();
    Misc.fatal_error "Liveness.fundecl"
  end
@


%-------------------------------------------------------------

<<asmcomp/liveness.ml>>=
<<copyright header>>

(* Liveness analysis.
   Annotate mach code with the set of regs live at each point. *)

open Mach

<<constant Liveness.live_at_exit>>
<<constant Liveness.live_at_break>>
<<constant Liveness.live_at_raise>>

<<function Liveness.live>>

<<function Liveness.fundecl>>
@


\subsection*{[[asmcomp/schedgen.mli]]}

<<type Schedgen.code_dag_node>>=
(* Instruction scheduling *)

type code_dag_node =
  { instr: Linearize.instruction;
    delay: int;
    mutable sons: (code_dag_node * int) list;
    mutable date: int;
    mutable length: int;
    mutable ancestors: int;
    mutable emitted_ancestors: int }
@

<<type Schedgen.scheduler>>=
type scheduler = {
  (* old: virtual *)
  (* Can be overriden by processor description *)
  oper_issue_cycles : Mach.operation -> int;
      (* Number of cycles needed to issue the given operation *)
  oper_latency : Mach.operation -> int;
      (* Number of cycles needed to complete the given operation *)
  oper_in_basic_block : Mach.operation -> bool;
      (* Says whether the given operation terminates a basic block *)

  (* Entry point *)
  schedule_fundecl : 
    scheduler ->
    Linearize.fundecl -> Linearize.fundecl;

  (* old: protected *)

  instr_in_basic_block: 
   scheduler -> Linearize.instruction -> bool;
  instr_latency:
   scheduler -> Linearize.instruction -> int;
  instr_issue_cycles:
   scheduler -> Linearize.instruction -> int;
  add_instruction:
   scheduler -> 
   code_dag_node list -> Linearize.instruction -> code_dag_node list;
  ready_instruction:
   int -> code_dag_node list -> code_dag_node option;
  reschedule:  
   scheduler -> 
   code_dag_node list -> int -> Linearize.instruction -> Linearize.instruction;
 
}
@

<<signature Schedgen.scheduler_generic>>=
val scheduler_generic: unit -> scheduler
@


%-------------------------------------------------------------

<<asmcomp/schedgen.mli>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1997 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)


<<type Schedgen.code_dag_node>>

<<type Schedgen.scheduler>>

<<signature Schedgen.scheduler_generic>>

(*
  oper_issue_cycles = super.oper_issue_cycles;
  oper_latency = super.oper_latency;
  oper_in_basic_block = super.oper_in_basic_block;
  schedule_fundecl = super.schedule_fundecl;
  instr_in_basic_block = super.instr_in_basic_block;
  instr_latency = super.instr_latency;
  instr_issue_cycles = super.instr_issue_cycles;
  add_instruction = super.add_instruction;
  ready_instruction = super.ready_instruction;
  reschedule = super.reschedule;
*)
@


\subsection*{[[asmcomp/selection.mli]]}

<<signature Selection.fundecl>>=
(* Selection of pseudo-instructions, assignment of pseudo-registers,
   sequentialization. *)

val fundecl: Cmm.fundecl -> Mach.fundecl
@


%-------------------------------------------------------------

<<asmcomp/selection.mli>>=
<<copyright header>>

<<signature Selection.fundecl>>
@


\section{[[asmcomp/arm/]]}

\subsection*{[[asmcomp/arm/selection.ml]]}

<<function Selection.is_immed>>=
(* Immediate operands are 8-bit immediate values, zero-extended, and rotated
   right by 0, 2, 4, ... 30 bits.
   To avoid problems with Caml's 31-bit arithmetic,
   we check only with 8-bit values shifted left 0 to 22 bits. *)

let rec is_immed n shift =
  if shift > 22 then false
  else if n land (0xFF lsl shift) = n then true
  else is_immed n (shift + 2)
@

<<function Selection.is_offset>>=
(* We have 12-bit signed offsets for word accesses,
   8-bit signed word offsets for float accesses,
   and 8-bit byte offsets for bytes and shorts.
   Use lowest common denominator. *)

let is_offset n = n < 128 && n > -128
@

<<function Selection.is_intconst>>=
let is_intconst = function Cconst_int n -> true | _ -> false
@

<<function Selection.select_shift_arith>>=
let select_shift_arith super self = (fun op shiftop shiftrevop args ->
  match args with
    [arg1; Cop(Clsl, [arg2; Cconst_int n])]
    when n > 0 && n < 32 && not(is_intconst arg2) ->
      (Ispecific(Ishiftarith(shiftop, n)), [arg1; arg2])
  | [arg1; Cop(Casr, [arg2; Cconst_int n])]
    when n > 0 && n < 32 && not(is_intconst arg2) ->
      (Ispecific(Ishiftarith(shiftop, -n)), [arg1; arg2])
  | [Cop(Clsl, [arg1; Cconst_int n]); arg2]
    when n > 0 && n < 32 && not(is_intconst arg1) ->
      (Ispecific(Ishiftarith(shiftrevop, n)), [arg2; arg1])
  | [Cop(Casr, [arg1; Cconst_int n]); arg2]
    when n > 0 && n < 32 && not(is_intconst arg1) ->
      (Ispecific(Ishiftarith(shiftrevop, -n)), [arg2; arg1])
  | _ ->
      super.select_operation self op args
 )
@

<<function Selection.selector>>=
(* Instruction selection *)

let selector () = 

 let super = Selectgen.selector_generic () in
 {

  (* todo: super with feature needed ... *)
  select_condition = super.select_condition;
  select_store = super.select_store;
  emit_extcall_args = super.emit_extcall_args;
  emit_fundecl = super.emit_fundecl;
  extract = super.extract;
  insert = super.insert;
  insert_move = super.insert_move;
  insert_move_args = super.insert_move_args;
  insert_move_results = super.insert_move_results;
  insert_moves = super.insert_moves;
  emit_expr = super.emit_expr;
  emit_tail = super.emit_tail;
  select_arith_comm = super.select_arith_comm;
  select_arith = super.select_arith;
  select_shift = super.select_shift;
  select_arith_comp = super.select_arith_comp;
  emit_let = super.emit_let;
  emit_parts_list = super.emit_parts_list;
  emit_parts = super.emit_parts;
  emit_tuple = super.emit_tuple;
  emit_stores = super.emit_stores;
  emit_sequence = super.emit_sequence;
  emit_return = super.emit_return;
  emit_tail_sequence = super.emit_tail_sequence;
  select_floatarith = super.select_floatarith;
  select_push = super.select_push;

 is_immediate = (fun n ->
  n land 0xFF = n || is_immed n 2
 );

 select_addressing = (function
    Cop(Cadda, [arg; Cconst_int n]) when is_offset n ->
      (Iindexed n, arg)
  | Cop(Cadda, [arg1; Cop(Caddi, [arg2; Cconst_int n])]) when is_offset n ->
      (Iindexed n, Cop(Cadda, [arg1; arg2]))
  | arg ->
      (Iindexed 0, arg)
 );
 

 select_operation = (fun self op args ->
  match op with
    Cadda | Caddi ->
      begin match args with
        [arg1; Cconst_int n] when n < 0 && self.is_immediate (-n) ->
          (Iintop_imm(Isub, -n), [arg1])
      | _ ->
          select_shift_arith super self op Ishiftadd Ishiftadd args
      end
  | Csuba | Csubi ->
      begin match args with
        [arg1; Cconst_int n] when n < 0 && self.is_immediate (-n) ->
          (Iintop_imm(Iadd, -n), [arg1])
      | [Cconst_int n; arg2] when self.is_immediate n ->
          (Ispecific(Irevsubimm n), [arg2])
      | _ ->
          select_shift_arith super self op Ishiftsub Ishiftsubrev args
      end
  | Cmuli ->			(* no multiply immediate *)
      (Iintop Imul, args)
  | Cdivi ->
      begin match args with
        [arg1; Cconst_int n] when n = 1 lsl (Misc.log2 n) ->
          (Iintop_imm(Idiv, n), [arg1])
      | _ ->
          (Iextcall("__divsi3", false), args)
      end
  | Cmodi ->
      begin match args with
        [arg1; Cconst_int n] when n = 1 lsl (Misc.log2 n) ->
          (Iintop_imm(Imod, n), [arg1])
      | _ ->
          (Iextcall("__modsi3", false), args)
      end
  | Ccheckbound ->
      begin match args with
        [Cop(Clsr, [arg1; Cconst_int n]); arg2]
    when n > 0 && n < 32 && not(is_intconst arg2) ->
      (Ispecific(Ishiftcheckbound n), [arg1; arg2])
      | _ ->
        super.select_operation self op args
      end
  | _ -> super.select_operation self op args
 );

(* In mul rd, rm, rs,  rm and rd must be different.
   We deal with this by pretending that rm is also a result of the mul
   operation. *)

 insert_op = (fun self op rs rd ->
  if op = Iintop(Imul) then begin
    self.insert (Iop op) rs [| rd.(0); rs.(0) |]; rd
  end else
    super.insert_op self op rs rd
 );
 }
@

<<function Selection.fundecl>>=
let fundecl f = 
  let s = selector () in
  s.emit_fundecl s f
@


%-------------------------------------------------------------

<<asmcomp/arm/selection.ml>>=
(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1998 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)


(* Instruction selection for the ARM processor *)

open Misc
open Cmm
open Reg
open Arch
open Mach

open Selectgen

<<function Selection.is_immed>>

<<function Selection.is_offset>>

<<function Selection.is_intconst>>




<<function Selection.select_shift_arith>>


<<function Selection.selector>>


<<function Selection.fundecl>>

@


\section{[[asmcomp/]]}

\subsection*{[[asmcomp/schedgen.ml]]}

<<type Schedgen.code_dag_node (asmcomp/schedgen.ml)>>=
(* Representation of the code DAG. *)

type code_dag_node =
  { instr: instruction;                 (* The instruction *)
    delay: int;           (* How many cycles before result is available *)
    mutable sons: (code_dag_node * int) list;
                                        (* Instructions that depend on it *)
    mutable date: int;                  (* Start date *)
    mutable length: int;                (* Length of longest path to result *)
    mutable ancestors: int;             (* Number of ancestors *)
    mutable emitted_ancestors: int }    (* Number of emitted ancestors *)
@

<<constant Schedgen.dummy_node>>=
let dummy_node =
  { instr = end_instr; delay = 0; sons = []; date = 0;
    length = -1; ancestors = 0; emitted_ancestors = 0 }
@

<<constant Schedgen.code_results>>=
(* The code dag itself is represented by two tables from registers to nodes:
   - "results" maps registers to the instructions that produced them;
   - "uses" maps registers to the instructions that use them. *)

let code_results = (Hashtbl.create 31 : (location, code_dag_node) Hashtbl.t)
@

<<constant Schedgen.code_uses>>=
let code_uses = (Hashtbl.create 31 : (location, code_dag_node) Hashtbl.t)
@

<<function Schedgen.clear_code_dag>>=
let clear_code_dag () =
  Hashtbl.clear code_results;
  Hashtbl.clear code_uses
@

<<function Schedgen.add_edge>>=
(* Add an edge to the code DAG *)

let add_edge ancestor son delay =
  ancestor.sons <- (son, delay) :: ancestor.sons;
  son.ancestors <- son.ancestors + 1
@

<<function Schedgen.is_critical>>=
(* Compute length of longest path to a result.
   For leafs of the DAG, see whether their result is used in the instruction
   immediately following the basic block (a "critical" output). *)

let is_critical critical_outputs results =
  try
    for i = 0 to Array.length results - 1 do
      let r = results.(i).loc in
      for j = 0 to Array.length critical_outputs - 1 do
        if critical_outputs.(j).loc = r then raise Exit
      done
    done;
    false
  with Exit ->
    true
@

<<function Schedgen.longest_path>>=
let rec longest_path critical_outputs node =
  if node.length < 0 then begin
    match node.sons with
      [] ->
        node.length <-
          if is_critical critical_outputs node.instr.res
          or node.instr.desc = Lreloadretaddr (* alway critical *)
          then node.delay
          else 0
    | sons ->
        node.length <- 
          List.fold_left
            (fun len (son, delay) ->
              max len (longest_path critical_outputs son + delay))
            0 sons
  end;
  node.length
@

<<function Schedgen.remove_instr>>=
(* Remove an instruction from the ready queue *)

let rec remove_instr node = function
    [] -> []
  | instr :: rem ->
      if instr == node then rem else instr :: remove_instr node rem
@

<<constant Schedgen.some_load>>=
(* We treat Lreloadretaddr as a word-sized load *)

let some_load = (Iload(Cmm.Word, Arch.identity_addressing))
@

<<type Schedgen.scheduler (asmcomp/schedgen.ml)>>=
type scheduler = {
  (* old: virtual *)
  (* Can be overriden by processor description *)
  oper_issue_cycles : Mach.operation -> int;
      (* Number of cycles needed to issue the given operation *)
  oper_latency : Mach.operation -> int;
      (* Number of cycles needed to complete the given operation *)
  oper_in_basic_block : Mach.operation -> bool;
      (* Says whether the given operation terminates a basic block *)

  (* Entry point *)
  schedule_fundecl : 
    scheduler ->
    Linearize.fundecl -> Linearize.fundecl;

  (* old: protected *)

  instr_in_basic_block: 
   scheduler -> Linearize.instruction -> bool;
  instr_latency:
   scheduler -> Linearize.instruction -> int;
  instr_issue_cycles:
   scheduler -> Linearize.instruction -> int;
  add_instruction:
   scheduler -> 
   code_dag_node list -> Linearize.instruction -> code_dag_node list;
  ready_instruction:
   int -> code_dag_node list -> code_dag_node option;
  reschedule:  
   scheduler -> 
   code_dag_node list -> int -> Linearize.instruction -> Linearize.instruction;
 
}
@

<<function Schedgen.scheduler_generic>>=
(* The generic scheduler *)

let scheduler_generic () =
 {

(* Determine whether an operation ends a basic block or not.
   Can be overriden for some processors to signal specific instructions
   that terminate a basic block, e.g. Istore_symbol for the 386. *)

 oper_in_basic_block = (function
    Icall_ind -> false
  | Icall_imm _ -> false
  | Itailcall_ind -> false
  | Itailcall_imm _ -> false
  | Iextcall(_, _) -> false
  | Istackoffset _ -> false
  | Istore(_, _) -> false
  | Ialloc _ -> false
  | _ -> true
 );

(* Determine whether an instruction ends a basic block or not *)

 instr_in_basic_block = (fun self instr ->
  match instr.desc with
    Lop op -> self.oper_in_basic_block op
  | Lreloadretaddr -> true
  | _ -> false
 );

(* Estimate the delay needed to evaluate an operation. *)

 oper_latency = (fun _ -> failwith "Schedgen.oper_lantency: virtual");

(* Estimate the delay needed to evaluate an instruction *)

 instr_latency = (fun self instr ->
  match instr.desc with
    Lop op ->
      self.oper_latency op
  | Lreloadretaddr ->
      self.oper_latency some_load
  | _ ->
      assert false
 );

(* Estimate the number of cycles consumed by emitting an operation. *)

 oper_issue_cycles = (fun _ -> failwith "Schedgen.oper_issue_cycles: virtual");

(* Estimate the number of cycles consumed by emitting an instruction. *)

 instr_issue_cycles = (fun self instr ->
  match instr.desc with
    Lop op ->
      self.oper_issue_cycles op
  | Lreloadretaddr ->
      self.oper_issue_cycles some_load
  | _ ->
      assert false
 );

(* Add an instruction to the code dag *)

 add_instruction = (fun self ready_queue instr ->
  let delay = self.instr_latency self instr in
  let node =
    { instr = instr;
      delay = delay;
      sons = [];
      date = 0;
      length = -1;
      ancestors = 0;
      emitted_ancestors = 0 } in
  (* Add edges from all instructions that define one of the registers used
     (RAW dependencies) *)
  for i = 0 to Array.length instr.arg - 1 do
    try
      let ancestor = Hashtbl.find code_results instr.arg.(i).loc in
      add_edge ancestor node ancestor.delay
    with Not_found ->
      ()
  done;
  (* Also add edges from all instructions that use one of the result regs
     of this instruction (WAR dependencies). *)
  for i = 0 to Array.length instr.res - 1 do
    let ancestors = Hashtbl.find_all code_uses instr.res.(i).loc in
    List.iter (fun ancestor -> add_edge ancestor node 0) ancestors
  done;
  (* Also add edges from all instructions that have already defined one
     of the results of this instruction (WAW dependencies). *)
  for i = 0 to Array.length instr.res - 1 do
    try
      let ancestor = Hashtbl.find code_results instr.res.(i).loc in
      add_edge ancestor node 0
    with Not_found ->
      ()
  done;
  (* Remember the registers used and produced by this instruction *)
  for i = 0 to Array.length instr.res - 1 do
    Hashtbl.add code_results instr.res.(i).loc node
  done;
  for i = 0 to Array.length instr.arg - 1 do
    Hashtbl.add code_uses instr.arg.(i).loc node
  done;
  (* If this is a root instruction (all arguments already computed),
     add it to the ready queue *)
  if node.ancestors = 0 then node :: ready_queue else ready_queue
 );

(* Given a list of instructions and a date, choose one or several
   that are ready to be computed (start date <= current date)
   and that we can emit in one cycle.  Favor instructions with
   maximal distance to result.  If we can't find any, return None.
   This does not take multiple issues into account, though. *)

 ready_instruction = (fun date queue ->
  let rec extract best = function
    [] ->
      if best == dummy_node then None else Some best
  | instr :: rem ->
      let new_best =
        if instr.date <= date && instr.length > best.length
        then instr else best in
      extract new_best rem in
  extract dummy_node queue
 );
  
(* Schedule a basic block, adding its instructions in front of the given
   instruction sequence *)

 reschedule = (fun self ready_queue date cont ->
  if ready_queue = [] then cont else begin
    match self.ready_instruction date ready_queue with
      None ->
        self.reschedule self ready_queue (date + 1) cont
    | Some node ->
        (* Remove node from queue *)
        let new_queue = ref (remove_instr node ready_queue) in
        (* Update the start date and number of ancestors emitted of
           all descendents of this node. Enter those that become ready
           in the queue. *)
        let issue_cycles = self.instr_issue_cycles self node.instr in
        List.iter
          (fun (son, delay) ->
            let completion_date = date + issue_cycles + delay - 1 in
            if son.date < completion_date then son.date <- completion_date;
            son.emitted_ancestors <- son.emitted_ancestors + 1;
            if son.emitted_ancestors = son.ancestors then
              new_queue := son :: !new_queue)
          node.sons;
        instr_cons node.instr.desc node.instr.arg node.instr.res
          (self.reschedule self !new_queue (date + issue_cycles) cont)
  end
 );

(* Entry point *)
(* Don't bother to schedule for initialization code and the like. *)

 schedule_fundecl = (fun self f ->

  let rec schedule i =
    match i.desc with
      Lend -> i
    | _ ->
        if self.instr_in_basic_block self i then begin
          clear_code_dag();
          schedule_block [] i
        end else
          { desc = i.desc; arg = i.arg; res = i.res; live = i.live;
            next = schedule i.next }

  and schedule_block ready_queue i =
    if self.instr_in_basic_block self i then
      schedule_block (self.add_instruction self ready_queue i) i.next
    else begin
      let critical_outputs =
        match i.desc with
          Lop(Icall_ind | Itailcall_ind) -> [| i.arg.(0) |]
        | Lop(Icall_imm _ | Itailcall_imm _ | Iextcall(_, _)) -> [||]
        | Lreturn -> [||]
        | _ -> i.arg in
      List.iter (fun x -> longest_path critical_outputs x; ()) ready_queue;
      self.reschedule self ready_queue 0 (schedule i)
    end in

  if f.fun_fast then begin
    let new_body = schedule f.fun_body in
    clear_code_dag();
    { fun_name = f.fun_name;
      fun_body = new_body;
      fun_fast = f.fun_fast }
  end else
    f
 );
 }
@


%-------------------------------------------------------------

<<asmcomp/schedgen.ml>>=
<<copyright header>>

(* Instruction scheduling *)

open Misc
open Reg
open Mach
open Linearize

<<type Schedgen.code_dag_node (asmcomp/schedgen.ml)>>

<<constant Schedgen.dummy_node>>

<<constant Schedgen.code_results>>
<<constant Schedgen.code_uses>>

<<function Schedgen.clear_code_dag>>

<<function Schedgen.add_edge>>

<<function Schedgen.is_critical>>

<<function Schedgen.longest_path>>

<<function Schedgen.remove_instr>>

<<constant Schedgen.some_load>>

<<type Schedgen.scheduler (asmcomp/schedgen.ml)>>

<<function Schedgen.scheduler_generic>>

@


\subsection*{[[asmcomp/emit.mli]]}

<<signature Emit.fundecl>>=
(* Generation of assembly code *)

val fundecl: Linearize.fundecl -> unit
@

<<signature Emit.data>>=
val data: Cmm.data_item list -> unit
@

<<signature Emit.begin_assembly>>=
val begin_assembly: unit -> unit
@

<<signature Emit.end_assembly>>=
val end_assembly: unit -> unit
@


%-------------------------------------------------------------

<<asmcomp/emit.mli>>=
<<copyright header>>

<<signature Emit.fundecl>>
<<signature Emit.data>>
<<signature Emit.begin_assembly>>
<<signature Emit.end_assembly>>
@


\subsection*{[[asmcomp/asmgen.mli]]}

<<signature Asmgen.compile_implementation>>=
(* From lambda to assembly code *)

val compile_implementation: string -> int -> Lambda.lambda -> unit
@

<<signature Asmgen.compile_phrase>>=
val compile_phrase: Cmm.phrase -> unit
@

<<type Asmgen.error>>=
type error = Assembler_error of string
@

<<exception Asmgen.Error>>=
exception Error of error
@

<<signature Asmgen.report_error>>=
val report_error: error -> unit
@


%-------------------------------------------------------------

<<asmcomp/asmgen.mli>>=
<<copyright header>>

<<signature Asmgen.compile_implementation>>
<<signature Asmgen.compile_phrase>>

<<type Asmgen.error>>
<<exception Asmgen.Error>>
<<signature Asmgen.report_error>>


@


\subsection*{[[asmcomp/asmgen.ml]]}

<<type Asmgen.error (asmcomp/asmgen.ml)>>=
type error = Assembler_error of string
@

<<exception Asmgen.Error (asmcomp/asmgen.ml)>>=
exception Error of error
@

<<function Asmgen.liveness>>=
let liveness phrase =
  Liveness.fundecl phrase; phrase
@

<<function Asmgen.dump_if>>=
let dump_if flag message phrase =
  if !flag then Printmach.phase message phrase;
  phrase
@

<<function Asmgen.dump_linear_if>>=
let dump_linear_if flag message phrase =
  if !flag then begin
    print_string "*** "; print_string message; print_newline();
    Printlinear.fundecl phrase; print_newline()
  end;
  phrase
@

<<function Asmgen.regalloc>>=
let rec regalloc round fd =
  if round > 50 then
    fatal_error(fd.Mach.fun_name ^
                ": function too complex, cannot complete register allocation");
  dump_if dump_live "Liveness analysis" fd;
  Interf.build_graph fd;
  if !dump_interf then Printmach.interferences();
  if !dump_prefer then Printmach.preferences();
  Coloring.allocate_registers();
  dump_if dump_regalloc "After register allocation" fd;
  let (newfd, redo_regalloc) = Reload.fundecl fd in
  dump_if dump_reload "After insertion of reloading code" newfd;
  if redo_regalloc 
  then begin Reg.reinit(); Liveness.fundecl newfd; regalloc (round+1) newfd end
  else newfd
@

<<function Asmgen.TODOOPERATOR>>=
let (++) x f = f x
@

<<function Asmgen.compile_fundecl>>=
let compile_fundecl fd_cmm =
  Reg.reset();
  fd_cmm
  ++ Selection.fundecl
  ++ dump_if dump_selection "After instruction selection"
  ++ liveness
  ++ dump_if dump_live "Liveness analysis"
  ++ Spill.fundecl
  ++ liveness
  ++ dump_if dump_spill "After spilling"
  ++ Split.fundecl
  ++ dump_if dump_split "After live range splitting"
  ++ liveness
  ++ regalloc 1
  ++ Linearize.fundecl
  ++ dump_linear_if dump_linear "Linearized code"
  ++ Scheduling.fundecl
  ++ dump_linear_if dump_scheduling "After instruction scheduling"
  ++ Emit.fundecl
@

<<function Asmgen.compile_phrase>>=
let compile_phrase p =
  if !dump_cmm then begin Printcmm.phrase p; print_newline() end;
  match p with
    Cfunction fd -> compile_fundecl fd
  | Cdata dl -> Emit.data dl
@

<<function Asmgen.compile_implementation>>=
let compile_implementation prefixname size lam =
  let asmfile =
    if !keep_asm_file
    then prefixname ^ ext_asm
    else Filename.temp_file "camlasm" ext_asm in
  let oc = open_out asmfile in
  begin try
    Emitaux.output_channel := oc;
    Emit.begin_assembly();
    List.iter compile_phrase (Cmmgen.compunit size (Closure.intro size lam));
    Emit.end_assembly();
    close_out oc
  with x ->
    close_out oc;
    if !keep_asm_file then () else remove_file asmfile;
    raise x
  end;
  if Proc.assemble_file asmfile (prefixname ^ ext_obj) <> 0
  then raise(Error(Assembler_error asmfile));
  if !keep_asm_file then () else remove_file asmfile
@

<<function Asmgen.report_error>>=
(* Error report *)

let report_error = function
    Assembler_error file ->
      print_string "Assembler error, input left in file ";
      print_string file
@


%-------------------------------------------------------------

<<asmcomp/asmgen.ml>>=
<<copyright header>>

(* From lambda to assembly code *)

open Format
open Config
open Clflags
open Misc
open Cmm

<<type Asmgen.error (asmcomp/asmgen.ml)>>

<<exception Asmgen.Error (asmcomp/asmgen.ml)>>

<<function Asmgen.liveness>>

<<function Asmgen.dump_if>>

<<function Asmgen.dump_linear_if>>

<<function Asmgen.regalloc>>

<<function Asmgen.TODOOPERATOR>>

<<function Asmgen.compile_fundecl>>

<<function Asmgen.compile_phrase>>

<<function Asmgen.compile_implementation>>

<<function Asmgen.report_error>>
@


\subsection*{[[asmcomp/asmlink.mli]]}

<<signature Asmlink.link>>=
(* Link a set of .cmx/.o files and produce an executable *)

val link: string list -> unit
@

<<type Asmlink.error>>=
type error =
    File_not_found of string
  | Not_an_object_file of string
  | Missing_implementations of string list
  | Inconsistent_interface of string * string * string
  | Inconsistent_implementation of string * string * string
  | Assembler_error of string
  | Linking_error
@

<<exception Asmlink.Error>>=
exception Error of error
@

<<signature Asmlink.report_error>>=
val report_error: error -> unit
@


%-------------------------------------------------------------

<<asmcomp/asmlink.mli>>=
<<copyright header>>

<<signature Asmlink.link>>

<<type Asmlink.error>>

<<exception Asmlink.Error>>

<<signature Asmlink.report_error>>
@


\subsection*{[[asmcomp/asmlink.ml]]}

<<type Asmlink.error (asmcomp/asmlink.ml)>>=
type error =
    File_not_found of string
  | Not_an_object_file of string
  | Missing_implementations of string list
  | Inconsistent_interface of string * string * string
  | Inconsistent_implementation of string * string * string
  | Assembler_error of string
  | Linking_error
@

<<exception Asmlink.Error (asmcomp/asmlink.ml)>>=
exception Error of error
@

<<constant Asmlink.crc_interfaces>>=
(* Consistency check between interfaces and implementations *)

let crc_interfaces =
@

<<constant Asmlink.crc_implementations>>=
let crc_implementations =
@

<<function Asmlink.check_consistency>>=
let check_consistency file_name unit crc =
  List.iter
    (fun (name, crc) ->
      if name = unit.ui_name then begin
        Hashtbl.add crc_interfaces name (file_name, crc)
      end else begin
        try
          let (auth_name, auth_crc) = Hashtbl.find crc_interfaces name in
          if crc <> auth_crc then
            raise(Error(Inconsistent_interface(name, file_name, auth_name)))
        with Not_found ->
          (* Can only happen for unit for which only a .cmi file was used,
             but no .cmo is provided *)
          Hashtbl.add crc_interfaces name (file_name, crc)
      end)
    unit.ui_imports_cmi;
  List.iter
    (fun (name, crc) ->
      if crc <> cmx_not_found_crc then begin
      try
        let (auth_name, auth_crc) = Hashtbl.find crc_implementations name in
        if crc <> auth_crc then
          raise(Error(Inconsistent_implementation(name, file_name, auth_name)))
      with Not_found ->
        Hashtbl.add crc_implementations name (file_name, crc)
      end)
    unit.ui_imports_cmx;
  Hashtbl.add crc_implementations unit.ui_name (file_name, crc)
@

<<constant Asmlink.missing_globals>>=
let missing_globals = ref StringSet.empty
@

<<function Asmlink.is_required>>=
let is_required name =
  StringSet.mem name !missing_globals
@

<<function Asmlink.add_required>>=
let add_required (name, crc) =
  missing_globals := StringSet.add name !missing_globals
@

<<function Asmlink.remove_required>>=
let remove_required name =
  missing_globals := StringSet.remove name !missing_globals
@

<<function Asmlink.scan_file>>=
let scan_file obj_name tolink =
  let file_name =
    try
      find_in_path !load_path obj_name
    with Not_found ->
      raise(Error(File_not_found obj_name)) in
  if Filename.check_suffix file_name ".cmx" then begin
    (* This is a .cmx file. It must be linked in any case.
       Read the infos to see which modules it requires. *)
    let (info, crc) = Compilenv.read_unit_info file_name in
    check_consistency file_name info crc;
    remove_required info.ui_name;
    List.iter add_required info.ui_imports_cmx;
    info :: tolink
  end
  else if Filename.check_suffix file_name ".cmxa" then begin
    (* This is an archive file. Each unit contained in it will be linked
       in only if needed. *)
    let ic = open_in_bin file_name in
    let buffer = String.create (String.length cmxa_magic_number) in
    really_input ic buffer 0 (String.length cmxa_magic_number);
    if buffer <> cmxa_magic_number then
      raise(Error(Not_an_object_file file_name));
    let info_crc_list = (input_value ic : (unit_infos * Digest.t) list) in
    close_in ic;
    List.fold_right
      (fun (info, crc) reqd ->
        if info.ui_force_link
        or !Clflags.link_everything
        or is_required info.ui_name then begin
          check_consistency file_name info crc;
          remove_required info.ui_name;
          List.iter add_required info.ui_imports_cmx;
          info :: reqd
        end else
          reqd)
    info_crc_list tolink
  end
  else raise(Error(Not_an_object_file file_name))
@

<<function Asmlink.make_startup_file>>=
let make_startup_file filename info_list =
  let oc = open_out filename in
  Emitaux.output_channel := oc;
  Location.input_name := "startup"; (* set the name of the "current" input *)
  Compilenv.reset "startup"; (* set the name of the "current" compunit *)
  Emit.begin_assembly();
  let name_list = List.map (fun ui -> ui.ui_name) info_list in
  Asmgen.compile_phrase(Cmmgen.entry_point name_list);
  let apply_functions = ref (IntSet.add 2 (IntSet.add 3 IntSet.empty)) in
  (* The callback functions always reference caml_apply[23] *)
  let curry_functions =
    ref IntSet.empty in
  List.iter
    (fun info ->
      List.iter
        (fun n -> apply_functions := IntSet.add n !apply_functions)
        info.ui_apply_fun;
      List.iter
        (fun n -> curry_functions := IntSet.add n !curry_functions)
        info.ui_curry_fun)
    info_list;
  IntSet.iter
    (fun n -> Asmgen.compile_phrase(Cmmgen.apply_function n))
    !apply_functions;
  IntSet.iter
    (fun n -> List.iter Asmgen.compile_phrase (Cmmgen.curry_function n))
    !curry_functions;
  Array.iter
    (fun name -> Asmgen.compile_phrase(Cmmgen.predef_exception name))
    Runtimedef.builtin_exceptions;
  Asmgen.compile_phrase(Cmmgen.global_table name_list);
  Asmgen.compile_phrase(Cmmgen.data_segment_table name_list);
  Asmgen.compile_phrase(Cmmgen.code_segment_table name_list);
  Asmgen.compile_phrase
    (Cmmgen.frame_table("startup" :: "system" :: name_list));
  Emit.end_assembly();
  close_out oc
@

<<function Asmlink.call_linker>>=
let call_linker file_list startup_file =
  let libname = "libasmrun" ^ ext_lib in
  let runtime_lib =
    try
      find_in_path !load_path libname
    with Not_found ->
      raise(Error(File_not_found libname)) in
  let cmd =
    match Config.system with
      "win32" ->
        if not !Clflags.output_c_object then
          Printf.sprintf "%s /Fe%s -I%s %s %s %s %s %s %s"
            Config.native_c_compiler
            !Clflags.exec_name
            Config.standard_library
            (String.concat " " (List.rev !Clflags.ccopts))
            startup_file
            (String.concat " " (List.rev file_list))
            (String.concat " " (List.rev !Clflags.ccobjs))
            runtime_lib
            Config.c_libraries
        else
          Printf.sprintf "%s /out:%s %s %s"
            Config.native_partial_linker
            !Clflags.object_name
            startup_file
            (String.concat " " (List.rev file_list))
    | _ ->
        if not !Clflags.output_c_object then
          Printf.sprintf "%s -o %s -I%s %s %s %s -L%s %s %s %s"
            Config.native_c_compiler
            !Clflags.exec_name
            Config.standard_library
            (String.concat " " (List.rev !Clflags.ccopts))
            startup_file
            (String.concat " " (List.rev file_list))
            Config.standard_library
            (String.concat " " (List.rev !Clflags.ccobjs))
            runtime_lib
            Config.c_libraries
        else
          Printf.sprintf "%s -o %s %s %s"
            Config.native_partial_linker
            !Clflags.object_name
            startup_file
            (String.concat " " (List.rev file_list))
  in if Ccomp.command cmd <> 0 then raise(Error Linking_error)
@

<<function Asmlink.object_file_name>>=
let object_file_name name =
  let file_name =
    try
      find_in_path !load_path name
    with Not_found ->
      fatal_error "Asmlink.object_file_name: not found" in
  if Filename.check_suffix file_name ".cmx" then
    Filename.chop_suffix file_name ".cmx" ^ ext_obj
  else if Filename.check_suffix file_name ".cmxa" then
    Filename.chop_suffix file_name ".cmxa" ^ ext_lib
  else
    fatal_error "Asmlink.object_file_name: bad ext"
@

<<function Asmlink.link>>=
(* Main entry point *)

let link objfiles =
  let objfiles = "stdlib.cmxa" :: (objfiles @ ["std_exit.cmx"]) in
  let units_tolink = List.fold_right scan_file objfiles [] in
  Array.iter remove_required Runtimedef.builtin_exceptions;
  if not (StringSet.is_empty !missing_globals) then
    raise(Error(Missing_implementations(StringSet.elements !missing_globals)));
  let startup = Filename.temp_file "camlstartup" ext_asm in
  make_startup_file startup units_tolink;
  let startup_obj = Filename.temp_file "camlstartup" ext_obj in
  if Proc.assemble_file startup startup_obj <> 0 then
    raise(Error(Assembler_error startup));
  try
    call_linker (List.map object_file_name objfiles) startup_obj;
    if not !Clflags.keep_startup_file then remove_file startup;
    remove_file startup_obj
  with x ->
    remove_file startup_obj;
    raise x
@

<<function Asmlink.report_error>>=
let report_error = function
    File_not_found name ->
      print_string "Cannot find file "; print_string name
  | Not_an_object_file name ->
      print_string "The file "; print_string name;
      print_string " is not a compilation unit description"
  | Missing_implementations l ->
      open_box 0;
      print_string
        "No implementation(s) provided for the following module(s):";
      List.iter (fun s -> print_space(); print_string s) l;
      close_box()
  | Inconsistent_interface(intf, file1, file2) ->
      open_hvbox 0;
      print_string "Files "; print_string file1; print_string " and ";
      print_string file2; print_space();
      print_string "make inconsistent assumptions over interface ";
      print_string intf;
      close_box()
  | Inconsistent_implementation(intf, file1, file2) ->
      open_hvbox 0;
      print_string "Files "; print_string file1; print_string " and ";
      print_string file2; print_space();
      print_string "make inconsistent assumptions over implementation ";
      print_string intf;
      close_box()
  | Assembler_error file ->
      print_string "Error while assembling "; print_string file
  | Linking_error ->
      print_string "Error during linking"
@


%-------------------------------------------------------------

<<asmcomp/asmlink.ml>>=
<<copyright header>>

(* Link a set of .cmx/.o files and produce an executable *)

open Sys
open Misc
open Config
open Compilenv

<<type Asmlink.error (asmcomp/asmlink.ml)>>

<<exception Asmlink.Error (asmcomp/asmlink.ml)>>

<<constant Asmlink.crc_interfaces>>
      (Hashtbl.create 17 : (string, string * Digest.t) Hashtbl.t)
<<constant Asmlink.crc_implementations>>
      (Hashtbl.create 17 : (string, string * Digest.t) Hashtbl.t)

<<function Asmlink.check_consistency>>

(* First pass: determine which units are needed *)

module StringSet = Set

<<constant Asmlink.missing_globals>>

<<function Asmlink.is_required>>

<<function Asmlink.add_required>>

<<function Asmlink.remove_required>>

<<function Asmlink.scan_file>>

(* Second pass: generate the startup file and link it with everything else *)

module IntSet = Set

<<function Asmlink.make_startup_file>>

<<function Asmlink.call_linker>>

<<function Asmlink.object_file_name>>

<<function Asmlink.link>>

(* Error report *)

open Format

<<function Asmlink.report_error>>
@


\section{[[./driver/]]}

\subsection*{[[./driver/optcompile.mli]]}

<<signature Optcompile.interface>>=
(* Compile a .ml or .mli file *)

val interface: string -> unit
@

<<signature Optcompile.implementation>>=
val implementation: string -> unit
@

<<signature Optcompile.c_file>>=
val c_file: string -> unit
@

<<signature Optcompile.initial_env>>=
val initial_env: unit -> Env.t
@

<<signature Optcompile.init_path>>=
val init_path: unit -> unit
@


%-------------------------------------------------------------

<<./driver/optcompile.mli>>=
<<copyright header>>

<<signature Optcompile.interface>>
<<signature Optcompile.implementation>>
<<signature Optcompile.c_file>>

<<signature Optcompile.initial_env>>
<<signature Optcompile.init_path>>
@


\subsection*{[[./driver/optcompile.ml]]}

<<function Optcompile.init_path>>=
(* Initialize the search path.
   The current directory is always searched first,
   then the directories specified with the -I option (in command-line order),
   then the standard library directory. *)

let init_path () =
  let dirs =
    if !Clflags.thread_safe then
     Filename.concat Config.standard_library "threads" :: !Clflags.include_dirs
    else
     !Clflags.include_dirs in
  load_path := "" :: List.rev (Config.standard_library :: dirs);
  Env.reset_cache()
@

<<function Optcompile.initial_env>>=
(* Return the initial environment in which compilation proceeds. *)

let initial_env () =
  init_path();
  try
    if !Clflags.nopervasives
    then Env.initial
    else Env.open_pers_signature "Pervasives" Env.initial
  with Not_found ->
    fatal_error "cannot open Pervasives.cmi"
@

<<function Optcompile.preprocess>>=
(* Optionally preprocess a source file *)

let preprocess sourcefile tmpfile =
  match !Clflags.preprocessor with
    None -> sourcefile
  | Some pp ->
      let comm = pp ^ " " ^ sourcefile ^ " > " ^ tmpfile in
      if Ccomp.command comm <> 0 then begin
        Printf.eprintf "Preprocessing error\n";
        flush stderr;
        exit 2
      end;
      tmpfile
@

<<function Optcompile.remove_preprocessed>>=
let remove_preprocessed inputfile =
  match !Clflags.preprocessor with
    None -> ()
  | Some _ -> remove_file inputfile
@

<<exception Optcompile.Outdated_version>>=
(* Parse a file or get a dumped syntax tree in it *)

exception Outdated_version
@

<<function Optcompile.parse_file>>=
let parse_file inputfile parse_fun ast_magic =
  let ic = open_in_bin inputfile in
  let is_ast_file =
    try
      let buffer = String.create (String.length ast_magic) in
      really_input ic buffer 0 (String.length ast_magic);
      if buffer = ast_magic then true
      else if String.sub buffer 0 9 = String.sub ast_magic 0 9 then
        raise Outdated_version
      else false
    with
      Outdated_version ->
        fatal_error "Ocaml and preprocessor have incompatible versions"
    | _ -> false
  in
  let ast =
    try
      if is_ast_file then begin
        Location.input_name := input_value ic;
        input_value ic
      end else begin
        seek_in ic 0;
        Location.input_name := inputfile;
        parse_fun (Lexing.from_channel ic)
      end
    with x -> close_in ic; raise x
  in
  close_in ic;
  ast
@

<<function Optcompile.interface>>=
(* Compile a .mli file *)

let interface sourcefile =
  let prefixname = Filename.chop_extension sourcefile in
  let modulename = String.capitalize(Filename.basename prefixname) in
  let inputfile = preprocess sourcefile (prefixname ^ ".ppi") in
  let ast = parse_file inputfile Parse.interface ast_intf_magic_number in
  let sg = Typemod.transl_signature (initial_env()) ast in
  if !Clflags.print_types then (Printtyp.signature sg; print_newline());
  Env.save_signature sg modulename (prefixname ^ ".cmi");
  remove_preprocessed inputfile
@

<<function Optcompile.print_if>>=
(* Compile a .ml file *)

let print_if flag printer arg =
  if !flag then begin printer arg; print_newline() end;
  arg
@

<<function Optcompile.implementation>>=
let implementation sourcefile =
  let prefixname = Filename.chop_extension sourcefile in
  let modulename = String.capitalize(Filename.basename prefixname) in
  let inputfile = preprocess sourcefile (prefixname ^ ".ppo") in
  let ast = parse_file inputfile Parse.implementation ast_impl_magic_number in
  let (str, sg, finalenv) = Typemod.type_structure (initial_env()) ast in
  if !Clflags.print_types then (Printtyp.signature sg; print_newline());

(*
  let coercion =
    if Sys.file_exists (prefixname ^ ".mli") then begin
      let intf_file =
        try find_in_path !load_path (prefixname ^ ".cmi")
        with Not_found -> prefixname ^ ".cmi" in
      let dclsig = Env.read_signature modulename intf_file in
      Includemod.compunit sourcefile sg intf_file dclsig
    end else begin
      Typemod.check_nongen_schemes finalenv str;
      Env.save_signature sg modulename (prefixname ^ ".cmi");
      Tcoerce_none
    end in
*)

    let (coercion, crc) =
      if Sys.file_exists (prefixname ^ ".mli") then begin
        let intf_file =
          try find_in_path !load_path (prefixname ^ ".cmi")
          with Not_found -> prefixname ^ ".cmi" in
        let (dclsig, crc) = Env.read_signature modulename intf_file in
        (Includemod.compunit sourcefile sg intf_file dclsig, crc)
      end else begin
        let crc = Env.save_signature sg modulename (prefixname ^ ".cmi") in
        Typemod.check_nongen_schemes str;
        (Tcoerce_none, crc)
      end in

  Compilenv.reset modulename;
  let (compunit_size, lam) =
    Translmod.transl_store_implementation modulename str coercion in
  Asmgen.compile_implementation prefixname compunit_size
    (print_if Clflags.dump_lambda Printlambda.lambda
      (Simplif.simplify_lambda
        (print_if Clflags.dump_rawlambda Printlambda.lambda lam)));
  Compilenv.save_unit_info (prefixname ^ ".cmx");
  remove_preprocessed inputfile
@

<<function Optcompile.c_file>>=
let c_file name =
  if Ccomp.compile_file_native name <> 0 then exit 2
@


%-------------------------------------------------------------

<<./driver/optcompile.ml>>=
<<copyright header>>

(* The batch compiler *)

open Misc
open Config
open Format
open Typedtree

<<function Optcompile.init_path>>

<<function Optcompile.initial_env>>

<<function Optcompile.preprocess>>

<<function Optcompile.remove_preprocessed>>

<<exception Optcompile.Outdated_version>>

<<function Optcompile.parse_file>>

<<function Optcompile.interface>>

<<function Optcompile.print_if>>

<<function Optcompile.implementation>>

<<function Optcompile.c_file>>
@


\subsection*{[[./driver/opterrors.mli]]}

<<signature Opterrors.report_error>>=
(* Error report *)

val report_error: exn -> unit
@


%-------------------------------------------------------------

<<./driver/opterrors.mli>>=
<<copyright header>>

<<signature Opterrors.report_error>>
@


\subsection*{[[./driver/opterrors.ml]]}

<<function Opterrors.report_error>>=
(* Report an error *)

let report_error exn =
  open_box 0;
  begin match exn with
    Lexer.Error(err, start, stop) ->
      Location.print {loc_start = start; loc_end = stop};
      Lexer.report_error err
  | Syntaxerr.Error err ->
      Syntaxerr.report_error err
  | Env.Error err ->
      Env.report_error err
  | Typecore.Error(loc, err) ->
      Location.print loc; Typecore.report_error err
  | Typetexp.Error(loc, err) ->
      Location.print loc; Typetexp.report_error err
  | Typedecl.Error(loc, err) ->
      Location.print loc; Typedecl.report_error err
  | Includemod.Error err ->
      Includemod.report_error err
  | Typemod.Error(loc, err) ->
      Location.print loc; Typemod.report_error err
  | Translcore.Error(loc, err) ->
      Location.print loc; Translcore.report_error err
  | Compilenv.Error code ->
      Compilenv.report_error code
  | Asmgen.Error code ->
      Asmgen.report_error code
  | Asmlink.Error code ->
      Asmlink.report_error code
  | Asmlibrarian.Error code ->
      Asmlibrarian.report_error code
  | Sys_error msg ->
      print_string "I/O error: "; print_string msg
  | x ->
      close_box(); raise x
  end;
  close_box(); print_newline()
@


%-------------------------------------------------------------

<<./driver/opterrors.ml>>=
<<copyright header>>

(* Error report *)

open Format
open Location

<<function Opterrors.report_error>>
@


\subsection*{[[./driver/optmain.ml]]}

<<function Optmain.process_interface_file>>=
let process_interface_file name =
  Optcompile.interface name
@

<<function Optmain.process_implementation_file>>=
let process_implementation_file name =
  Optcompile.implementation name;
  objfiles := (Filename.chop_extension name ^ ".cmx") :: !objfiles
@

<<function Optmain.process_file>>=
let process_file name =
  if Filename.check_suffix name ".ml"
  or Filename.check_suffix name ".mlt" then begin
    Optcompile.implementation name;
    objfiles := (Filename.chop_extension name ^ ".cmx") :: !objfiles
  end
  else if Filename.check_suffix name ".mli" then
    Optcompile.interface name
  else if Filename.check_suffix name ".cmx" 
       or Filename.check_suffix name ".cmxa" then
    objfiles := name :: !objfiles
  else if Filename.check_suffix name ext_obj
       or Filename.check_suffix name ext_lib then
    ccobjs := name :: !ccobjs
  else if Filename.check_suffix name ".c" then begin
    Optcompile.c_file name;
    ccobjs := (Filename.chop_suffix (Filename.basename name) ".c" ^ ext_obj)
    :: !ccobjs
  end
  else
    raise(Arg.Bad("don't know what to do with " ^ name))
@

<<function Optmain.print_version_number>>=
let print_version_number () =
  print_string "The Objective Caml native-code compiler, version ";
  print_string Config.version; print_newline();
  print_string "Standard library directory: ";
  print_string Config.standard_library; print_newline()
@

<<constant Optmain.usage>>=
let usage = "Usage: ocamlopt <options> <files>\nOptions are:"
@

<<function Optmain.main>>=
let main () =
  try
    native_code := true;
    Arg.parse [
       "-a", Arg.Set make_archive, " Build a library";
       "-c", Arg.Set compile_only, " Compile only (do not link)";
       "-cclib", Arg.String(fun s -> ccobjs := s :: !ccobjs),
             "<opt>  Pass option <opt> to the C linker";
       "-ccopt", Arg.String(fun s -> ccopts := s :: !ccopts),
             "<opt>  Pass option <opt> to the C compiler and linker";
       "-compact", Arg.Clear optimize_for_speed,
             " Optimize code size rather than speed";
       "-i", Arg.Set print_types, " Print the types";
       "-I", Arg.String(fun dir -> include_dirs := dir :: !include_dirs),
             "<dir>  Add <dir> to the list of include directories";
       "-impl", Arg.String process_implementation_file,
             "<file>  Compile <file> as a .ml file";
       "-inline", Arg.Int(fun n -> inline_threshold := n * 8),
             "<n>  Set aggressiveness of inlining to <n>";
       "-intf", Arg.String process_interface_file,
             "<file>  Compile <file> as a .mli file";
       "-linkall", Arg.Set link_everything,
             " Link all modules, even unused ones";
       "-noassert", Arg.Set noassert, " Don't compile assertion checks";
       "-o", Arg.String(fun s -> exec_name := s;
                                 archive_name := s;
                                 object_name := s),
             "<file>  Set output file name to <file> (default a.out)";
       "-output-obj", Arg.Unit(fun () -> output_c_object := true),
             "Output a C object file instead of an executable";
       "-pp", Arg.String(fun s -> preprocessor := Some s),
             "<command>  Pipe sources through preprocessor <command>";
       "-S", Arg.Set keep_asm_file, " Keep intermediate assembly file";
       "-thread", Arg.Set thread_safe, " Use thread-safe standard library";
       "-unsafe", Arg.Set fast,
             " No bounds checking on array and string access";
       "-v", Arg.Unit print_version_number, " Print compiler version number";
       "-verbose", Arg.Set verbose, " Print calls to external commands";

       "-nopervasives", Arg.Set nopervasives, " (undocumented)";
       "-drawlambda", Arg.Set dump_rawlambda, " (undocumented)";
       "-dlambda", Arg.Set dump_lambda, " (undocumented)";
       "-dcmm", Arg.Set dump_cmm, " (undocumented)";
       "-dsel", Arg.Set dump_selection, " (undocumented)";
       "-dlive", Arg.Unit(fun () -> dump_live := true;
                                    Printmach.print_live := true),
             " (undocumented)";
       "-dspill", Arg.Set dump_spill, " (undocumented)";
       "-dsplit", Arg.Set dump_split, " (undocumented)";
       "-dinterf", Arg.Set dump_interf, " (undocumented)";
       "-dprefer", Arg.Set dump_prefer, " (undocumented)";
       "-dalloc", Arg.Set dump_regalloc, " (undocumented)";
       "-dreload", Arg.Set dump_reload, " (undocumented)";
       "-dscheduling", Arg.Set dump_scheduling, " (undocumented)";
       "-dlinear", Arg.Set dump_linear, " (undocumented)";
       "-dstartup", Arg.Set keep_startup_file, " (undocumented)";

       "-", Arg.String process_file,
            "<file>  Treat <file> as a file name (even if it starts with `-')"
      ] process_file usage;
    if !make_archive then begin
      Optcompile.init_path();
      Asmlibrarian.create_archive (List.rev !objfiles) !archive_name
    end
    else if not !compile_only & !objfiles <> [] then begin
      Optcompile.init_path();
      Asmlink.link (List.rev !objfiles)
    end;
    exit 0
  with x ->
    Format.set_formatter_out_channel stderr;
    Opterrors.report_error x;
    exit 2
@

<<toplevel Optmain._1>>=
let _ = Printexc.catch main ()
@


%-------------------------------------------------------------

<<./driver/optmain.ml>>=
<<copyright header>>

open Config
open Clflags

<<function Optmain.process_interface_file>>

<<function Optmain.process_implementation_file>>

<<function Optmain.process_file>>

<<function Optmain.print_version_number>>

<<constant Optmain.usage>>

<<function Optmain.main>>

<<toplevel Optmain._1>>
@


