# -*- org -*-

* TODO

** compilers
- port more arch x86_64(amd64)/arm64/riscv/mips
  
** test infra

** dev infra
- restore working semgrep.yml

* 0.3 (Q4 2025) ( ?? )

** tools
- backport support for lexer rules with parameters (3.07)

* 0.2 (Q3 2025) (working efuns and xix, arm progress)

** stdlib
- backport String.{starts_with,ends_with} (but without labels) (4.13.0)
  and capitalize_ascii (4.03)
- backport Thread.Exit exn (4.14.0)
- more backport of bytes vs strings functions (e.g., Pervasives.output_substring)

** language
- partial support for [@@] after module binding

** misc
- add some --std=89 to be able to compile with recent gcc
- add graphics.cma in docker image so can compile graphical programs
  like efuns with ocaml-light

* 0.1 (Q2 2025) (Dockerfile/Nix/GHA CI checks, native working, dune, tests infra, Xix)
# ported enough features so I can compile some of xix via build-mk.sh and mk
# in bytecode and (static) native modes!

** stdlib
- backport Obj.is_int and Obj.xxx_tag (2.02)
- backport Printf.kprintf and ksprintf and support for %! to flush (3.08)
- backport String.trim and String.map (4.00) and partial backport of xxx_ascii
  functions (4.03)
- partial backport of bytes.ml (4.02.0)
- backport uchar.ml (4.03)
- backport fun.ml (but without labels) and Fun.protect (4.07.2)
- backport bool.ml, int.ml, and float.ml (4.08)
- backport option.ml and result.ml (4.08) as well as the result pervasive type
- backport either.ml (4.12.0)
- backport removal of genlex.ml (4.14.0) and sort.ml, but kept stream.ml
  (it is used by a few examples/)
- backport of Arg.align and Arg.parse_argv
  
** language
- partial support for attributes ([@@...]), object types (<Cap.exec; ..>),
  objet cast (foo :> Cap.exec), object defs (object ... end),
  and labels (~finally:) but just enough so
  that we can parse the code in xix (but we discard the constructs)

** typechecker
- backport ability to type string-format in higher order functions like
  Logs.info (fun m -> m "%s" name) (extension to type_expect())

** compilers
- restore asmcomp/ for x86 (using gcc -m32) and testasmcomp/ is building

** test infra
- add Dockerfile and docker.yml GHA (Github Action) CI checks
- add shell.nix and nix.yml GHA for macOS and Linux CI checks
- add back the test/ and testasmcomp/ (but not testobjects/) from
  the OCaml github repo at the 1.07 time (commit a234a77991)
  and run them in the Dockerfile and in CI
  => minimum regression test infra!
- add examples/ for more tests taken from "Le language Caml"

** dev infra
- compile ocaml light code also with dune! so get better warnings,
  faster build, and the production of .cmt in _build/ allowing
  merlin (and efuns) to work correctly for file navigation and type info!!
- started to use poor's man Logs (needed typechecker improvement too)

** internals
- remove files and support for old arch (alpha, sparc, vax, etc.)
  and OSes (macOS, windows NT, Solaris)

** misc
- fix configure to work with recent gcc/clang (add some
  -Wno-implicit-function-declaration and other flags)
- backport ability to store source in Foo.ml or foo.ml
- backport ocamlc -version
  
* Beta (2018) (plan9 support)

** os
- compile byterun/ for plan9 so I can run ocaml (light) bytecode programs
  under my fork of plan9!
  (might be in ~/github/ocaml-light-for-plan9-branch/)

* Alpha (2015) (fork of OCaml 1.07 without OO without functors)
# see also pad.txt history section

** language
- remove support for classes and objects as it complicates a lot the
  typechecking code for providing only a controversial feature (typeclasses or
  implicits are IMHO better). See also REMOVE_OBJ.patch.
  Note that I didn't need to remove the use of objects in the compiler itself
  because they didn't even like the oo extensions and so didn't use it :)
  (they actually just use it very lightly in asmcomp/ but the code could
  be easily switched to plain records).
- remove functors, again to simplify the code as ocaml light is meant
  for educational purpose (part of my principia softwarica project).
  This meant slightly refactor the asmcomp/ code that was the only user
  of functors (and set/map)
- backport a few features from recent OCaml to ocaml-light:
    * record 'with' (see diff_with_record)

** compilers  
- removed some native targets: alpha, hppa, m68k, power, and sparc.
  I just kept i386, mips, and later backported the ARM port from ocaml 2.01!

** tools
- backport named regexps in ocamllex (let name = regexp ...)
  
** stdlib
# see also pad.txt changes section
- backport buffer.ml (from 3.12.0)
- backport basic backtrace in printexc.ml (from 3.10.2 and 4.01)

** build infra
- a working configure that can work on some recent Mac and Linux

** os
- remove support for old macOS and Windows NT, to remove ugly cruft.

* OCaml-light pre-history

** OCaml

** Caml Special Light

** Caml light

* Caml and ML history

** Caml

** ML
