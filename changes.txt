# -*- org -*-

* TODO

** compilers
- finish native arm port
- port more arch x86_64(amd64)/arm64/riscv/mips
  
** test infra

* 0.3 (Q4 2025) ( ?arm native? )

** language
- backport Shorthand notation for records { lbl; } in expr and pats (3.12.0)

** tools
- ocamllex: backport support for lexer rules with parameters (3.07)

** stdlib
- backport Format.formatter_of_buffer (2.01)

** dev infra
- restore working semgrep.yml


* 0.2 (Q3 2025) (efuns and xix build with ocaml-light, arm progress)

** language
- partial support for [@@] after module binding

** stdlib
- backport String.{starts_with,ends_with} (but without labels) (4.13.0)
  and capitalize_ascii (4.03)
- backport Thread.Exit exn (4.14.0)
- more backport of bytes vs strings functions (e.g., Pervasives.output_substring)

** misc
- add some --std=89 to be able to compile with recent gcc
- add graphics.cma in docker image so can compile graphical programs
  like efuns with ocaml-light

* 0.1 (Q2 2025) (Dockerfile/Nix/GHA CI checks, native working, dune, tests infra, Xix)
# ported enough features so I can compile some of xix via build-mk.sh and mk
# in bytecode and (static) native modes!

** language
- partial support for attributes ([@@...]), object types (<Cap.exec; ..>),
  objet cast (foo :> Cap.exec), object defs (object ... end),
  and labels (~finally:) but just enough so
  that we can parse the code in xix (but we discard the constructs)

** stdlib
- backport Obj.is_int and Obj.xxx_tag (2.02)
- backport Printf.kprintf and ksprintf and support for %! to flush (3.08)
- backport String.trim and String.map (4.00) and partial backport of xxx_ascii
  functions (4.03)
- partial backport of bytes.ml (4.02.0)
- backport uchar.ml (4.03)
- backport fun.ml (but without labels) and Fun.protect (4.07.2)
- backport bool.ml, int.ml, and float.ml (4.08)
- backport option.ml and result.ml (4.08) as well as the result pervasive type
- backport either.ml (4.12.0)
- backport removal of genlex.ml (4.14.0) and sort.ml, but kept stream.ml
  (it is used by a few examples/)
- backport of Arg.align and Arg.parse_argv
  
** typechecker
- backport ability to type string-format in higher order functions like
  Logs.info (fun m -> m "%s" name) (extension to type_expect())

** compilers
- restore asmcomp/ for x86 (using gcc -m32) and testasmcomp/ is building

** test infra
- add Dockerfile and docker.yml GHA (Github Action) CI checks
- add shell.nix and nix.yml GHA for macOS and Linux CI checks
- add back the test/ and testasmcomp/ (but not testobjects/) from
  the OCaml github repo at the 1.07 time (commit a234a77991)
  and run them in the Dockerfile and in CI
  => minimum regression test infra!
- add examples/ for more tests taken from "Le language Caml"

** dev infra
- compile ocaml light code also with dune! so get better warnings,
  faster build, and the production of .cmt in _build/ allowing
  merlin (and efuns) to work correctly for file navigation and type info!!
- started to use poor's man Logs (needed typechecker improvement too)

** internals
- remove files and support for old arch (alpha, sparc, vax, etc.)
  and OSes (macOS, windows NT, Solaris)

** misc
- fix configure to work with recent gcc/clang (add some
  -Wno-implicit-function-declaration and other flags)
- backport ability to store source in Foo.ml or foo.ml
- backport ocamlc -version
  
* Beta (2018) (plan9 support)

** os
- compile byterun/ for plan9 so I can run ocaml (light) bytecode programs
  under my fork of plan9!
  (might be in ~/github/ocaml-light-for-plan9-branch/)

* Alpha (2015) (fork of OCaml 1.07 without OO without functors)
# see also pad.txt history section

** language
- remove support for classes and objects as it complicates a lot the
  typechecking code for providing only a controversial feature (typeclasses or
  implicits are IMHO better). See also REMOVE_OBJ.patch.
  Note that I didn't need to remove the use of objects in the compiler itself
  because they didn't even like the oo extensions and so didn't use it :)
  (they actually just use it very lightly in asmcomp/ but the code could
  be easily switched to plain records).
- remove functors, again to simplify the code as ocaml light is meant
  for educational purpose (part of my principia softwarica project).
  This meant slightly refactor the asmcomp/ code that was the only user
  of functors (and set/map)
- backport a few features from recent OCaml to ocaml-light:
    * record 'with' (see diff_with_record)

** compilers  
- removed some native targets: alpha, hppa, m68k, power, and sparc.
  I just kept i386, mips, and later backported the ARM port from ocaml 2.01!

** tools
- ocamllex: backport support for named regexps (let name = regexp ...)
  
** stdlib
# see also pad.txt changes section
- backport buffer.ml (from 3.12.0, but added originally in 2.01)
- backport basic backtrace in printexc.ml (from 3.10.2 and 4.01)

** build infra
- a working configure that can work on some recent Mac and Linux

** os
- remove support for old macOS and Windows NT, to remove ugly cruft.

* OCaml-light pre-history

** OCaml
# originally in Changes

*** Objective Caml 1.07:
  --------------------
  
  * Native-code compiler:
    - Revised interface between generated code and GC, fixes serious GC
      problems with signals and native threads.
    - Added "-thread" option for compatibility with ocamlc.
  
  * Debugger: correctly print instance variables of objects.
  
  * Run-time system: ported to OpenBSD.
  
  * Standard library: fixed wrong interface for Marshal.to_buffer and
    Obj.unmarshal.
  
  * Num library: added Intel x86 optimized asm code (courtesy of
    Bernard Serpette).
  
  * Thread libraries:
    - Native threads: fixed GC bugs and installation procedure.
    - Bytecode threads: fixed problem with "Marshal" module.
    - Both: added Event.always.
  
  * MS Windows port: better handling of long command lines in Sys.command
  
*** Objective Caml 1.06:
  --------------------
  
  * Language:
    - Added two new keywords: "assert" (check assertion) and "lazy"
      (delay evaluation).
    - Allow identifiers to start with "_" (such identifiers are treated
      as lowercase idents).
  
  * Objects:
    - Added "protected" methods (visible only from subclasses, can be hidden
      in class type declared in module signature).
    - Objects can be compared using generic comparison functions.
    - Fixed compilation of partial application of object constructors.
   
  * Type system:
    - Occur-check now more strict (all recursions must traverse an object).
    - A few bugs fixed.
  
  * Run-time system:
    - A heap compactor was implemented, so long-running programs can now
      fight fragmentation.
    - The meaning of the "space_overhead" parameter has changed.
    - The macros Push_roots and Pop_roots are superseded by Begin_roots* and
      End_roots.
    - Bytecode executable includes list of primitives used, avoids crashes
      on version mismatch.
    - Reduced startup overhead for marshalling, much faster marshalling of
      small objects.
    - New exception Stack_overflow distinct from Out_of_memory.
    - Maximum stack size configurable.
    - I/O revised for compatibility with compactor and with native threads.
    - All C code ANSIfied (new-style function declarations, etc).
    - Threaded code work on all 64-bit processors, not just Alpha/Digital Unix.
    - Better printing of uncaught exceptions.
  
  * Both compilers:
    - Parsing: more detailed reporting of syntax errors (e.g. shows
      unmatched opening parenthesis on missing closing parenthesis).
    - Check consistency between interfaces (.cmi).
    - Revised rules for determining dependencies between modules.
    - Options "-verbose" for printing calls to C compiler, "-noassert"
      for turning assertion checks off.
  
  * Native-code compiler:
    - Machine-dependent parts rewritten using inheritance instead of
      parameterized modules.
    - GC bug in value let rec fixed.
    - Port to Linux/Alpha.
    - Sparc: cleaned up use of %g registers, now compatible with Solaris threads.
  
  * Top-level interactive system:
    - Can execute Caml script files given on command line.
    - Reads commands from ./.ocamlinit on startup.
    - Now thread-compatible.
  
  * Standard library:
    - New library module: Lazy (delayed computations).
    - New library module: Marshal.  Allows marshalling to strings and
      transmission of closures between identical programs (SPMD parallelism).
    - Filename: "is_absolute" is superseded by "is_implicit" and "is_relative".
      To adapt old programs, change "is_absolute x" to "not (is_implicit x)"
      (but the new "is_relative" is NOT the opposite of the old "is_absolute").
    - Array, Hashtbl, List, Map, Queue, Set, Stack, Stream:
      the "iter" functions now take as argument a unit-returning function.
    - Format: added "printf" interface to the formatter (see the documentation).
      Revised behaviour of simple boxes: no more than one new line is output
      when consecutive break hints should lead to multiple line breaks.
    - Stream: revised implementation, renamed Parse_failure to Failure and
      Parse_error to Error (don't you love gratuitous changes?).
    - String: added index, rindex, index_from, rindex_from.
    - Array: added mapi, iteri, fold_left, fold_right, init.
    - Added Map.map, Set.subset, Printexc.to_string.
  
  * ocamllex: lexers generated by ocamllex can now handle all characters,
    including '\000'.
  
  * ocamlyacc: fixed bug with function closures returned by parser rules.
  
  * Debugger:
    - Revised generation of events.
    - Break on function entrance.
    - New commands start/previous.
    - The command loadprinter now try to recursively load required
      modules.
    - Numerous small fixes.
  
  * External libraries:
    - systhreads: can now use POSIX threads; POSIX and Win32 threads are
      now supported by the native-code compiler.
    - dbm and graph: work in native code.
    - num: fixed bug in Nat.nat_of_string.
    - str: fixed deallocation bug with case folding.
    - win32unix: use Win32 handles instead of (buggy) VC++ emulation of Unix
      file handles; added gettimeofday.
  
  * Emacs editing mode and debugger interface updated to July '97 version.
  
*** Objective Caml 1.05:
  --------------------
  
  * Typing: fixed several bugs causing spurious type errors.
  
  * Native-code compiler: fixed instruction selection bug causing GC to
  see ill-formed pointers; fixed callbacks to support invocation from a
  main program in C.
  
  * Standard library: fixed String.lowercase; Weak now resists integers.
  
  * Toplevel: multiple phrases without intermediate ";;" now really supported;
  fixed value printing problems where the wrong printer was selected.
  
  * Debugger: fixed printing problem with local references; revised
  handling of checkpoints; various other small fixes.
  
  * Macintosh port: fixed signed division problem in bytecomp/emitcode.ml
  
*** Objective Caml 1.04:
  --------------------
  
  * Replay debugger ported from Caml Light; added debugger support in
    compiler (option -g) and runtime system. Debugger is alpha-quality
    and needs testing.
  
  * Parsing:
    - Support for "# linenum" directives.
    - At toplevel, allow several phrases without intermediate ";;".
  
  * Typing:
    - Allow constraints on datatype parameters, e.g. 
      type 'a foo = ... constraint 'a = 'b * 'c.
    - Fixed bug in signature matching in presence of free type variables '_a.
    - Extensive cleanup of internals of type inference.
  
  * Native-code compilation:
    - Inlining of small functions at point of call (fairly conservative).
    - MIPS code generator ported to SGI IRIX 6.
    - Better code generated for large integer constants.
    - Check for urgent GC when allocating large objects in major heap.
    - PowerPC port: better scheduling, reduced TOC consumption.
    - HPPA port: handle long conditional branches gracefully,
      several span-dependent bugs fixed.
  
  * Standard library:
    - More floating-point functions (all ANSI C float functions now available).
    - Hashtbl: added functorial interface (allow providing own equality
      and hash functions); rehash when resizing, avoid memory leak on
      Hashtbl.remove.
    - Added Char.uppercase, Char.lowercase, String.uppercase, String.lowercase,
      String.capitalize, String.uncapitalize.
    - New module Weak for manipulating weak pointers.
    - New module Callback for registering closures and exceptions to be
      used from C.
  
  * Foreign interface:
    - Better support for callbacks (C calling Caml), exception raising
      from C, and main() in C. Added function to remove a global root.
    - Option -output-obj to package Caml code as a C library.
  
  * Thread library: fixed bug in timed_read and timed_write operations;
    Lexing.from_function and Lexing.from_channel now reentrant.
  
  * Unix interface: renamed EACCESS to EACCES (the POSIX name); added setsid;
    fixed bug in inet_addr_of_string for 64-bit platforms.
  
  * Ocamlyacc: default error function no longer prevents error recovery.
  
  * Ocamllex: fixed reentrancy problem w.r.t. exceptions during refill;
    fixed output problem (\r\r\n) under Win32.
  
  * Macintosh port:
    - The makefiles are provided for compiling and installing O'Caml on
      a Macintosh with MPW 3.4.1.
    - An application with the toplevel in a window is forthcoming.
  
  * Windows NT/95 port: updated toplevel GUI to that of Caml Light 0.73.
  
  * Emacs editing mode and debugger interface included in distribution.
  
  
*** Objective Caml 1.03:
  --------------------
  
  * Typing:
    - bug with type names escaping their scope via unification with
      non-generalized type variables '_a completely fixed;
    - fixed bug in occur check : it was too restrictive;
    - fixed bug of coercion operators;
    - check that no two types of the same name are generated in a module
      (there was no check for classes);
    - "#install_printer" works again;
    - fixed bug in printing of subtyping errors;
    - in class interfaces, construct "method m" (without type) change
      the status of method m from abstract to concrete;
    - in a recursive definition of class interfaces, a class can now
      inherit from a previous class;
    - typing of a method make use of an eventual previously given type
      of this method, yielding clearer type errors.
  
  * Compilation (ocamlc and ocamlopt):
    - fixed bug in compilation of classes.
  
  * Native-code compilation:
    - optimization of functions taking tuples of arguments;
    - code emitter for the Motorola 680x0 processors (retrocomputing week);
    - Alpha/OSF1: generate frame descriptors, avoids crashes when e.g.
      exp() or log() cause a domain error; fixed bug with
      String.length "literal";
    - Sparc, Mips, HPPA: removed marking of scanned stack frames
      (benefits do not outweight cost).
  
  * Standard library:
    - Arg.parse now prints documentation for command-line options;
    - I/O buffers (types in_channel and out_channel) now heap-allocated,
      avoids crashing when closing a channel several times;
    - Overflow bug in compare() fixed;
    - GC bug in raising Sys_error from I/O functions fixed;
    - Parsing.symbol_start works even for epsilon productions.
  
  * Foreign interface: main() in C now working, fixed bug in library
    order at link time.
  
  * Thread library: guard against calling thread functions before Thread.create.
  
  * Unix library: fixed getsockopt, setsockopt, open_process_{in,out}.
  
  * Perl-free, cpp-free, cholesterol-free installation procedure.
  
  
*** Objective Caml 1.02:
  --------------------
  * Typing: 
    - fixed bug with type names escaping their scope via unification
      with non-generalized type variables '_a;
    - keep #class abbreviations longer;
    - faster checking of well-formed abbreviation definitions;
    - stricter checking of "with" constraints over signatures (arity
      mismatch, overriding of an already manifest type).
  
  * Compilation (ocamlc and ocamlopt):
    - fixed bug in compilation of recursive classes;
    - [|...|] and let...rec... allowed inside definitions of recursive
      data structures;
  
  * Bytecode compilation: fixed overflow in linker for programs with
    more than 65535 globals and constants.
  
  * Native-code compilation:
    - ocamlopt ported to HPPA under HP/UX, Intel x86 under Solaris 2,
      PowerMacintosh under MkLinux;
    - fixed two bugs related to floating-point arrays (one with "t array"
      where t is an abstract type implemented as float, one with
      comparison between two float arrays on 32 bit platforms);
    - fixed reloading/spilling problem causing non-termination of
      register allocation;
    - fixed bugs in handling of () causing loss of tail recursion;
    - fixed reloading bug in indirect calls.
  
  * Windows NT/95 port:
    - complete port of the threads library (Pascal Cuoq);
    - partial port of the Unix library (Pascal Cuoq);
    - expansion of *, ? and @ on the command line.
  
  * Standard library:
    - bug in in List.exists2 fixed;
    - bug in "Random.int n" for very large n on 64-bit machines fixed;
    - module Format: added a "general purpose" type of box (open_box);
      can output on several formatters at the same time.
  
  * The "threads" library:
    - implementation on top of native threads available for Win32 and
      POSIX 1003.1c;
    - added -thread option to select a thread-safe version of the
      standard library, the ThreadIO module is no longer needed.
  
  * The "graph" library: avoid invalid pixmaps when doing 
    open_graph/close_graph several times.
  
  * The "dynlink" library: support for "private" (no re-export) dynamic loading.
  
  * ocamlyacc: skip '...' character literals correctly.
  
  * C interface: C code linked with O'Caml code can provide its own main()
    and call caml_main() later.
  
  
*** Objective Caml 1.01:
  --------------------
  * Typing: better report of type incompatibilities; 
    non-generalizable type variables in a struct...end no longer flagged
    immediately as an error;
    name clashes during "open" avoided.
  
  * Fixed bug in output_value where identical data structures
    could have different external representations; this bug caused wrong
    "inconsistent assumptions" errors when checking compatibility of
    interfaces at link-time.
  
  * Standard library: fixed bug in Array.blit on overlapping array sections
  
  * Unmarshaling from strings now working.
  
  * ocamlc, ocamlopt: new flags -intf and -impl to force compilation as
    an implementation/an interface, regardless of file extension;
    overflow bug on wide-range integer pattern-matchings fixed.
  
  * ocamlc: fixed bytecode generation bug causing problems with compilation
    units defining more than 256 values
  
  * ocamlopt, all platforms:
    fixed GC bug in "let rec" over data structures;
    link startup file first, fixes "undefined symbol" errors with some
    libraries.
  
  * ocamlopt, Intel x86:
    more efficient calling sequence for calling C functions;
    floating-point wars, chapter 5: don't use float stack for holding
    float pseudo-registers, stack-allocating them is just as efficient.
  
  * ocamlopt, Alpha and Intel x86: more compact calling sequence for garbage
    collection.
  
  * ocamllex: generated automata no longer use callbacks for refilling
    the input buffer (works better with threads); character literals
    correctly skipped inside actions.
  
  * ocamldep: "-I" directories now searched in the right order
  
  * Thread library: incompatibilities with callbacks, signals, and
    dynamic linking removed; scheduling bug with Thread.wait fixed.
  
  * New "dbm" library, interfaces with NDBM.
  
  * Object-oriented extensions:
      instance variables can now be omitted in class types;
      some error messages have been made clearer;
      several bugs fixes.
  
*** Objective Caml 1.00:
  --------------------
  
  * Merge of Jerome Vouillon and Didier Remy's object-oriented
  extensions.
  
  * All libraries: all "new" functions renamed to "create" because "new"
  is now a reserved keyword.
  
  * Compilation of "or" patterns (pat1 | pat2) completely revised to
  avoid code size explosion.
  
  * Compiler support for preprocessing source files (-pp flag).
  
  * Library construction: flag -linkall to force linking of all units in
  a library.
  
  * Native-code compiler: port to the Sparc under NetBSD.
  
  * Toplevel: fixed bug when tracing several times the same function
  under different names.
  
  * New format for marshaling arbitrary data structures, allows
  marshaling to/from strings.
  
  * Standard library: new module Genlex (configurable lexer for streams)
  
  * Thread library: much better support for I/O and blocking system calls.
  
  * Graphics library: faster reclaimation of unused pixmaps.
  
  * Unix library: new functions {set,clear}_nonblock, {set,clear}_close_on_exec,
  {set,get}itimer, inet_addr_any, {get,set}sockopt.
  
  * Dynlink library: added support for linking libraries (.cma files).


** Caml Special Light
# originally in Changes

*** Caml Special Light 1.15:
  ------------------------
  
  * Caml Special Light now runs under Windows NT and 95. Many thanks to
  Kevin Gallo (Microsoft Research) who contributed his initial port.
  
  * csllex now generates tables for a table-driven automaton.
  The resulting lexers are smaller and run faster.
  
  * Completely automatic configuration script.
  
  * Typing: more stringent checking of module type definitions against
  manifest module type specifications.
  
  * Toplevel: recursive definitions of values now working.
  
  * Native-code compiler, all platforms:
          toplevel "let"s with refutable patterns now working;
          fixed bug in assignment to float record fields;
          direct support for floating-point negation and absolute value.
  
  * Native-code compiler, x86: fixed bug with tail calls (with more than
  4 arguments) from a function with a one-word stack frame.
  
  * Native-code compiler, Sparc: problem with -compact fixed.
  
  * Thread library: support for non-blocking writes; scheduler revised.
  
  * Unix library: bug in gethostbyaddr fixed; bounds checking for read,
  write, etc.
  
*** Caml Special Light 1.14:
  ------------------------
  
  * cslopt ported to the PowerPC/RS6000 architecture. Better support for
  AIX in the bytecode system as well.
  
  * cslopt, all platforms: fixed bug in live range splitting around catch/exit.
  
  * cslopt for the Intel (floating-point wars, chapter 4):
  implemented Ershov's algorithm to minimize floating-point stack usage;
  out-of-order pops fixed.
  
  * Several bug fixes in callbacks and signals.
  
*** Caml Special Light 1.13:
  ------------------------
  
  * Pattern-matching compilation revised to factor out accesses inside
  matched structures.
  
  * Callbacks and signals now supported in cslopt.
  Signals are only detected at allocation points, though.
  Added callback functions with 2 and 3 arguments.
  
  * More explicit error messages when a native-code program aborts due
  to array or string bound violations.
  
  * In patterns, "C _" allowed even if the constructor C has several arguments.
  
  * && and || allowed as alternate syntax for & and or.
  
  * cslopt for the Intel: code generation for floating-point
  operations entirely redone for the third time (a pox on whomever at
  Intel decided to organize the floating-point registers as a stack).
  
  * cslopt for the Sparc: don't use Sparc V8 smul and sdiv instructions,
  emulation on V7 processors is abysmal.
  
*** Caml Special Light 1.12:
  ------------------------
  
  * Fixed an embarrassing bug with references to floats.
  
*** Caml Special Light 1.11:
  ------------------------
  
  * Streams and stream parsers a la Caml Light are back (thanks to
  Daniel de Rauglaudre).
  
  * User-level concurrent threads, with low-level shared memory primitives
  (locks and conditions) as well as channel-based communication primitives
  with first-class synchronous events, in the style of Reppy's CML.
  
  * The native-code compiler has been ported to the HP PA-RISC processor
  running under NextStep (sorry, no HPUX, its linker keeps dumping
  core on me).
  
  * References not captured in a function are optimized into variables.
  
  * Fixed several bugs related to exceptions.
  
  * Floats behave a little more as specified in the IEEE standard
  (believe it or not, but x < y is not the negation of x >= y).
  
  * Lower memory consumption for the native-code compiler.
  
*** Caml Special Light 1.10:
  ------------------------
  
  * Many bug fixes (too many to list here).
  
  * Module language: introduction of a "with module" notation over
  signatures for concise sharing of all type components of a signature;
  better support for concrete types in signatures.
  
  * Native-code compiler: the Intel 386 version has been ported to
  NextStep and FreeBSD, and generates better code (especially for
  floats)
  
  * Tools and libraries: the Caml Light profiler and library for
  arbitrary-precision arithmetic have been ported (thanks to John
  Malecki and Victor Manuel Gulias Fernandez); better docs for the Unix
  and regexp libraries.
  
*** Caml Special Light 1.07:
  ------------------------
  
  * Syntax: optional ;; allowed in compilation units and structures
  (back by popular demand)
  
  * cslopt: 
  generic handling of float arrays fixed
  direct function application when the function expr is not a path fixed
  compilation of "let rec" over values fixed
  multiple definitions of a value name in a module correctly handled
  no calls to ranlib in Solaris
  
  * csltop: #trace now working
  
  * Standard library: added List.memq; documentation of Array fixed.
  
*** Caml Special Light 1.06:
  ------------------------
  
  * First public release.

** Caml light
# originally in Changes

*** Caml Light 0.75:
  ----------------
  
*** Caml Light 0.74:
  ---------------
  
  * Typing: when typing a sequence (e1;e2), warn if e1 does not have
    type "unit".
  
  * Standard library:
    - module string: added index_char, rindex_char, index_char_from,
      rindex_char_from.
    - module vect: added init_vect.
    - module format: added a printf facility to control the pretty-printer.
    - module float: more floating-point functions (all ANSI-C functions).
    - The iterators do_list, do_vect et al have more restricted types, e.g.
      ('a -> unit) -> 'a list -> unit instead of ('a -> 'b) -> 'a list -> unit.
    - module sys: new function sys__time to measure elapsed time.
  
  * MS Windows port: fixed bugs in functions over graphics__image.
  
  * libnum: square root rewritten. Many bug fixes to support 64 bits
    architectures. Lot of functions rewritten or added. More tests
    added.
    Module nat: now performs sanity checks.
    New module fnat: the same functionality as module nat, without
    sanity checks.
    The toplevel "camlnum" now comes with printers installed for the
    num types.
    Assembly code for pentium processors is now supported (on average
    this implementation is approximately 3 times faster than the pure C
    implementation) (set the variable BIGNUM_ARCH to pentium in the
    Makefile of the contrib directory).
  
  * camllex: fixed bug causing undetected type errors in lexer definitions.
  
*** Caml Light 0.73:
  ---------------
  
  * Standard library:
    - Fixed a bug with hasthbl__do_table_rev, causing #open of a module
      with multiply defined identifiers to behave incorrectly.
    - map__iter now conforms to the documentation w.r.t. old bindings.
  
  * MS Windows port: fixed several bugs in the interactive application
    that showed up only under Win 3.1.
  
*** Caml Light 0.72:
  ---------------
  
  * Parsing: fixed precedence of alphanumeric user-defined infixes,
    as well as lor, land, lxor; fixed location bug in error reporting
    involving the empty list [].
  
  * Typing: better handling of constant or non-contractive type abbreviations
    such as type 'a t == int or type 'a t == 'a.
  
  * Standard library:
    - The type 'a option = None | Some of 'a is now a built-in type;
    - Module "format": added ability to run several formatters with
      different output channels in parallel;
    - Module "genlex": better handling of comments and character literals;
    - Module "hashtbl": fixed memory leak caused by hashtbl__remove;
    - Module "int": added the constants max_int and min_int
    - Module "printf": added the sprintf function to output to a string
    - Module "stream": fixed unsharing bug in streams built by stream_from
    - Module "string": added the "concat" function to catenate a list of strings.
  
  * Compilation: fixed handling of top-level exceptions in compilation
    units (e.g. let x = raise Foo;;).
  
  * Run-time system: allocation bug for the Sys_error exception fixed;
    fixed pointer assignment bug in the parsing engine.
  
  * MS Windows port: numerous fixes in the interactive toplevel application;
    fully automatic installation procedure.
  
  * Emacs editing mode for Caml replaced by Ian Zimmerman's caml-mode.
    It's a complete reimplementation that offers fully automatic
    indenting and much more.
  
  * caml-tex formatter: also available for LaTeX 2e
    (contributed by Jens Kloecker).
  
  * X11 graphics primitives: bug fixes in event handling and
    interaction between close_graph and image reclaimation.
  
  * MS Windows graphics primitives: blit_image, draw_image, get_image
    now working properly; drawing area no longer limited to 600x400.
  
  * libnum: bug in square root fixed.
  
  * libstr: fixed bug in string_before when length = 0.
  
  * libunix: pipe bugs in open_process_in fixed; termios interface more
    POSIX compliant.
  
  
*** Caml Light 0.71:
  ---------------
  
  * Port to MS Windows (3.1, 95, NT).
  
  * Parsing: better handling of optional ";", concatenations (@, ^) now
    associate to the right.
  
  * Typing: type constraints in inner lets could cause incorrect generalizations;
    now, all type variables in type constraints are considered bound at
    the outermost "let".
  
  * Compilation: bug fix in "when" clauses in pattern-matchings on mutables.
  
  * Standard library: fixed bug in parsing engine that generated wrong symbol
    positions for epsilon-productions; various fixes in "format".
  
  * camlyacc: trailer text in grammar was not copied to generated file.
  
  * libunix: added "gettimeofday", bug fixes in "select", "times",
    "open_process_in".
  
  * libnum: bug in conversion to string fixed.
  
  * French version for the Macintosh (thanks to Jerome Kasparian).
  
*** Caml Light 0.7:
  --------------
  
  * Source-level debugger with replay capabilities. Compiler support for
    the debugger added. [Unix-only]
  
  * New contributed libraries and tools:
          - camltk: a complete X-windows toolkit based on TCL/TK.
          - camlpro: a profiler for Caml Light programs (execution counts)
          - lorder: determine ordering of .zo files at link-time
  
  * camlbrowser: a camltk-based graphics browser for Caml sources
    and interfaces, with hypertext navigation. [Unix-only]
  
  * Polymorphism is now restricted to values (let x = e generalizes the type of
    x only if e is syntactically a value, e.g. a constant, a variable, a
    function, a tuple of values, etc). This ensures correct, type-safe handling
    of polymorphic mutable structures.
  
  * "Guards" in pattern-matching (match ... with pat when cond -> expr).
  
  * Partial matches and unused match cases are correctly detected now.
  
  * Internationalized error messages (controlled by the LANG environment
    variable; known languages so far: english, french, spanish,
    german, and italian).
    More detailed error messages.
  
  * Various fixes in the garbage collector to fight fragmentation of the
    major heap, result in major speedups for some long-running programs.
  
  * Generic comparisons (prefix < : 'a -> 'a -> bool). Compiler optimizations
    for comparisons on base types.
  
  * Type-checker rewritten in bottom-up style instead of top-down style.
    Hopefully this makes type errors more understandable.
  
  * let rec (f : ty) = ... now supported.
  
  * New class of infix and prefix symbols supported (e.g. *=, !!, ++, with
    precedence/associativity determined by their first character).
  
  * Syntactic sugar:
    - Alternate syntax for string access and update (s.[i], s.[i] <- c).
    - Final semicolons permitted in sequences, lists, arrays and records
      (e.g. begin ...; ...; end or [1;2;]).
    - Initial | permitted in pattern matchings and type definitions
      (e.g. function | pat -> expr | ...
       or type t = | Cstr1 | ...)
    - "&&" and "||" synonymous for "&" and "or".
  
  * Optimized access to unqualified identifiers in symbol tables.
  
  * Parser cleaned up a bit, reduce/reduce conflicts eliminated.
  
  * New library modules: format (to write pretty-printers), gc (to control the
    garbage collector and obtain various statistics on memory allocation).
  
  * The toplevel pretty-prints values and types.
  
  * New toplevel functions: install_printer (user-defined printing functions,
    now type safe and associated with a type expression -- e.g. int list --
    not with a type constructor -- e.g. list); set_print_depth and
    set_print_length (control how much is printed).
  
  * Better support for non-generalizable type variables in phrases:
    they no longer cause an error immediately, the check is delayed till
    the end of the compilation unit.
  
  * Static type-checking of printf. User-defined printers supported in printf
    formats (%a and %t).
  
  * "camlc -W" prints extra warnings (useless #open, capitalized variable, ...).
  
  * camlyacc: more checks on grammar for missing actions, etc.
    Parsing engine now reentrant; a camlyacc-generated parser can call
    another one in one of its actions. Bug with tokens having a tuple as
    semantic attribute fixed.
  
  * Better support for 64-bit architectures: 32-bit architectures can read
    values written on a file by a 64-bit architecture; max length of strings
    and arrays now determined by the runtime system.
  
  * New primitive ouput_compact_value to write arbitrary values to disk in
    a more compact (but more CPU-demanding) format than output_value.
  
  * More robust parsing of argv (some Unix kernels set argv[0] = argv[1] = file
    when a #! file is run).
  
  * CAMLRUNPARAM environment variable to set GC parameters.
  
  * contrib/libgraph: implemented alternate event handling methods if async I/O
    are not available; ask for system calls to be restarted if possible;
    restart read and write system calls if interrupted; better handling
    of "button up" and "mouse motion" events.
  
  * contrib/libnums: upgraded the bignum library; better 64-bit support
    (but still has some 64-bit bugs); alternate names for num operations
    (+/ -/ */ etc).
  
  Main incompatibilities with Caml Light 0.61:
  
  * Polymorphic generalization has been severely restricted to eliminate
    unsoundness w.r.t. polymorphic mutables. As a consequence, several
    "let" declarations that used to be polymorphic are now monomorphic,
    which may cause type errors later. See the manual p. 54 for a complete
    description of the problem and several workarounds.
  
  * Due to the new infix operators, extra blank space sometimes needs
    to be inserted, e.g. `x+!y' should now be written `x+ !y'
    (or better yet, `x + !y').
  
  
*** Caml Light 0.61:
  ----------------
  
  * Pattern-matching against (C x) where C has several arguments now works
    correctly.
  
  * The fatal error "labels_of_type" has been fixed (it was raised when
    typing e.label, where the type inferred for e is not a record type,
    but an abbreviation for a record type).
  
  * Hashing has been rewritten to give consistent results across all 
    architectures, including when -custom is used.
  
  * output_value and intern_value are now fully compatible across 32-bit and
    64-bit architectures. A 32-bit architecture can read values written
    on a 64-bit architecture.
  
  * Better error message when compiling a .ml whose .mli has not been compiled.
  
  * The preprocessed files are more compatible with cpp: (**) instead of /**/.
  
  * Typos in library interfaces fixed.
  
*** Caml Light 0.6:
  ---------------
  
  * Better handling of type abbreviations. Implementing an abstract type
    as an abbreviation now works correctly.
  
  * Debugging mode (option -g to camlc and camllight) to get access
    to the internals of module implementations.
  
  * 64-bit architectures are supported.
  
  * New library modules:
          genlex    generic lexical analyser
          set       applicative sets over ordered types
          map       applicative maps over ordered types
          baltree   balanced binary trees over ordered types
  
  * "compile" command at toplevel (especially useful in the Macintosh version).
  
  * #directory directive.
  
  * Better support for ISO-Latin-1 character set.
  
  * -i option also works when compiling .mli files.
  
  * Errors and warnings: detection of type redefinitions .ml/.mli; warning for
    partial applications in sequences
  
  * Bug fixes: removed incorrect "optimizations" in stream parsers; incorrect
    declaration of string__compare_strings; stream__stream_get fixed;
    POPTRAP restarts correctly after signal handling.
  
  * Optimizations: io__input_line rewritten in C.
  
  * New functions: parsing__rhs_start, parsing__rhs_end; sys__interactive.
  
  * New contributed libraries and tools:
          camlmode  Emacs editing mode for Caml Light
          mletags   Indexing of Caml Light source files for use with Emacs "tags"
          libnum    Arbitrary-precision arithmetic
          libstr    String operations, regular expressions
  
  * The 80386 PC version is now DPMI-compliant, hence it can run under Windows
    (in text mode inside a DOS windows and with no graphics, though).
  
  * More examples, including those from the book "Le langage Caml".
  
  * libunix: tty interface (POSIX termios), popen-style functions.
  
*** Caml Light 0.5:
  ---------------
  
  Language extensions:
  
  * Streams and stream matching, for writing parsers and printers.
  
  * Abstract types can now be implemented as type abbreviations.
  
  * Constructors for variant types are now either constant or
  non-constant, instead of having a fixed arity as before. This fixes
  the nasty problem of ref(1,2) being rejected because ref has arity 1.
  
  Extensions to the caml light environment:
  
  * A general mechanism to link Caml Light code with C code. As a
  consequence, an X-windows interface and a library of Unix system calls
  are now provided.
  
  * Two new commands: camllibr, to build libraries, and camlmktop, to
  construct custom toplevel systems.
  
  * Several new modules in the library (printf, hashtbl, random, stack,
  queue, ...)
  
  * Executable bytecode files are now machine-independent: you can run
  the same bytecode file on different architectures.
  
  Bug fixes: lots of them. The most important are:
  
  * Pattern-matching over mutable structures is now correctly compiled:
  modifying the matched structure after matching, then accessing parts
  of the structure used to fail in various ways; this is now safe.
  
  * Redefinition of exceptions is now correctly handled.
  
  Implementation changes:
  
  * A new garbage collector. The major collector is now incremental,
  meaning that garbage collection is even less disruptive than before.
  
  * The produced bytecode is slightly better, due to several new
  optimizations in the compiler back-end.
  
  * The linker has been separated from the compiler, and is now clever
  enough to avoid linking in useless code. To support this, the format
  of .zo files was changed. The new format is much more compact, loads
  faster, and supports libraries.
  
  * Autoconfiguration script.
  
  Microcomputer ports:
  
  * Graphics primitives.
  
  * For the Macintosh port, the toplevel system is now a standalone
  application, with its own user interface, and does not require MPW
  anymore. (The batch compilers still require MPW.)
  
  * The PC ports work in conjunction with TSR line editors.
  
  * The 80386 PC port is now VCPI-compliant, and handles keyboard
  interrupts correctly.
  
  Main incompatibilities with Caml Light 0.41:
  
  * Assignment operations such as :=, vect_assign, <- now return (), instead
  of the new value.
  
  * The "failure" exception from the standard library is now named "Failure".
  
  * Searching functions from the standard library (assoc, assq, ...) now
  raise "Not_found" on error, instead of "failure".
  
  * Some library modules have been renamed or modified. The old "unix"
  module is now named "sys". The new "sys" module is less Unix-specific.
  Some of the functions in the old "unix" module have disappeared, other
  have a slightly different interface. The old "hash" module is now
  subsumed by the "hashtbl" module.
  
  
*** Caml Light 0.41:
  ----------------
  
  * Alternate spelling for floating-point operators: +. -. *. etc.
  
  * New library functions: io__input_line, lexing__create_lexer_string.
  
  * io__seek*, io__pos* more efficient.
  
  
*** Caml Light 0.4:
  ---------------
  
  * A lexer generator (in the style of lex) and a parser generator (in
    the style of yacc). These tools makes it easier to write compilers
    and similar programs. They also clean up the bootstrapping process a lot.
  
  * Two new ports to microcomputers: to the 386 PC, and to the Amiga.
    The 386 PC version runs in 32 bit protected mode, and takes
    advantage of memory above 640K.
  
  * Many bug fixes.
  
  * A simpler installation procedure.
  
*** Caml Light 0.3:
  ---------------
  
  * First public release.

* Caml and ML history

** Caml

** ML
