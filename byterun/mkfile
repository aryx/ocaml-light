</$objtype/mkfile

# If you want to cross compile ocamlrun, you need to add this 
# to byterun/config.h:
#   #undef __GNUC__
#   #undef ARCH_SIXTYFOUR
#   #undef HAS_TERMCAP
#   #undef HAS_SETITIMER
# If you want to cross compile ocamlc, that is to produce an ocamlc
# that will work under plan9, ou also need to modify utils/config.ml and put:
#   let bytecomp_c_compiler = "pcc "
#   let c_libraries = ""
#   let ext_obj = ".8"
# Then run mk and mk install
#
# For the other libraries you currently need to go in each
# otherlibs/str otherlibs/unix and otherlibs/threads and run
# mk; mk install from there.
# You also need to comment the call using sigvtalarm in otherlibs/threads/.


OFILES1=interp.$O misc.$O stacks.$O fix_code.$O startup.$O main.$O \
  freelist.$O major_gc.$O minor_gc.$O memory.$O alloc.$O roots.$O \
  fail.$O signals.$O printexc.$O \
  compare.$O ints.$O floats.$O str.$O array.$O io.$O extern.$O intern.$O \
  hash.$O sys.$O meta.$O parsing.$O gc_ctrl.$O terminfo.$O md5.$O obj.$O \
  lexing.$O callback.$O debugger.$O weak.$O compact.$O 

BIN=/$objtype/bin

OFILES=$OFILES1 prims.$O

</sys/src/cmd/mkone

#old: I was adding -p in CFLAGS to use the ANSI preprocessor, because the
# builtin cpp in 8c does not support complex conditions in #idef such as
# #if defined(X) && !defined(Y).
# But it was not enough. The ANSI preprocessor /bin/cpp operates in a
# traditional mode where macro calls with space before as in alloc (1,2)
# are not handled, and byterun/ is full of that. Moreover byterun
# uses a lot of unixisms, signals, select, etc which are not supported
# by default by plan9. So I switched to pcc and ape (I had to patch
# pcc in kencc though to call gcc -E instead of /bin/cpp).

CC=pcc
LD=pcc
# I removed -T because prims.c (a generated file) has wrong signatures 
# (but it's ok).
# I added here some -D_xxx instead of config.h because some files 
# don't include config.h, so simpler to do it here once and for all.
CFLAGS=-FV -c -D_POSIX_SOURCE -D_BSD_EXTENSION
# add this if you want better trace -DDEBUG


default:V: 8.out libcamlrun.a

lib:V: libcamlrun.a

libcamlrun.a: $OFILES1
	rm -f $target
	ar vu $target $OFILES1              

ROOT=/home/pad/plan9/ROOT

# do not use ../boot/...; use the latest compiled stuff
# don't forget to modify byterun/config.h 
install:V: 8.out libcamlrun.a
	cp -f 8.out $ROOT/usr/local/bin/ocamlrun
    cp libcamlrun.a $ROOT/usr/local/lib/ocaml/
    mk install2

# install the portable libraries
install2:V:
    cp ../stdlib/*.cm* $ROOT/usr/local/lib/ocaml
    cp ../otherlibs/unix/*.cm* $ROOT/usr/local/lib/ocaml
    cp ../otherlibs/str/*.cm* $ROOT/usr/local/lib/ocaml
    cp ../otherlibs/threads/*.cm* $ROOT/usr/local/lib/ocaml/threads

# for the otherlibs you need to go in each directory

# install the compilers, don't forget to modify utils/config.ml
install3:V:
    cp ../ocamlc $ROOT/usr/local/bin/
    cp ../ocaml $ROOT/usr/local/bin/
    cp ../lex/ocamllex $ROOT/usr/local/bin/

clean:V:
	rm -f *.[58] [58].out y.tab.? lex.yy.c y.debug y.output  $CLEANFILES
	rm -f libcamlrun.a
